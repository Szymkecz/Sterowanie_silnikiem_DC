
DC_motor_PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005738  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08005908  08005908  00015908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005aac  08005aac  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08005aac  08005aac  00015aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ab4  08005ab4  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ab4  08005ab4  00015ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ab8  08005ab8  00015ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08005abc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  20000064  08005b20  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  08005b20  00020364  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001014c  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002828  00000000  00000000  00030223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df0  00000000  00000000  00032a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ac9  00000000  00000000  00033840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022cc8  00000000  00000000  00034309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000128a8  00000000  00000000  00056fd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d15a8  00000000  00000000  00069879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004144  00000000  00000000  0013ae24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0013ef68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080058f0 	.word	0x080058f0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	080058f0 	.word	0x080058f0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <drv8835_init>:
 */

#include "main.h"
#include "drv8835.h"

void drv8835_init() {
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	drv8835_mode_control(Phase_Enable_Mode);
 80005c0:	2001      	movs	r0, #1
 80005c2:	f000 f80f 	bl	80005e4 <drv8835_mode_control>
	drv8835_set_motorA_direction(CCW);
 80005c6:	2001      	movs	r0, #1
 80005c8:	f000 f82a 	bl	8000620 <drv8835_set_motorA_direction>
	drv8835_set_motorA_speed(0);
 80005cc:	2000      	movs	r0, #0
 80005ce:	f000 f845 	bl	800065c <drv8835_set_motorA_speed>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80005d2:	2108      	movs	r1, #8
 80005d4:	4802      	ldr	r0, [pc, #8]	; (80005e0 <drv8835_init+0x24>)
 80005d6:	f002 f987 	bl	80028e8 <HAL_TIM_PWM_Start>
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	200000f8 	.word	0x200000f8

080005e4 <drv8835_mode_control>:

void drv8835_mode_control(DRV8835_Mode mode) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
	if (mode == Phase_Enable_Mode)
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d106      	bne.n	8000602 <drv8835_mode_control+0x1e>
		HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, SET);
 80005f4:	2201      	movs	r2, #1
 80005f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005fa:	4808      	ldr	r0, [pc, #32]	; (800061c <drv8835_mode_control+0x38>)
 80005fc:	f001 fa4a 	bl	8001a94 <HAL_GPIO_WritePin>
	else if (mode == In_In_Mode)
		HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, RESET);
}
 8000600:	e008      	b.n	8000614 <drv8835_mode_control+0x30>
	else if (mode == In_In_Mode)
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d105      	bne.n	8000614 <drv8835_mode_control+0x30>
		HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800060e:	4803      	ldr	r0, [pc, #12]	; (800061c <drv8835_mode_control+0x38>)
 8000610:	f001 fa40 	bl	8001a94 <HAL_GPIO_WritePin>
}
 8000614:	bf00      	nop
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40020000 	.word	0x40020000

08000620 <drv8835_set_motorA_direction>:

void drv8835_set_motorA_direction(DRV8835_Direction dir) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
	if (dir == CW)
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d106      	bne.n	800063e <drv8835_set_motorA_direction+0x1e>
		HAL_GPIO_WritePin(APHASE_GPIO_Port, APHASE_Pin, SET);
 8000630:	2201      	movs	r2, #1
 8000632:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000636:	4808      	ldr	r0, [pc, #32]	; (8000658 <drv8835_set_motorA_direction+0x38>)
 8000638:	f001 fa2c 	bl	8001a94 <HAL_GPIO_WritePin>
	else if (dir == CCW)
		HAL_GPIO_WritePin(APHASE_GPIO_Port, APHASE_Pin, RESET);
}
 800063c:	e008      	b.n	8000650 <drv8835_set_motorA_direction+0x30>
	else if (dir == CCW)
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d105      	bne.n	8000650 <drv8835_set_motorA_direction+0x30>
		HAL_GPIO_WritePin(APHASE_GPIO_Port, APHASE_Pin, RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	f44f 7100 	mov.w	r1, #512	; 0x200
 800064a:	4803      	ldr	r0, [pc, #12]	; (8000658 <drv8835_set_motorA_direction+0x38>)
 800064c:	f001 fa22 	bl	8001a94 <HAL_GPIO_WritePin>
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40020000 	.word	0x40020000

0800065c <drv8835_set_motorA_speed>:

void drv8835_set_motorA_speed(uint16_t speed)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	80fb      	strh	r3, [r7, #6]
	if(speed >= htim2.Instance->ARR)
 8000666:	88fa      	ldrh	r2, [r7, #6]
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <drv8835_set_motorA_speed+0x34>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800066e:	429a      	cmp	r2, r3
 8000670:	d303      	bcc.n	800067a <drv8835_set_motorA_speed+0x1e>
		speed = htim2.Instance->ARR;
 8000672:	4b07      	ldr	r3, [pc, #28]	; (8000690 <drv8835_set_motorA_speed+0x34>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000678:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, speed);
 800067a:	4b05      	ldr	r3, [pc, #20]	; (8000690 <drv8835_set_motorA_speed+0x34>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	88fa      	ldrh	r2, [r7, #6]
 8000680:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	200000f8 	.word	0x200000f8

08000694 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	; 0x28
 8000698:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]
 80006ae:	4b32      	ldr	r3, [pc, #200]	; (8000778 <MX_GPIO_Init+0xe4>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a31      	ldr	r2, [pc, #196]	; (8000778 <MX_GPIO_Init+0xe4>)
 80006b4:	f043 0304 	orr.w	r3, r3, #4
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b2f      	ldr	r3, [pc, #188]	; (8000778 <MX_GPIO_Init+0xe4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0304 	and.w	r3, r3, #4
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	4b2b      	ldr	r3, [pc, #172]	; (8000778 <MX_GPIO_Init+0xe4>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a2a      	ldr	r2, [pc, #168]	; (8000778 <MX_GPIO_Init+0xe4>)
 80006d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b28      	ldr	r3, [pc, #160]	; (8000778 <MX_GPIO_Init+0xe4>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	4b24      	ldr	r3, [pc, #144]	; (8000778 <MX_GPIO_Init+0xe4>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a23      	ldr	r2, [pc, #140]	; (8000778 <MX_GPIO_Init+0xe4>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b21      	ldr	r3, [pc, #132]	; (8000778 <MX_GPIO_Init+0xe4>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <MX_GPIO_Init+0xe4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a1c      	ldr	r2, [pc, #112]	; (8000778 <MX_GPIO_Init+0xe4>)
 8000708:	f043 0302 	orr.w	r3, r3, #2
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <MX_GPIO_Init+0xe4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0302 	and.w	r3, r3, #2
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MODE_Pin|APHASE_Pin, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000720:	4816      	ldr	r0, [pc, #88]	; (800077c <MX_GPIO_Init+0xe8>)
 8000722:	f001 f9b7 	bl	8001a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000726:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800072a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800072c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000730:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	4619      	mov	r1, r3
 800073c:	4810      	ldr	r0, [pc, #64]	; (8000780 <MX_GPIO_Init+0xec>)
 800073e:	f001 f815 	bl	800176c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|MODE_Pin|APHASE_Pin;
 8000742:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000748:	2301      	movs	r3, #1
 800074a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000750:	2300      	movs	r3, #0
 8000752:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000754:	f107 0314 	add.w	r3, r7, #20
 8000758:	4619      	mov	r1, r3
 800075a:	4808      	ldr	r0, [pc, #32]	; (800077c <MX_GPIO_Init+0xe8>)
 800075c:	f001 f806 	bl	800176c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000760:	2200      	movs	r2, #0
 8000762:	2100      	movs	r1, #0
 8000764:	2028      	movs	r0, #40	; 0x28
 8000766:	f000 ff38 	bl	80015da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800076a:	2028      	movs	r0, #40	; 0x28
 800076c:	f000 ff51 	bl	8001612 <HAL_NVIC_EnableIRQ>

}
 8000770:	bf00      	nop
 8000772:	3728      	adds	r7, #40	; 0x28
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40023800 	.word	0x40023800
 800077c:	40020000 	.word	0x40020000
 8000780:	40020800 	.word	0x40020800

08000784 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000784:	b590      	push	{r4, r7, lr}
 8000786:	b091      	sub	sp, #68	; 0x44
 8000788:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800078a:	f000 fdd9 	bl	8001340 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800078e:	f000 f89d 	bl	80008cc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000792:	f7ff ff7f 	bl	8000694 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000796:	f000 fd2f 	bl	80011f8 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 800079a:	f000 fb83 	bl	8000ea4 <MX_TIM2_Init>
	MX_TIM3_Init();
 800079e:	f000 fbd9 	bl	8000f54 <MX_TIM3_Init>
	MX_TIM6_Init();
 80007a2:	f000 fc2b 	bl	8000ffc <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */
	drv8835_init();
 80007a6:	f7ff ff09 	bl	80005bc <drv8835_init>
	motor_str_init(&motorA, &htim3);
 80007aa:	493b      	ldr	r1, [pc, #236]	; (8000898 <main+0x114>)
 80007ac:	483b      	ldr	r0, [pc, #236]	; (800089c <main+0x118>)
 80007ae:	f000 f97e 	bl	8000aae <motor_str_init>
	pid_init(&(motorA.pid_controller), MOTOR_A_Kp, MOTOR_A_Ki, MOTOR_A_Kd,
 80007b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007b6:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 80008a0 <main+0x11c>
 80007ba:	eddf 0a3a 	vldr	s1, [pc, #232]	; 80008a4 <main+0x120>
 80007be:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 80007c2:	4839      	ldr	r0, [pc, #228]	; (80008a8 <main+0x124>)
 80007c4:	f000 fa09 	bl	8000bda <pid_init>
	MOTOR_A_ANTI_WINDUP);

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80007c8:	213c      	movs	r1, #60	; 0x3c
 80007ca:	4833      	ldr	r0, [pc, #204]	; (8000898 <main+0x114>)
 80007cc:	f002 f9fa 	bl	8002bc4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim6);
 80007d0:	4836      	ldr	r0, [pc, #216]	; (80008ac <main+0x128>)
 80007d2:	f001 ffc9 	bl	8002768 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart2, rx_buffer, sizeof(rx_buffer));
 80007d6:	2202      	movs	r2, #2
 80007d8:	4935      	ldr	r1, [pc, #212]	; (80008b0 <main+0x12c>)
 80007da:	4836      	ldr	r0, [pc, #216]	; (80008b4 <main+0x130>)
 80007dc:	f002 fff2 	bl	80037c4 <HAL_UART_Receive_IT>

	int speed_table[] = { 20, 40, -40, 10 };
 80007e0:	4b35      	ldr	r3, [pc, #212]	; (80008b8 <main+0x134>)
 80007e2:	f107 0420 	add.w	r4, r7, #32
 80007e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int i = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t time_tick = HAL_GetTick();
 80007f0:	f000 fe0c 	bl	800140c <HAL_GetTick>
 80007f4:	63b8      	str	r0, [r7, #56]	; 0x38
	uint32_t max_time = 5000;
 80007f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80007fa:	637b      	str	r3, [r7, #52]	; 0x34

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		if (!mode) {
 80007fc:	4b2f      	ldr	r3, [pc, #188]	; (80008bc <main+0x138>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	f083 0301 	eor.w	r3, r3, #1
 8000804:	b2db      	uxtb	r3, r3
 8000806:	2b00      	cmp	r3, #0
 8000808:	d029      	beq.n	800085e <main+0xda>
			if (received_value != last_value) {
 800080a:	4b2d      	ldr	r3, [pc, #180]	; (80008c0 <main+0x13c>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	4b2d      	ldr	r3, [pc, #180]	; (80008c4 <main+0x140>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	429a      	cmp	r2, r3
 8000814:	d012      	beq.n	800083c <main+0xb8>
				last_value = received_value; // Update last_value
 8000816:	4b2a      	ldr	r3, [pc, #168]	; (80008c0 <main+0x13c>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a2a      	ldr	r2, [pc, #168]	; (80008c4 <main+0x140>)
 800081c:	6013      	str	r3, [r2, #0]

				// Print the new value via UART
				char msg[30];
				int len = snprintf(msg, sizeof(msg), "Received: %d\r\n",
 800081e:	4b28      	ldr	r3, [pc, #160]	; (80008c0 <main+0x13c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4638      	mov	r0, r7
 8000824:	4a28      	ldr	r2, [pc, #160]	; (80008c8 <main+0x144>)
 8000826:	211e      	movs	r1, #30
 8000828:	f003 fef0 	bl	800460c <sniprintf>
 800082c:	6338      	str	r0, [r7, #48]	; 0x30
						received_value);
				HAL_UART_Transmit_IT(&huart2, (uint8_t*) msg, len);
 800082e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000830:	b29a      	uxth	r2, r3
 8000832:	463b      	mov	r3, r7
 8000834:	4619      	mov	r1, r3
 8000836:	481f      	ldr	r0, [pc, #124]	; (80008b4 <main+0x130>)
 8000838:	f002 ff8e 	bl	8003758 <HAL_UART_Transmit_IT>
			}

			if ((HAL_GetTick() - time_tick) > 100) {
 800083c:	f000 fde6 	bl	800140c <HAL_GetTick>
 8000840:	4602      	mov	r2, r0
 8000842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	2b64      	cmp	r3, #100	; 0x64
 8000848:	d9d8      	bls.n	80007fc <main+0x78>
				motor_set_speed(&motorA, received_value);
 800084a:	4b1d      	ldr	r3, [pc, #116]	; (80008c0 <main+0x13c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4619      	mov	r1, r3
 8000850:	4812      	ldr	r0, [pc, #72]	; (800089c <main+0x118>)
 8000852:	f000 f9ac 	bl	8000bae <motor_set_speed>
				time_tick = HAL_GetTick();
 8000856:	f000 fdd9 	bl	800140c <HAL_GetTick>
 800085a:	63b8      	str	r0, [r7, #56]	; 0x38
 800085c:	e7ce      	b.n	80007fc <main+0x78>
			}
		} else {
			if ((HAL_GetTick() - time_tick) > max_time) {
 800085e:	f000 fdd5 	bl	800140c <HAL_GetTick>
 8000862:	4602      	mov	r2, r0
 8000864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800086a:	429a      	cmp	r2, r3
 800086c:	d2c6      	bcs.n	80007fc <main+0x78>
				time_tick = HAL_GetTick();
 800086e:	f000 fdcd 	bl	800140c <HAL_GetTick>
 8000872:	63b8      	str	r0, [r7, #56]	; 0x38

				motor_set_speed(&motorA, speed_table[i++]);
 8000874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000876:	1c5a      	adds	r2, r3, #1
 8000878:	63fa      	str	r2, [r7, #60]	; 0x3c
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	3340      	adds	r3, #64	; 0x40
 800087e:	443b      	add	r3, r7
 8000880:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8000884:	4619      	mov	r1, r3
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <main+0x118>)
 8000888:	f000 f991 	bl	8000bae <motor_set_speed>

				if (i >= 4)
 800088c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800088e:	2b03      	cmp	r3, #3
 8000890:	ddb4      	ble.n	80007fc <main+0x78>
					i = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (!mode) {
 8000896:	e7b1      	b.n	80007fc <main+0x78>
 8000898:	20000140 	.word	0x20000140
 800089c:	200000c0 	.word	0x200000c0
 80008a0:	3b6bedfa 	.word	0x3b6bedfa
 80008a4:	3e19999a 	.word	0x3e19999a
 80008a8:	200000dc 	.word	0x200000dc
 80008ac:	20000188 	.word	0x20000188
 80008b0:	20000080 	.word	0x20000080
 80008b4:	200001d0 	.word	0x200001d0
 80008b8:	08005918 	.word	0x08005918
 80008bc:	200000bc 	.word	0x200000bc
 80008c0:	20000000 	.word	0x20000000
 80008c4:	200000b8 	.word	0x200000b8
 80008c8:	08005908 	.word	0x08005908

080008cc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b094      	sub	sp, #80	; 0x50
 80008d0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	2234      	movs	r2, #52	; 0x34
 80008d8:	2100      	movs	r1, #0
 80008da:	4618      	mov	r0, r3
 80008dc:	f003 fef8 	bl	80046d0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80008e0:	f107 0308 	add.w	r3, r7, #8
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80008f0:	2300      	movs	r3, #0
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	4b29      	ldr	r3, [pc, #164]	; (800099c <SystemClock_Config+0xd0>)
 80008f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f8:	4a28      	ldr	r2, [pc, #160]	; (800099c <SystemClock_Config+0xd0>)
 80008fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000900:	4b26      	ldr	r3, [pc, #152]	; (800099c <SystemClock_Config+0xd0>)
 8000902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800090c:	2300      	movs	r3, #0
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	4b23      	ldr	r3, [pc, #140]	; (80009a0 <SystemClock_Config+0xd4>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000918:	4a21      	ldr	r2, [pc, #132]	; (80009a0 <SystemClock_Config+0xd4>)
 800091a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800091e:	6013      	str	r3, [r2, #0]
 8000920:	4b1f      	ldr	r3, [pc, #124]	; (80009a0 <SystemClock_Config+0xd4>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000928:	603b      	str	r3, [r7, #0]
 800092a:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800092c:	2302      	movs	r3, #2
 800092e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000930:	2301      	movs	r3, #1
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000934:	2310      	movs	r3, #16
 8000936:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000938:	2302      	movs	r3, #2
 800093a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800093c:	2300      	movs	r3, #0
 800093e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000940:	2308      	movs	r3, #8
 8000942:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 80;
 8000944:	2350      	movs	r3, #80	; 0x50
 8000946:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000948:	2302      	movs	r3, #2
 800094a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800094c:	2302      	movs	r3, #2
 800094e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000950:	2302      	movs	r3, #2
 8000952:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4618      	mov	r0, r3
 800095a:	f001 fc17 	bl	800218c <HAL_RCC_OscConfig>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <SystemClock_Config+0x9c>
		Error_Handler();
 8000964:	f000 f89e 	bl	8000aa4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000968:	230f      	movs	r3, #15
 800096a:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800096c:	2302      	movs	r3, #2
 800096e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000970:	2300      	movs	r3, #0
 8000972:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000978:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800097a:	2300      	movs	r3, #0
 800097c:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800097e:	f107 0308 	add.w	r3, r7, #8
 8000982:	2102      	movs	r1, #2
 8000984:	4618      	mov	r0, r3
 8000986:	f001 f8b7 	bl	8001af8 <HAL_RCC_ClockConfig>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <SystemClock_Config+0xc8>
		Error_Handler();
 8000990:	f000 f888 	bl	8000aa4 <Error_Handler>
	}
}
 8000994:	bf00      	nop
 8000996:	3750      	adds	r7, #80	; 0x50
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40023800 	.word	0x40023800
 80009a0:	40007000 	.word	0x40007000

080009a4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a0d      	ldr	r2, [pc, #52]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d113      	bne.n	80009de <HAL_TIM_PeriodElapsedCallback+0x3a>
	        motor_calculate_speed(&motorA);
 80009b6:	480d      	ldr	r0, [pc, #52]	; (80009ec <HAL_TIM_PeriodElapsedCallback+0x48>)
 80009b8:	f000 f89a 	bl	8000af0 <motor_calculate_speed>
	        // Send motorA.measured_speed via UART if UART is ready
//	        if (uart_ready) {
//	            uart_ready = false; // Mark UART as busy

	            // Format the message to send motorA.measured_speed
	            snprintf((char*)uart_tx_buffer, sizeof(uart_tx_buffer), "Speed: %d\r\n", motorA.measured_speed);
 80009bc:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <HAL_TIM_PeriodElapsedCallback+0x48>)
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	4a0b      	ldr	r2, [pc, #44]	; (80009f0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80009c2:	2132      	movs	r1, #50	; 0x32
 80009c4:	480b      	ldr	r0, [pc, #44]	; (80009f4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80009c6:	f003 fe21 	bl	800460c <sniprintf>

	            // Transmit the message via UART using interrupts
	            HAL_UART_Transmit_IT(&huart2, uart_tx_buffer, strlen((char*)uart_tx_buffer));
 80009ca:	480a      	ldr	r0, [pc, #40]	; (80009f4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80009cc:	f7ff fc20 	bl	8000210 <strlen>
 80009d0:	4603      	mov	r3, r0
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	461a      	mov	r2, r3
 80009d6:	4907      	ldr	r1, [pc, #28]	; (80009f4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80009d8:	4807      	ldr	r0, [pc, #28]	; (80009f8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80009da:	f002 febd 	bl	8003758 <HAL_UART_Transmit_IT>

	    }
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40001000 	.word	0x40001000
 80009ec:	200000c0 	.word	0x200000c0
 80009f0:	08005928 	.word	0x08005928
 80009f4:	20000084 	.word	0x20000084
 80009f8:	200001d0 	.word	0x200001d0

080009fc <HAL_UART_RxCpltCallback>:
// Handle UART interrupt callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a10      	ldr	r2, [pc, #64]	; (8000a4c <HAL_UART_RxCpltCallback+0x50>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d11a      	bne.n	8000a44 <HAL_UART_RxCpltCallback+0x48>
		uart_ready = true;
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <HAL_UART_RxCpltCallback+0x54>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	701a      	strb	r2, [r3, #0]
		int value;
		if (sscanf((char*) rx_buffer, "%d", &value) == 1) {
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	461a      	mov	r2, r3
 8000a1a:	490e      	ldr	r1, [pc, #56]	; (8000a54 <HAL_UART_RxCpltCallback+0x58>)
 8000a1c:	480e      	ldr	r0, [pc, #56]	; (8000a58 <HAL_UART_RxCpltCallback+0x5c>)
 8000a1e:	f003 fe29 	bl	8004674 <siscanf>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d108      	bne.n	8000a3a <HAL_UART_RxCpltCallback+0x3e>
			if (value >= 0 && value <= 42) {
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	db05      	blt.n	8000a3a <HAL_UART_RxCpltCallback+0x3e>
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	2b2a      	cmp	r3, #42	; 0x2a
 8000a32:	dc02      	bgt.n	8000a3a <HAL_UART_RxCpltCallback+0x3e>
				received_value = value; // Save the valid value
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	4a09      	ldr	r2, [pc, #36]	; (8000a5c <HAL_UART_RxCpltCallback+0x60>)
 8000a38:	6013      	str	r3, [r2, #0]
			}
		}

		// Re-enable UART reception interrupt
		HAL_UART_Receive_IT(&huart2, rx_buffer, sizeof(rx_buffer));
 8000a3a:	2202      	movs	r2, #2
 8000a3c:	4906      	ldr	r1, [pc, #24]	; (8000a58 <HAL_UART_RxCpltCallback+0x5c>)
 8000a3e:	4808      	ldr	r0, [pc, #32]	; (8000a60 <HAL_UART_RxCpltCallback+0x64>)
 8000a40:	f002 fec0 	bl	80037c4 <HAL_UART_Receive_IT>
	}
}
 8000a44:	bf00      	nop
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40004400 	.word	0x40004400
 8000a50:	20000004 	.word	0x20000004
 8000a54:	08005934 	.word	0x08005934
 8000a58:	20000080 	.word	0x20000080
 8000a5c:	20000000 	.word	0x20000000
 8000a60:	200001d0 	.word	0x200001d0

08000a64 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin) { // Check if the interrupt is from the button
 8000a6e:	88fb      	ldrh	r3, [r7, #6]
 8000a70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a74:	d10e      	bne.n	8000a94 <HAL_GPIO_EXTI_Callback+0x30>
		mode = !mode;            // Toggle the mode variable
 8000a76:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	bf14      	ite	ne
 8000a7e:	2301      	movne	r3, #1
 8000a80:	2300      	moveq	r3, #0
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	f083 0301 	eor.w	r3, r3, #1
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	4b03      	ldr	r3, [pc, #12]	; (8000aa0 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000a92:	701a      	strb	r2, [r3, #0]
	}
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	200000bc 	.word	0x200000bc

08000aa4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
}
 8000aaa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000aac:	e7fe      	b.n	8000aac <Error_Handler+0x8>

08000aae <motor_str_init>:
#define	SECOND_IN_MINUTE			60



void motor_str_init(motor_str *m, TIM_HandleTypeDef *tim)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	b083      	sub	sp, #12
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
 8000ab6:	6039      	str	r1, [r7, #0]
	m->timer = tim;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	683a      	ldr	r2, [r7, #0]
 8000abc:	601a      	str	r2, [r3, #0]
	m->resolution = ENCODER_RESOLUTION * TIMER_CONF_BOTH_EDGE_T1T2 * MOTOR_GEAR;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	f642 22e0 	movw	r2, #10976	; 0x2ae0
 8000ac4:	809a      	strh	r2, [r3, #4]

	m->pulse_count = 0;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
	m->pulse_count_test = 0;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	619a      	str	r2, [r3, #24]
	m->measured_speed = 0;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
	m->set_speed = 0;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]
	m->actual_PWM = 0;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	615a      	str	r2, [r3, #20]
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <motor_calculate_speed>:

void motor_calculate_speed(motor_str *m)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	motor_update_count(m);
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f000 f83a 	bl	8000b72 <motor_update_count>

	m->measured_speed = (m->pulse_count * TIMER_FREQENCY * SECOND_IN_MINUTE) / m->resolution;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000b06:	fb02 f303 	mul.w	r3, r2, r3
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	8892      	ldrh	r2, [r2, #4]
 8000b0e:	fb93 f2f2 	sdiv	r2, r3, r2
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	60da      	str	r2, [r3, #12]

	int output = pid_calculate(&(m->pid_controller), m->set_speed, m->measured_speed);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f103 001c 	add.w	r0, r3, #28
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6919      	ldr	r1, [r3, #16]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	461a      	mov	r2, r3
 8000b26:	f000 f88b 	bl	8000c40 <pid_calculate>
 8000b2a:	60f8      	str	r0, [r7, #12]

	m->actual_PWM += output;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	695a      	ldr	r2, [r3, #20]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	441a      	add	r2, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	615a      	str	r2, [r3, #20]

	if(m->actual_PWM >= 0)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	695b      	ldr	r3, [r3, #20]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	db09      	blt.n	8000b54 <motor_calculate_speed+0x64>
	{
		drv8835_set_motorA_direction(CW);
 8000b40:	2000      	movs	r0, #0
 8000b42:	f7ff fd6d 	bl	8000620 <drv8835_set_motorA_direction>
		drv8835_set_motorA_speed(m->actual_PWM);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	695b      	ldr	r3, [r3, #20]
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff fd85 	bl	800065c <drv8835_set_motorA_speed>
	else
	{
		drv8835_set_motorA_direction(CCW);
		drv8835_set_motorA_speed(-m->actual_PWM);
	}
}
 8000b52:	e00a      	b.n	8000b6a <motor_calculate_speed+0x7a>
		drv8835_set_motorA_direction(CCW);
 8000b54:	2001      	movs	r0, #1
 8000b56:	f7ff fd63 	bl	8000620 <drv8835_set_motorA_direction>
		drv8835_set_motorA_speed(-m->actual_PWM);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	695b      	ldr	r3, [r3, #20]
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	425b      	negs	r3, r3
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fd79 	bl	800065c <drv8835_set_motorA_speed>
}
 8000b6a:	bf00      	nop
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <motor_update_count>:

void motor_update_count(motor_str *m)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b083      	sub	sp, #12
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
	m->pulse_count = (int16_t)__HAL_TIM_GET_COUNTER(m->timer);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b82:	b21b      	sxth	r3, r3
 8000b84:	461a      	mov	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	609a      	str	r2, [r3, #8]
	m->pulse_count_test += m->pulse_count;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	699a      	ldr	r2, [r3, #24]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	441a      	add	r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	619a      	str	r2, [r3, #24]
	__HAL_TIM_SET_COUNTER(m->timer, 0);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <motor_set_speed>:

void motor_set_speed(motor_str *m, int set_speed)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
 8000bb6:	6039      	str	r1, [r7, #0]
	if(set_speed != m->set_speed)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	691b      	ldr	r3, [r3, #16]
 8000bbc:	683a      	ldr	r2, [r7, #0]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d004      	beq.n	8000bcc <motor_set_speed+0x1e>
		pid_reset(&(m->pid_controller));
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	331c      	adds	r3, #28
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 f82a 	bl	8000c20 <pid_reset>

	m->set_speed = set_speed;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	683a      	ldr	r2, [r7, #0]
 8000bd0:	611a      	str	r2, [r3, #16]
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <pid_init>:

#include "main.h"
#include "pid_controller.h"

void pid_init(pid_str *pid_data, float kp_init, float ki_init, float kd_init,
		int anti_windup_limit_init) {
 8000bda:	b480      	push	{r7}
 8000bdc:	b087      	sub	sp, #28
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6178      	str	r0, [r7, #20]
 8000be2:	ed87 0a04 	vstr	s0, [r7, #16]
 8000be6:	edc7 0a03 	vstr	s1, [r7, #12]
 8000bea:	ed87 1a02 	vstr	s2, [r7, #8]
 8000bee:	6079      	str	r1, [r7, #4]
	pid_data->previous_error = 0;
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	605a      	str	r2, [r3, #4]

	pid_data->Kp = kp_init;
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	609a      	str	r2, [r3, #8]
	pid_data->Ki = ki_init;
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	68fa      	ldr	r2, [r7, #12]
 8000c06:	60da      	str	r2, [r3, #12]
	pid_data->Kd = kd_init;
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	611a      	str	r2, [r3, #16]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	687a      	ldr	r2, [r7, #4]
 8000c12:	615a      	str	r2, [r3, #20]
}
 8000c14:	bf00      	nop
 8000c16:	371c      	adds	r7, #28
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <pid_reset>:

void pid_reset(pid_str *pid_data) {
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	pid_data->total_error = 0;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	605a      	str	r2, [r3, #4]
	pid_data->previous_error = 0;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <pid_calculate>:

int pid_calculate(pid_str *pid_data, int setpoint, int process_variable) {
 8000c40:	b480      	push	{r7}
 8000c42:	b089      	sub	sp, #36	; 0x24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
	int error;
	float p_term, i_term, d_term;

	error = setpoint - process_variable;					//obliczenie uchybu
 8000c4c:	68ba      	ldr	r2, [r7, #8]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	61bb      	str	r3, [r7, #24]
	pid_data->total_error += error;							//sumowanie uchybu
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	685a      	ldr	r2, [r3, #4]
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	441a      	add	r2, r3
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	605a      	str	r2, [r3, #4]

	p_term = (float) (pid_data->Kp * error);//odpowiedź członu proporcjonalnego
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	ed93 7a02 	vldr	s14, [r3, #8]
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	ee07 3a90 	vmov	s15, r3
 8000c6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c74:	edc7 7a05 	vstr	s15, [r7, #20]
	i_term = (float) (pid_data->Ki * pid_data->total_error);//odpowiedź członu całkującego
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	ed93 7a03 	vldr	s14, [r3, #12]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	ee07 3a90 	vmov	s15, r3
 8000c86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c8e:	edc7 7a07 	vstr	s15, [r7, #28]
	d_term = (float) (pid_data->Kd * (error - pid_data->previous_error));//odpowiedź członu różniczkującego
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	ed93 7a04 	vldr	s14, [r3, #16]
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	1ad3      	subs	r3, r2, r3
 8000ca0:	ee07 3a90 	vmov	s15, r3
 8000ca4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cac:	edc7 7a04 	vstr	s15, [r7, #16]

	if (i_term >= pid_data->anti_windup_limit)
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	695b      	ldr	r3, [r3, #20]
 8000cb4:	ee07 3a90 	vmov	s15, r3
 8000cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cbc:	ed97 7a07 	vldr	s14, [r7, #28]
 8000cc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cc8:	db08      	blt.n	8000cdc <pid_calculate+0x9c>
		i_term = pid_data->anti_windup_limit;//Anti-Windup - ograniczenie odpowiedzi członu całkującego
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	695b      	ldr	r3, [r3, #20]
 8000cce:	ee07 3a90 	vmov	s15, r3
 8000cd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cd6:	edc7 7a07 	vstr	s15, [r7, #28]
 8000cda:	e016      	b.n	8000d0a <pid_calculate+0xca>
	else if (i_term <= -pid_data->anti_windup_limit)
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	695b      	ldr	r3, [r3, #20]
 8000ce0:	425b      	negs	r3, r3
 8000ce2:	ee07 3a90 	vmov	s15, r3
 8000ce6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cea:	ed97 7a07 	vldr	s14, [r7, #28]
 8000cee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cf6:	d808      	bhi.n	8000d0a <pid_calculate+0xca>
		i_term = -pid_data->anti_windup_limit;
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	695b      	ldr	r3, [r3, #20]
 8000cfc:	425b      	negs	r3, r3
 8000cfe:	ee07 3a90 	vmov	s15, r3
 8000d02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d06:	edc7 7a07 	vstr	s15, [r7, #28]

	pid_data->previous_error = error;//aktualizacja zmiennej z poprzednią wartością błędu
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	601a      	str	r2, [r3, #0]

	return (int) (p_term + i_term + d_term);			//odpowiedź regulatora
 8000d10:	ed97 7a05 	vldr	s14, [r7, #20]
 8000d14:	edd7 7a07 	vldr	s15, [r7, #28]
 8000d18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d28:	ee17 3a90 	vmov	r3, s15
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3724      	adds	r7, #36	; 0x24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	4a0f      	ldr	r2, [pc, #60]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	603b      	str	r3, [r7, #0]
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	4a08      	ldr	r2, [pc, #32]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d68:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d76:	2007      	movs	r0, #7
 8000d78:	f000 fc24 	bl	80015c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40023800 	.word	0x40023800

08000d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d8c:	e7fe      	b.n	8000d8c <NMI_Handler+0x4>

08000d8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <HardFault_Handler+0x4>

08000d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <MemManage_Handler+0x4>

08000d9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <BusFault_Handler+0x4>

08000da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <UsageFault_Handler+0x4>

08000da6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd4:	f000 fb06 	bl	80013e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000de0:	4802      	ldr	r0, [pc, #8]	; (8000dec <USART2_IRQHandler+0x10>)
 8000de2:	f002 fd15 	bl	8003810 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200001d0 	.word	0x200001d0

08000df0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000df4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000df8:	f000 fe66 	bl	8001ac8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e04:	4802      	ldr	r0, [pc, #8]	; (8000e10 <TIM6_DAC_IRQHandler+0x10>)
 8000e06:	f001 ff6b 	bl	8002ce0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000188 	.word	0x20000188

08000e14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e1c:	4a14      	ldr	r2, [pc, #80]	; (8000e70 <_sbrk+0x5c>)
 8000e1e:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <_sbrk+0x60>)
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e28:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <_sbrk+0x64>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d102      	bne.n	8000e36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e30:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <_sbrk+0x64>)
 8000e32:	4a12      	ldr	r2, [pc, #72]	; (8000e7c <_sbrk+0x68>)
 8000e34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <_sbrk+0x64>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d207      	bcs.n	8000e54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e44:	f003 fc4c 	bl	80046e0 <__errno>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	220c      	movs	r2, #12
 8000e4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e52:	e009      	b.n	8000e68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <_sbrk+0x64>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e5a:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <_sbrk+0x64>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	4a05      	ldr	r2, [pc, #20]	; (8000e78 <_sbrk+0x64>)
 8000e64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e66:	68fb      	ldr	r3, [r7, #12]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3718      	adds	r7, #24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20020000 	.word	0x20020000
 8000e74:	00000400 	.word	0x00000400
 8000e78:	200000f4 	.word	0x200000f4
 8000e7c:	20000368 	.word	0x20000368

08000e80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <SystemInit+0x20>)
 8000e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e8a:	4a05      	ldr	r2, [pc, #20]	; (8000ea0 <SystemInit+0x20>)
 8000e8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eaa:	f107 0320 	add.w	r3, r7, #32
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]
 8000ec2:	615a      	str	r2, [r3, #20]
 8000ec4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ec6:	4b22      	ldr	r3, [pc, #136]	; (8000f50 <MX_TIM2_Init+0xac>)
 8000ec8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ecc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4-1;
 8000ece:	4b20      	ldr	r3, [pc, #128]	; (8000f50 <MX_TIM2_Init+0xac>)
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed4:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <MX_TIM2_Init+0xac>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000eda:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <MX_TIM2_Init+0xac>)
 8000edc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ee0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee2:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <MX_TIM2_Init+0xac>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee8:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <MX_TIM2_Init+0xac>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000eee:	4818      	ldr	r0, [pc, #96]	; (8000f50 <MX_TIM2_Init+0xac>)
 8000ef0:	f001 fcaa 	bl	8002848 <HAL_TIM_PWM_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000efa:	f7ff fdd3 	bl	8000aa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efe:	2300      	movs	r3, #0
 8000f00:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f06:	f107 0320 	add.w	r3, r7, #32
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4810      	ldr	r0, [pc, #64]	; (8000f50 <MX_TIM2_Init+0xac>)
 8000f0e:	f002 fb43 	bl	8003598 <HAL_TIMEx_MasterConfigSynchronization>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000f18:	f7ff fdc4 	bl	8000aa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f1c:	2360      	movs	r3, #96	; 0x60
 8000f1e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	2208      	movs	r2, #8
 8000f30:	4619      	mov	r1, r3
 8000f32:	4807      	ldr	r0, [pc, #28]	; (8000f50 <MX_TIM2_Init+0xac>)
 8000f34:	f001 ffc4 	bl	8002ec0 <HAL_TIM_PWM_ConfigChannel>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000f3e:	f7ff fdb1 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f42:	4803      	ldr	r0, [pc, #12]	; (8000f50 <MX_TIM2_Init+0xac>)
 8000f44:	f000 f920 	bl	8001188 <HAL_TIM_MspPostInit>

}
 8000f48:	bf00      	nop
 8000f4a:	3728      	adds	r7, #40	; 0x28
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	200000f8 	.word	0x200000f8

08000f54 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08c      	sub	sp, #48	; 0x30
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f5a:	f107 030c 	add.w	r3, r7, #12
 8000f5e:	2224      	movs	r2, #36	; 0x24
 8000f60:	2100      	movs	r1, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f003 fbb4 	bl	80046d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f70:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <MX_TIM3_Init+0xa0>)
 8000f72:	4a21      	ldr	r2, [pc, #132]	; (8000ff8 <MX_TIM3_Init+0xa4>)
 8000f74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f76:	4b1f      	ldr	r3, [pc, #124]	; (8000ff4 <MX_TIM3_Init+0xa0>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f7c:	4b1d      	ldr	r3, [pc, #116]	; (8000ff4 <MX_TIM3_Init+0xa0>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f82:	4b1c      	ldr	r3, [pc, #112]	; (8000ff4 <MX_TIM3_Init+0xa0>)
 8000f84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f88:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <MX_TIM3_Init+0xa0>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f90:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <MX_TIM3_Init+0xa0>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f96:	2303      	movs	r3, #3
 8000f98:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000fa6:	230f      	movs	r3, #15
 8000fa8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000faa:	2300      	movs	r3, #0
 8000fac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000fb6:	230f      	movs	r3, #15
 8000fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000fba:	f107 030c 	add.w	r3, r7, #12
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	480c      	ldr	r0, [pc, #48]	; (8000ff4 <MX_TIM3_Init+0xa0>)
 8000fc2:	f001 fd59 	bl	8002a78 <HAL_TIM_Encoder_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000fcc:	f7ff fd6a 	bl	8000aa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fd8:	1d3b      	adds	r3, r7, #4
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <MX_TIM3_Init+0xa0>)
 8000fde:	f002 fadb 	bl	8003598 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000fe8:	f7ff fd5c 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000fec:	bf00      	nop
 8000fee:	3730      	adds	r7, #48	; 0x30
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000140 	.word	0x20000140
 8000ff8:	40000400 	.word	0x40000400

08000ffc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001002:	463b      	mov	r3, r7
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <MX_TIM6_Init+0x64>)
 800100c:	4a15      	ldr	r2, [pc, #84]	; (8001064 <MX_TIM6_Init+0x68>)
 800100e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8000-1;
 8001010:	4b13      	ldr	r3, [pc, #76]	; (8001060 <MX_TIM6_Init+0x64>)
 8001012:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001016:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <MX_TIM6_Init+0x64>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <MX_TIM6_Init+0x64>)
 8001020:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001024:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <MX_TIM6_Init+0x64>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800102c:	480c      	ldr	r0, [pc, #48]	; (8001060 <MX_TIM6_Init+0x64>)
 800102e:	f001 fb4b 	bl	80026c8 <HAL_TIM_Base_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001038:	f7ff fd34 	bl	8000aa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800103c:	2300      	movs	r3, #0
 800103e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001040:	2300      	movs	r3, #0
 8001042:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001044:	463b      	mov	r3, r7
 8001046:	4619      	mov	r1, r3
 8001048:	4805      	ldr	r0, [pc, #20]	; (8001060 <MX_TIM6_Init+0x64>)
 800104a:	f002 faa5 	bl	8003598 <HAL_TIMEx_MasterConfigSynchronization>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001054:	f7ff fd26 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000188 	.word	0x20000188
 8001064:	40001000 	.word	0x40001000

08001068 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001078:	d10d      	bne.n	8001096 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	4a08      	ldr	r2, [pc, #32]	; (80010a4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6413      	str	r3, [r2, #64]	; 0x40
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <HAL_TIM_PWM_MspInit+0x3c>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001096:	bf00      	nop
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800

080010a8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a19      	ldr	r2, [pc, #100]	; (800112c <HAL_TIM_Encoder_MspInit+0x84>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d12b      	bne.n	8001122 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	4b18      	ldr	r3, [pc, #96]	; (8001130 <HAL_TIM_Encoder_MspInit+0x88>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	4a17      	ldr	r2, [pc, #92]	; (8001130 <HAL_TIM_Encoder_MspInit+0x88>)
 80010d4:	f043 0302 	orr.w	r3, r3, #2
 80010d8:	6413      	str	r3, [r2, #64]	; 0x40
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <HAL_TIM_Encoder_MspInit+0x88>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <HAL_TIM_Encoder_MspInit+0x88>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a10      	ldr	r2, [pc, #64]	; (8001130 <HAL_TIM_Encoder_MspInit+0x88>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <HAL_TIM_Encoder_MspInit+0x88>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = OUT_A_Pin|OUT_B_Pin;
 8001102:	23c0      	movs	r3, #192	; 0xc0
 8001104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001112:	2302      	movs	r3, #2
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	4805      	ldr	r0, [pc, #20]	; (8001134 <HAL_TIM_Encoder_MspInit+0x8c>)
 800111e:	f000 fb25 	bl	800176c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001122:	bf00      	nop
 8001124:	3728      	adds	r7, #40	; 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40000400 	.word	0x40000400
 8001130:	40023800 	.word	0x40023800
 8001134:	40020000 	.word	0x40020000

08001138 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a0e      	ldr	r2, [pc, #56]	; (8001180 <HAL_TIM_Base_MspInit+0x48>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d115      	bne.n	8001176 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <HAL_TIM_Base_MspInit+0x4c>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	4a0c      	ldr	r2, [pc, #48]	; (8001184 <HAL_TIM_Base_MspInit+0x4c>)
 8001154:	f043 0310 	orr.w	r3, r3, #16
 8001158:	6413      	str	r3, [r2, #64]	; 0x40
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <HAL_TIM_Base_MspInit+0x4c>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	f003 0310 	and.w	r3, r3, #16
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2100      	movs	r1, #0
 800116a:	2036      	movs	r0, #54	; 0x36
 800116c:	f000 fa35 	bl	80015da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001170:	2036      	movs	r0, #54	; 0x36
 8001172:	f000 fa4e 	bl	8001612 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40001000 	.word	0x40001000
 8001184:	40023800 	.word	0x40023800

08001188 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b088      	sub	sp, #32
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011a8:	d11e      	bne.n	80011e8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <HAL_TIM_MspPostInit+0x68>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a0f      	ldr	r2, [pc, #60]	; (80011f0 <HAL_TIM_MspPostInit+0x68>)
 80011b4:	f043 0302 	orr.w	r3, r3, #2
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <HAL_TIM_MspPostInit+0x68>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = AENABLE_Pin;
 80011c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011d8:	2301      	movs	r3, #1
 80011da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AENABLE_GPIO_Port, &GPIO_InitStruct);
 80011dc:	f107 030c 	add.w	r3, r7, #12
 80011e0:	4619      	mov	r1, r3
 80011e2:	4804      	ldr	r0, [pc, #16]	; (80011f4 <HAL_TIM_MspPostInit+0x6c>)
 80011e4:	f000 fac2 	bl	800176c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80011e8:	bf00      	nop
 80011ea:	3720      	adds	r7, #32
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40020400 	.word	0x40020400

080011f8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <MX_USART2_UART_Init+0x4c>)
 80011fe:	4a12      	ldr	r2, [pc, #72]	; (8001248 <MX_USART2_UART_Init+0x50>)
 8001200:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <MX_USART2_UART_Init+0x4c>)
 8001204:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001208:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <MX_USART2_UART_Init+0x4c>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <MX_USART2_UART_Init+0x4c>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <MX_USART2_UART_Init+0x4c>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <MX_USART2_UART_Init+0x4c>)
 800121e:	220c      	movs	r2, #12
 8001220:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <MX_USART2_UART_Init+0x4c>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <MX_USART2_UART_Init+0x4c>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <MX_USART2_UART_Init+0x4c>)
 8001230:	f002 fa42 	bl	80036b8 <HAL_UART_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800123a:	f7ff fc33 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200001d0 	.word	0x200001d0
 8001248:	40004400 	.word	0x40004400

0800124c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a1d      	ldr	r2, [pc, #116]	; (80012e0 <HAL_UART_MspInit+0x94>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d133      	bne.n	80012d6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <HAL_UART_MspInit+0x98>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	4a1b      	ldr	r2, [pc, #108]	; (80012e4 <HAL_UART_MspInit+0x98>)
 8001278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800127c:	6413      	str	r3, [r2, #64]	; 0x40
 800127e:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <HAL_UART_MspInit+0x98>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <HAL_UART_MspInit+0x98>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a14      	ldr	r2, [pc, #80]	; (80012e4 <HAL_UART_MspInit+0x98>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <HAL_UART_MspInit+0x98>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012a6:	230c      	movs	r3, #12
 80012a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012aa:	2302      	movs	r3, #2
 80012ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b2:	2303      	movs	r3, #3
 80012b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012b6:	2307      	movs	r3, #7
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4619      	mov	r1, r3
 80012c0:	4809      	ldr	r0, [pc, #36]	; (80012e8 <HAL_UART_MspInit+0x9c>)
 80012c2:	f000 fa53 	bl	800176c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2100      	movs	r1, #0
 80012ca:	2026      	movs	r0, #38	; 0x26
 80012cc:	f000 f985 	bl	80015da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012d0:	2026      	movs	r0, #38	; 0x26
 80012d2:	f000 f99e 	bl	8001612 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012d6:	bf00      	nop
 80012d8:	3728      	adds	r7, #40	; 0x28
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40004400 	.word	0x40004400
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40020000 	.word	0x40020000

080012ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001324 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80012f0:	f7ff fdc6 	bl	8000e80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012f4:	480c      	ldr	r0, [pc, #48]	; (8001328 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012f6:	490d      	ldr	r1, [pc, #52]	; (800132c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012f8:	4a0d      	ldr	r2, [pc, #52]	; (8001330 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012fc:	e002      	b.n	8001304 <LoopCopyDataInit>

080012fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001302:	3304      	adds	r3, #4

08001304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001308:	d3f9      	bcc.n	80012fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800130a:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800130c:	4c0a      	ldr	r4, [pc, #40]	; (8001338 <LoopFillZerobss+0x22>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001310:	e001      	b.n	8001316 <LoopFillZerobss>

08001312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001314:	3204      	adds	r2, #4

08001316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001318:	d3fb      	bcc.n	8001312 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800131a:	f003 f9e7 	bl	80046ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800131e:	f7ff fa31 	bl	8000784 <main>
  bx  lr    
 8001322:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001324:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800132c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001330:	08005abc 	.word	0x08005abc
  ldr r2, =_sbss
 8001334:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001338:	20000364 	.word	0x20000364

0800133c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800133c:	e7fe      	b.n	800133c <ADC_IRQHandler>
	...

08001340 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001344:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <HAL_Init+0x40>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a0d      	ldr	r2, [pc, #52]	; (8001380 <HAL_Init+0x40>)
 800134a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800134e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001350:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <HAL_Init+0x40>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a0a      	ldr	r2, [pc, #40]	; (8001380 <HAL_Init+0x40>)
 8001356:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800135a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800135c:	4b08      	ldr	r3, [pc, #32]	; (8001380 <HAL_Init+0x40>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a07      	ldr	r2, [pc, #28]	; (8001380 <HAL_Init+0x40>)
 8001362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001366:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001368:	2003      	movs	r0, #3
 800136a:	f000 f92b 	bl	80015c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800136e:	2000      	movs	r0, #0
 8001370:	f000 f808 	bl	8001384 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001374:	f7ff fce0 	bl	8000d38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40023c00 	.word	0x40023c00

08001384 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_InitTick+0x54>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_InitTick+0x58>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	4619      	mov	r1, r3
 8001396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139a:	fbb3 f3f1 	udiv	r3, r3, r1
 800139e:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 f943 	bl	800162e <HAL_SYSTICK_Config>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e00e      	b.n	80013d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b0f      	cmp	r3, #15
 80013b6:	d80a      	bhi.n	80013ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b8:	2200      	movs	r2, #0
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	f04f 30ff 	mov.w	r0, #4294967295
 80013c0:	f000 f90b 	bl	80015da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013c4:	4a06      	ldr	r2, [pc, #24]	; (80013e0 <HAL_InitTick+0x5c>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ca:	2300      	movs	r3, #0
 80013cc:	e000      	b.n	80013d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000008 	.word	0x20000008
 80013dc:	20000010 	.word	0x20000010
 80013e0:	2000000c 	.word	0x2000000c

080013e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_IncTick+0x20>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_IncTick+0x24>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4413      	add	r3, r2
 80013f4:	4a04      	ldr	r2, [pc, #16]	; (8001408 <HAL_IncTick+0x24>)
 80013f6:	6013      	str	r3, [r2, #0]
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000010 	.word	0x20000010
 8001408:	20000218 	.word	0x20000218

0800140c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return uwTick;
 8001410:	4b03      	ldr	r3, [pc, #12]	; (8001420 <HAL_GetTick+0x14>)
 8001412:	681b      	ldr	r3, [r3, #0]
}
 8001414:	4618      	mov	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	20000218 	.word	0x20000218

08001424 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <__NVIC_SetPriorityGrouping+0x44>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800143a:	68ba      	ldr	r2, [r7, #8]
 800143c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001440:	4013      	ands	r3, r2
 8001442:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800144c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001454:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001456:	4a04      	ldr	r2, [pc, #16]	; (8001468 <__NVIC_SetPriorityGrouping+0x44>)
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	60d3      	str	r3, [r2, #12]
}
 800145c:	bf00      	nop
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001470:	4b04      	ldr	r3, [pc, #16]	; (8001484 <__NVIC_GetPriorityGrouping+0x18>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	0a1b      	lsrs	r3, r3, #8
 8001476:	f003 0307 	and.w	r3, r3, #7
}
 800147a:	4618      	mov	r0, r3
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	2b00      	cmp	r3, #0
 8001498:	db0b      	blt.n	80014b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	f003 021f 	and.w	r2, r3, #31
 80014a0:	4907      	ldr	r1, [pc, #28]	; (80014c0 <__NVIC_EnableIRQ+0x38>)
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	095b      	lsrs	r3, r3, #5
 80014a8:	2001      	movs	r0, #1
 80014aa:	fa00 f202 	lsl.w	r2, r0, r2
 80014ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000e100 	.word	0xe000e100

080014c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	6039      	str	r1, [r7, #0]
 80014ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	db0a      	blt.n	80014ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	490c      	ldr	r1, [pc, #48]	; (8001510 <__NVIC_SetPriority+0x4c>)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	0112      	lsls	r2, r2, #4
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	440b      	add	r3, r1
 80014e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014ec:	e00a      	b.n	8001504 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	4908      	ldr	r1, [pc, #32]	; (8001514 <__NVIC_SetPriority+0x50>)
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	3b04      	subs	r3, #4
 80014fc:	0112      	lsls	r2, r2, #4
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	440b      	add	r3, r1
 8001502:	761a      	strb	r2, [r3, #24]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000e100 	.word	0xe000e100
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001518:	b480      	push	{r7}
 800151a:	b089      	sub	sp, #36	; 0x24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f1c3 0307 	rsb	r3, r3, #7
 8001532:	2b04      	cmp	r3, #4
 8001534:	bf28      	it	cs
 8001536:	2304      	movcs	r3, #4
 8001538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3304      	adds	r3, #4
 800153e:	2b06      	cmp	r3, #6
 8001540:	d902      	bls.n	8001548 <NVIC_EncodePriority+0x30>
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3b03      	subs	r3, #3
 8001546:	e000      	b.n	800154a <NVIC_EncodePriority+0x32>
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800154c:	f04f 32ff 	mov.w	r2, #4294967295
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43da      	mvns	r2, r3
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	401a      	ands	r2, r3
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001560:	f04f 31ff 	mov.w	r1, #4294967295
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	fa01 f303 	lsl.w	r3, r1, r3
 800156a:	43d9      	mvns	r1, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001570:	4313      	orrs	r3, r2
         );
}
 8001572:	4618      	mov	r0, r3
 8001574:	3724      	adds	r7, #36	; 0x24
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
	...

08001580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3b01      	subs	r3, #1
 800158c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001590:	d301      	bcc.n	8001596 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001592:	2301      	movs	r3, #1
 8001594:	e00f      	b.n	80015b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001596:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <SysTick_Config+0x40>)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3b01      	subs	r3, #1
 800159c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800159e:	210f      	movs	r1, #15
 80015a0:	f04f 30ff 	mov.w	r0, #4294967295
 80015a4:	f7ff ff8e 	bl	80014c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <SysTick_Config+0x40>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ae:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <SysTick_Config+0x40>)
 80015b0:	2207      	movs	r2, #7
 80015b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	e000e010 	.word	0xe000e010

080015c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff ff29 	bl	8001424 <__NVIC_SetPriorityGrouping>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015da:	b580      	push	{r7, lr}
 80015dc:	b086      	sub	sp, #24
 80015de:	af00      	add	r7, sp, #0
 80015e0:	4603      	mov	r3, r0
 80015e2:	60b9      	str	r1, [r7, #8]
 80015e4:	607a      	str	r2, [r7, #4]
 80015e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015ec:	f7ff ff3e 	bl	800146c <__NVIC_GetPriorityGrouping>
 80015f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	68b9      	ldr	r1, [r7, #8]
 80015f6:	6978      	ldr	r0, [r7, #20]
 80015f8:	f7ff ff8e 	bl	8001518 <NVIC_EncodePriority>
 80015fc:	4602      	mov	r2, r0
 80015fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001602:	4611      	mov	r1, r2
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff5d 	bl	80014c4 <__NVIC_SetPriority>
}
 800160a:	bf00      	nop
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	4603      	mov	r3, r0
 800161a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800161c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ff31 	bl	8001488 <__NVIC_EnableIRQ>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff ffa2 	bl	8001580 <SysTick_Config>
 800163c:	4603      	mov	r3, r0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b084      	sub	sp, #16
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001652:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001654:	f7ff feda 	bl	800140c <HAL_GetTick>
 8001658:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d008      	beq.n	8001678 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2280      	movs	r2, #128	; 0x80
 800166a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e052      	b.n	800171e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f022 0216 	bic.w	r2, r2, #22
 8001686:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	695a      	ldr	r2, [r3, #20]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001696:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	2b00      	cmp	r3, #0
 800169e:	d103      	bne.n	80016a8 <HAL_DMA_Abort+0x62>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d007      	beq.n	80016b8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f022 0208 	bic.w	r2, r2, #8
 80016b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 0201 	bic.w	r2, r2, #1
 80016c6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016c8:	e013      	b.n	80016f2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016ca:	f7ff fe9f 	bl	800140c <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b05      	cmp	r3, #5
 80016d6:	d90c      	bls.n	80016f2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2220      	movs	r2, #32
 80016dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2203      	movs	r2, #3
 80016e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e015      	b.n	800171e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1e4      	bne.n	80016ca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001704:	223f      	movs	r2, #63	; 0x3f
 8001706:	409a      	lsls	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d004      	beq.n	8001744 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2280      	movs	r2, #128	; 0x80
 800173e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e00c      	b.n	800175e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2205      	movs	r2, #5
 8001748:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 0201 	bic.w	r2, r2, #1
 800175a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
	...

0800176c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800176c:	b480      	push	{r7}
 800176e:	b089      	sub	sp, #36	; 0x24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800177e:	2300      	movs	r3, #0
 8001780:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
 8001786:	e165      	b.n	8001a54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001788:	2201      	movs	r2, #1
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	4013      	ands	r3, r2
 800179a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	f040 8154 	bne.w	8001a4e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d005      	beq.n	80017be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d130      	bne.n	8001820 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	2203      	movs	r2, #3
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43db      	mvns	r3, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4013      	ands	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	68da      	ldr	r2, [r3, #12]
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017f4:	2201      	movs	r2, #1
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	091b      	lsrs	r3, r3, #4
 800180a:	f003 0201 	and.w	r2, r3, #1
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 0303 	and.w	r3, r3, #3
 8001828:	2b03      	cmp	r3, #3
 800182a:	d017      	beq.n	800185c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	2203      	movs	r2, #3
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4013      	ands	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 0303 	and.w	r3, r3, #3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d123      	bne.n	80018b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	08da      	lsrs	r2, r3, #3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3208      	adds	r2, #8
 8001870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001874:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	f003 0307 	and.w	r3, r3, #7
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	220f      	movs	r2, #15
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	691a      	ldr	r2, [r3, #16]
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4313      	orrs	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	08da      	lsrs	r2, r3, #3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	3208      	adds	r2, #8
 80018aa:	69b9      	ldr	r1, [r7, #24]
 80018ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	2203      	movs	r2, #3
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4013      	ands	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 0203 	and.w	r2, r3, #3
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 80ae 	beq.w	8001a4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	4b5d      	ldr	r3, [pc, #372]	; (8001a6c <HAL_GPIO_Init+0x300>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	4a5c      	ldr	r2, [pc, #368]	; (8001a6c <HAL_GPIO_Init+0x300>)
 80018fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001900:	6453      	str	r3, [r2, #68]	; 0x44
 8001902:	4b5a      	ldr	r3, [pc, #360]	; (8001a6c <HAL_GPIO_Init+0x300>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800190e:	4a58      	ldr	r2, [pc, #352]	; (8001a70 <HAL_GPIO_Init+0x304>)
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	089b      	lsrs	r3, r3, #2
 8001914:	3302      	adds	r3, #2
 8001916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800191a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f003 0303 	and.w	r3, r3, #3
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	220f      	movs	r2, #15
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43db      	mvns	r3, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4013      	ands	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a4f      	ldr	r2, [pc, #316]	; (8001a74 <HAL_GPIO_Init+0x308>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d025      	beq.n	8001986 <HAL_GPIO_Init+0x21a>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a4e      	ldr	r2, [pc, #312]	; (8001a78 <HAL_GPIO_Init+0x30c>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d01f      	beq.n	8001982 <HAL_GPIO_Init+0x216>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a4d      	ldr	r2, [pc, #308]	; (8001a7c <HAL_GPIO_Init+0x310>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d019      	beq.n	800197e <HAL_GPIO_Init+0x212>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a4c      	ldr	r2, [pc, #304]	; (8001a80 <HAL_GPIO_Init+0x314>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d013      	beq.n	800197a <HAL_GPIO_Init+0x20e>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a4b      	ldr	r2, [pc, #300]	; (8001a84 <HAL_GPIO_Init+0x318>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d00d      	beq.n	8001976 <HAL_GPIO_Init+0x20a>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a4a      	ldr	r2, [pc, #296]	; (8001a88 <HAL_GPIO_Init+0x31c>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d007      	beq.n	8001972 <HAL_GPIO_Init+0x206>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a49      	ldr	r2, [pc, #292]	; (8001a8c <HAL_GPIO_Init+0x320>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d101      	bne.n	800196e <HAL_GPIO_Init+0x202>
 800196a:	2306      	movs	r3, #6
 800196c:	e00c      	b.n	8001988 <HAL_GPIO_Init+0x21c>
 800196e:	2307      	movs	r3, #7
 8001970:	e00a      	b.n	8001988 <HAL_GPIO_Init+0x21c>
 8001972:	2305      	movs	r3, #5
 8001974:	e008      	b.n	8001988 <HAL_GPIO_Init+0x21c>
 8001976:	2304      	movs	r3, #4
 8001978:	e006      	b.n	8001988 <HAL_GPIO_Init+0x21c>
 800197a:	2303      	movs	r3, #3
 800197c:	e004      	b.n	8001988 <HAL_GPIO_Init+0x21c>
 800197e:	2302      	movs	r3, #2
 8001980:	e002      	b.n	8001988 <HAL_GPIO_Init+0x21c>
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <HAL_GPIO_Init+0x21c>
 8001986:	2300      	movs	r3, #0
 8001988:	69fa      	ldr	r2, [r7, #28]
 800198a:	f002 0203 	and.w	r2, r2, #3
 800198e:	0092      	lsls	r2, r2, #2
 8001990:	4093      	lsls	r3, r2
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4313      	orrs	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001998:	4935      	ldr	r1, [pc, #212]	; (8001a70 <HAL_GPIO_Init+0x304>)
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	089b      	lsrs	r3, r3, #2
 800199e:	3302      	adds	r3, #2
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019a6:	4b3a      	ldr	r3, [pc, #232]	; (8001a90 <HAL_GPIO_Init+0x324>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	43db      	mvns	r3, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4013      	ands	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019ca:	4a31      	ldr	r2, [pc, #196]	; (8001a90 <HAL_GPIO_Init+0x324>)
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019d0:	4b2f      	ldr	r3, [pc, #188]	; (8001a90 <HAL_GPIO_Init+0x324>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	43db      	mvns	r3, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019f4:	4a26      	ldr	r2, [pc, #152]	; (8001a90 <HAL_GPIO_Init+0x324>)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019fa:	4b25      	ldr	r3, [pc, #148]	; (8001a90 <HAL_GPIO_Init+0x324>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4013      	ands	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a1e:	4a1c      	ldr	r2, [pc, #112]	; (8001a90 <HAL_GPIO_Init+0x324>)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a24:	4b1a      	ldr	r3, [pc, #104]	; (8001a90 <HAL_GPIO_Init+0x324>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a48:	4a11      	ldr	r2, [pc, #68]	; (8001a90 <HAL_GPIO_Init+0x324>)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3301      	adds	r3, #1
 8001a52:	61fb      	str	r3, [r7, #28]
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	2b0f      	cmp	r3, #15
 8001a58:	f67f ae96 	bls.w	8001788 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a5c:	bf00      	nop
 8001a5e:	bf00      	nop
 8001a60:	3724      	adds	r7, #36	; 0x24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40013800 	.word	0x40013800
 8001a74:	40020000 	.word	0x40020000
 8001a78:	40020400 	.word	0x40020400
 8001a7c:	40020800 	.word	0x40020800
 8001a80:	40020c00 	.word	0x40020c00
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40021400 	.word	0x40021400
 8001a8c:	40021800 	.word	0x40021800
 8001a90:	40013c00 	.word	0x40013c00

08001a94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	807b      	strh	r3, [r7, #2]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001aa4:	787b      	ldrb	r3, [r7, #1]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aaa:	887a      	ldrh	r2, [r7, #2]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ab0:	e003      	b.n	8001aba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ab2:	887b      	ldrh	r3, [r7, #2]
 8001ab4:	041a      	lsls	r2, r3, #16
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	619a      	str	r2, [r3, #24]
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
	...

08001ac8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ad2:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ad4:	695a      	ldr	r2, [r3, #20]
 8001ad6:	88fb      	ldrh	r3, [r7, #6]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d006      	beq.n	8001aec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ade:	4a05      	ldr	r2, [pc, #20]	; (8001af4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ae0:	88fb      	ldrh	r3, [r7, #6]
 8001ae2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ae4:	88fb      	ldrh	r3, [r7, #6]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe ffbc 	bl	8000a64 <HAL_GPIO_EXTI_Callback>
  }
}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40013c00 	.word	0x40013c00

08001af8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e0cc      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b0c:	4b68      	ldr	r3, [pc, #416]	; (8001cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 030f 	and.w	r3, r3, #15
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d90c      	bls.n	8001b34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1a:	4b65      	ldr	r3, [pc, #404]	; (8001cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b22:	4b63      	ldr	r3, [pc, #396]	; (8001cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d001      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e0b8      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d020      	beq.n	8001b82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d005      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b4c:	4b59      	ldr	r3, [pc, #356]	; (8001cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	4a58      	ldr	r2, [pc, #352]	; (8001cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0308 	and.w	r3, r3, #8
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d005      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b64:	4b53      	ldr	r3, [pc, #332]	; (8001cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	4a52      	ldr	r2, [pc, #328]	; (8001cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b70:	4b50      	ldr	r3, [pc, #320]	; (8001cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	494d      	ldr	r1, [pc, #308]	; (8001cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d044      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d107      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b96:	4b47      	ldr	r3, [pc, #284]	; (8001cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d119      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e07f      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d003      	beq.n	8001bb6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bb2:	2b03      	cmp	r3, #3
 8001bb4:	d107      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bb6:	4b3f      	ldr	r3, [pc, #252]	; (8001cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d109      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e06f      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc6:	4b3b      	ldr	r3, [pc, #236]	; (8001cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e067      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bd6:	4b37      	ldr	r3, [pc, #220]	; (8001cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f023 0203 	bic.w	r2, r3, #3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	4934      	ldr	r1, [pc, #208]	; (8001cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001be8:	f7ff fc10 	bl	800140c <HAL_GetTick>
 8001bec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bee:	e00a      	b.n	8001c06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf0:	f7ff fc0c 	bl	800140c <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e04f      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c06:	4b2b      	ldr	r3, [pc, #172]	; (8001cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 020c 	and.w	r2, r3, #12
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d1eb      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c18:	4b25      	ldr	r3, [pc, #148]	; (8001cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 030f 	and.w	r3, r3, #15
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d20c      	bcs.n	8001c40 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c26:	4b22      	ldr	r3, [pc, #136]	; (8001cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2e:	4b20      	ldr	r3, [pc, #128]	; (8001cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d001      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e032      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d008      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c4c:	4b19      	ldr	r3, [pc, #100]	; (8001cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	4916      	ldr	r1, [pc, #88]	; (8001cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0308 	and.w	r3, r3, #8
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d009      	beq.n	8001c7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c6a:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	490e      	ldr	r1, [pc, #56]	; (8001cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c7e:	f000 f855 	bl	8001d2c <HAL_RCC_GetSysClockFreq>
 8001c82:	4602      	mov	r2, r0
 8001c84:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	091b      	lsrs	r3, r3, #4
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	490a      	ldr	r1, [pc, #40]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c90:	5ccb      	ldrb	r3, [r1, r3]
 8001c92:	fa22 f303 	lsr.w	r3, r2, r3
 8001c96:	4a09      	ldr	r2, [pc, #36]	; (8001cbc <HAL_RCC_ClockConfig+0x1c4>)
 8001c98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001c9a:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff fb70 	bl	8001384 <HAL_InitTick>

  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40023c00 	.word	0x40023c00
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	08005944 	.word	0x08005944
 8001cbc:	20000008 	.word	0x20000008
 8001cc0:	2000000c 	.word	0x2000000c

08001cc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cc8:	4b03      	ldr	r3, [pc, #12]	; (8001cd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cca:	681b      	ldr	r3, [r3, #0]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	20000008 	.word	0x20000008

08001cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ce0:	f7ff fff0 	bl	8001cc4 <HAL_RCC_GetHCLKFreq>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	0a9b      	lsrs	r3, r3, #10
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	4903      	ldr	r1, [pc, #12]	; (8001d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cf2:	5ccb      	ldrb	r3, [r1, r3]
 8001cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	08005954 	.word	0x08005954

08001d04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d08:	f7ff ffdc 	bl	8001cc4 <HAL_RCC_GetHCLKFreq>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	0b5b      	lsrs	r3, r3, #13
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	4903      	ldr	r1, [pc, #12]	; (8001d28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d1a:	5ccb      	ldrb	r3, [r1, r3]
 8001d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40023800 	.word	0x40023800
 8001d28:	08005954 	.word	0x08005954

08001d2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d30:	b0ae      	sub	sp, #184	; 0xb8
 8001d32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001d46:	2300      	movs	r3, #0
 8001d48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d52:	4bcb      	ldr	r3, [pc, #812]	; (8002080 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 030c 	and.w	r3, r3, #12
 8001d5a:	2b0c      	cmp	r3, #12
 8001d5c:	f200 8206 	bhi.w	800216c <HAL_RCC_GetSysClockFreq+0x440>
 8001d60:	a201      	add	r2, pc, #4	; (adr r2, 8001d68 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d66:	bf00      	nop
 8001d68:	08001d9d 	.word	0x08001d9d
 8001d6c:	0800216d 	.word	0x0800216d
 8001d70:	0800216d 	.word	0x0800216d
 8001d74:	0800216d 	.word	0x0800216d
 8001d78:	08001da5 	.word	0x08001da5
 8001d7c:	0800216d 	.word	0x0800216d
 8001d80:	0800216d 	.word	0x0800216d
 8001d84:	0800216d 	.word	0x0800216d
 8001d88:	08001dad 	.word	0x08001dad
 8001d8c:	0800216d 	.word	0x0800216d
 8001d90:	0800216d 	.word	0x0800216d
 8001d94:	0800216d 	.word	0x0800216d
 8001d98:	08001f9d 	.word	0x08001f9d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d9c:	4bb9      	ldr	r3, [pc, #740]	; (8002084 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001da2:	e1e7      	b.n	8002174 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001da4:	4bb8      	ldr	r3, [pc, #736]	; (8002088 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001da6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001daa:	e1e3      	b.n	8002174 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dac:	4bb4      	ldr	r3, [pc, #720]	; (8002080 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001db4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001db8:	4bb1      	ldr	r3, [pc, #708]	; (8002080 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d071      	beq.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dc4:	4bae      	ldr	r3, [pc, #696]	; (8002080 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	099b      	lsrs	r3, r3, #6
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001dd0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001dd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ddc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001de0:	2300      	movs	r3, #0
 8001de2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001de6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001dea:	4622      	mov	r2, r4
 8001dec:	462b      	mov	r3, r5
 8001dee:	f04f 0000 	mov.w	r0, #0
 8001df2:	f04f 0100 	mov.w	r1, #0
 8001df6:	0159      	lsls	r1, r3, #5
 8001df8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dfc:	0150      	lsls	r0, r2, #5
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	4621      	mov	r1, r4
 8001e04:	1a51      	subs	r1, r2, r1
 8001e06:	6439      	str	r1, [r7, #64]	; 0x40
 8001e08:	4629      	mov	r1, r5
 8001e0a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e0e:	647b      	str	r3, [r7, #68]	; 0x44
 8001e10:	f04f 0200 	mov.w	r2, #0
 8001e14:	f04f 0300 	mov.w	r3, #0
 8001e18:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001e1c:	4649      	mov	r1, r9
 8001e1e:	018b      	lsls	r3, r1, #6
 8001e20:	4641      	mov	r1, r8
 8001e22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e26:	4641      	mov	r1, r8
 8001e28:	018a      	lsls	r2, r1, #6
 8001e2a:	4641      	mov	r1, r8
 8001e2c:	1a51      	subs	r1, r2, r1
 8001e2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001e30:	4649      	mov	r1, r9
 8001e32:	eb63 0301 	sbc.w	r3, r3, r1
 8001e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e38:	f04f 0200 	mov.w	r2, #0
 8001e3c:	f04f 0300 	mov.w	r3, #0
 8001e40:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001e44:	4649      	mov	r1, r9
 8001e46:	00cb      	lsls	r3, r1, #3
 8001e48:	4641      	mov	r1, r8
 8001e4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e4e:	4641      	mov	r1, r8
 8001e50:	00ca      	lsls	r2, r1, #3
 8001e52:	4610      	mov	r0, r2
 8001e54:	4619      	mov	r1, r3
 8001e56:	4603      	mov	r3, r0
 8001e58:	4622      	mov	r2, r4
 8001e5a:	189b      	adds	r3, r3, r2
 8001e5c:	633b      	str	r3, [r7, #48]	; 0x30
 8001e5e:	462b      	mov	r3, r5
 8001e60:	460a      	mov	r2, r1
 8001e62:	eb42 0303 	adc.w	r3, r2, r3
 8001e66:	637b      	str	r3, [r7, #52]	; 0x34
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	f04f 0300 	mov.w	r3, #0
 8001e70:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e74:	4629      	mov	r1, r5
 8001e76:	024b      	lsls	r3, r1, #9
 8001e78:	4621      	mov	r1, r4
 8001e7a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e7e:	4621      	mov	r1, r4
 8001e80:	024a      	lsls	r2, r1, #9
 8001e82:	4610      	mov	r0, r2
 8001e84:	4619      	mov	r1, r3
 8001e86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001e90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001e94:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001e98:	f7fe fa12 	bl	80002c0 <__aeabi_uldivmod>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001ea6:	e067      	b.n	8001f78 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ea8:	4b75      	ldr	r3, [pc, #468]	; (8002080 <HAL_RCC_GetSysClockFreq+0x354>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	099b      	lsrs	r3, r3, #6
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001eb4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001eb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ec0:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001ec6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001eca:	4622      	mov	r2, r4
 8001ecc:	462b      	mov	r3, r5
 8001ece:	f04f 0000 	mov.w	r0, #0
 8001ed2:	f04f 0100 	mov.w	r1, #0
 8001ed6:	0159      	lsls	r1, r3, #5
 8001ed8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001edc:	0150      	lsls	r0, r2, #5
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4621      	mov	r1, r4
 8001ee4:	1a51      	subs	r1, r2, r1
 8001ee6:	62b9      	str	r1, [r7, #40]	; 0x28
 8001ee8:	4629      	mov	r1, r5
 8001eea:	eb63 0301 	sbc.w	r3, r3, r1
 8001eee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ef0:	f04f 0200 	mov.w	r2, #0
 8001ef4:	f04f 0300 	mov.w	r3, #0
 8001ef8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001efc:	4649      	mov	r1, r9
 8001efe:	018b      	lsls	r3, r1, #6
 8001f00:	4641      	mov	r1, r8
 8001f02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f06:	4641      	mov	r1, r8
 8001f08:	018a      	lsls	r2, r1, #6
 8001f0a:	4641      	mov	r1, r8
 8001f0c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f10:	4649      	mov	r1, r9
 8001f12:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f16:	f04f 0200 	mov.w	r2, #0
 8001f1a:	f04f 0300 	mov.w	r3, #0
 8001f1e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001f22:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001f26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f2a:	4692      	mov	sl, r2
 8001f2c:	469b      	mov	fp, r3
 8001f2e:	4623      	mov	r3, r4
 8001f30:	eb1a 0303 	adds.w	r3, sl, r3
 8001f34:	623b      	str	r3, [r7, #32]
 8001f36:	462b      	mov	r3, r5
 8001f38:	eb4b 0303 	adc.w	r3, fp, r3
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	f04f 0300 	mov.w	r3, #0
 8001f46:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001f4a:	4629      	mov	r1, r5
 8001f4c:	028b      	lsls	r3, r1, #10
 8001f4e:	4621      	mov	r1, r4
 8001f50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f54:	4621      	mov	r1, r4
 8001f56:	028a      	lsls	r2, r1, #10
 8001f58:	4610      	mov	r0, r2
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f60:	2200      	movs	r2, #0
 8001f62:	673b      	str	r3, [r7, #112]	; 0x70
 8001f64:	677a      	str	r2, [r7, #116]	; 0x74
 8001f66:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001f6a:	f7fe f9a9 	bl	80002c0 <__aeabi_uldivmod>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	4613      	mov	r3, r2
 8001f74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001f78:	4b41      	ldr	r3, [pc, #260]	; (8002080 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	0c1b      	lsrs	r3, r3, #16
 8001f7e:	f003 0303 	and.w	r3, r3, #3
 8001f82:	3301      	adds	r3, #1
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco / pllp;
 8001f8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001f8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001f9a:	e0eb      	b.n	8002174 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f9c:	4b38      	ldr	r3, [pc, #224]	; (8002080 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fa4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fa8:	4b35      	ldr	r3, [pc, #212]	; (8002080 <HAL_RCC_GetSysClockFreq+0x354>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d06b      	beq.n	800208c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fb4:	4b32      	ldr	r3, [pc, #200]	; (8002080 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	099b      	lsrs	r3, r3, #6
 8001fba:	2200      	movs	r2, #0
 8001fbc:	66bb      	str	r3, [r7, #104]	; 0x68
 8001fbe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001fc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fc6:	663b      	str	r3, [r7, #96]	; 0x60
 8001fc8:	2300      	movs	r3, #0
 8001fca:	667b      	str	r3, [r7, #100]	; 0x64
 8001fcc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001fd0:	4622      	mov	r2, r4
 8001fd2:	462b      	mov	r3, r5
 8001fd4:	f04f 0000 	mov.w	r0, #0
 8001fd8:	f04f 0100 	mov.w	r1, #0
 8001fdc:	0159      	lsls	r1, r3, #5
 8001fde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fe2:	0150      	lsls	r0, r2, #5
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4621      	mov	r1, r4
 8001fea:	1a51      	subs	r1, r2, r1
 8001fec:	61b9      	str	r1, [r7, #24]
 8001fee:	4629      	mov	r1, r5
 8001ff0:	eb63 0301 	sbc.w	r3, r3, r1
 8001ff4:	61fb      	str	r3, [r7, #28]
 8001ff6:	f04f 0200 	mov.w	r2, #0
 8001ffa:	f04f 0300 	mov.w	r3, #0
 8001ffe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002002:	4659      	mov	r1, fp
 8002004:	018b      	lsls	r3, r1, #6
 8002006:	4651      	mov	r1, sl
 8002008:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800200c:	4651      	mov	r1, sl
 800200e:	018a      	lsls	r2, r1, #6
 8002010:	4651      	mov	r1, sl
 8002012:	ebb2 0801 	subs.w	r8, r2, r1
 8002016:	4659      	mov	r1, fp
 8002018:	eb63 0901 	sbc.w	r9, r3, r1
 800201c:	f04f 0200 	mov.w	r2, #0
 8002020:	f04f 0300 	mov.w	r3, #0
 8002024:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002028:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800202c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002030:	4690      	mov	r8, r2
 8002032:	4699      	mov	r9, r3
 8002034:	4623      	mov	r3, r4
 8002036:	eb18 0303 	adds.w	r3, r8, r3
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	462b      	mov	r3, r5
 800203e:	eb49 0303 	adc.w	r3, r9, r3
 8002042:	617b      	str	r3, [r7, #20]
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	f04f 0300 	mov.w	r3, #0
 800204c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002050:	4629      	mov	r1, r5
 8002052:	024b      	lsls	r3, r1, #9
 8002054:	4621      	mov	r1, r4
 8002056:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800205a:	4621      	mov	r1, r4
 800205c:	024a      	lsls	r2, r1, #9
 800205e:	4610      	mov	r0, r2
 8002060:	4619      	mov	r1, r3
 8002062:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002066:	2200      	movs	r2, #0
 8002068:	65bb      	str	r3, [r7, #88]	; 0x58
 800206a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800206c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002070:	f7fe f926 	bl	80002c0 <__aeabi_uldivmod>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	4613      	mov	r3, r2
 800207a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800207e:	e065      	b.n	800214c <HAL_RCC_GetSysClockFreq+0x420>
 8002080:	40023800 	.word	0x40023800
 8002084:	00f42400 	.word	0x00f42400
 8002088:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800208c:	4b3d      	ldr	r3, [pc, #244]	; (8002184 <HAL_RCC_GetSysClockFreq+0x458>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	099b      	lsrs	r3, r3, #6
 8002092:	2200      	movs	r2, #0
 8002094:	4618      	mov	r0, r3
 8002096:	4611      	mov	r1, r2
 8002098:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800209c:	653b      	str	r3, [r7, #80]	; 0x50
 800209e:	2300      	movs	r3, #0
 80020a0:	657b      	str	r3, [r7, #84]	; 0x54
 80020a2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80020a6:	4642      	mov	r2, r8
 80020a8:	464b      	mov	r3, r9
 80020aa:	f04f 0000 	mov.w	r0, #0
 80020ae:	f04f 0100 	mov.w	r1, #0
 80020b2:	0159      	lsls	r1, r3, #5
 80020b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020b8:	0150      	lsls	r0, r2, #5
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4641      	mov	r1, r8
 80020c0:	1a51      	subs	r1, r2, r1
 80020c2:	60b9      	str	r1, [r7, #8]
 80020c4:	4649      	mov	r1, r9
 80020c6:	eb63 0301 	sbc.w	r3, r3, r1
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	f04f 0200 	mov.w	r2, #0
 80020d0:	f04f 0300 	mov.w	r3, #0
 80020d4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80020d8:	4659      	mov	r1, fp
 80020da:	018b      	lsls	r3, r1, #6
 80020dc:	4651      	mov	r1, sl
 80020de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020e2:	4651      	mov	r1, sl
 80020e4:	018a      	lsls	r2, r1, #6
 80020e6:	4651      	mov	r1, sl
 80020e8:	1a54      	subs	r4, r2, r1
 80020ea:	4659      	mov	r1, fp
 80020ec:	eb63 0501 	sbc.w	r5, r3, r1
 80020f0:	f04f 0200 	mov.w	r2, #0
 80020f4:	f04f 0300 	mov.w	r3, #0
 80020f8:	00eb      	lsls	r3, r5, #3
 80020fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020fe:	00e2      	lsls	r2, r4, #3
 8002100:	4614      	mov	r4, r2
 8002102:	461d      	mov	r5, r3
 8002104:	4643      	mov	r3, r8
 8002106:	18e3      	adds	r3, r4, r3
 8002108:	603b      	str	r3, [r7, #0]
 800210a:	464b      	mov	r3, r9
 800210c:	eb45 0303 	adc.w	r3, r5, r3
 8002110:	607b      	str	r3, [r7, #4]
 8002112:	f04f 0200 	mov.w	r2, #0
 8002116:	f04f 0300 	mov.w	r3, #0
 800211a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800211e:	4629      	mov	r1, r5
 8002120:	028b      	lsls	r3, r1, #10
 8002122:	4621      	mov	r1, r4
 8002124:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002128:	4621      	mov	r1, r4
 800212a:	028a      	lsls	r2, r1, #10
 800212c:	4610      	mov	r0, r2
 800212e:	4619      	mov	r1, r3
 8002130:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002134:	2200      	movs	r2, #0
 8002136:	64bb      	str	r3, [r7, #72]	; 0x48
 8002138:	64fa      	str	r2, [r7, #76]	; 0x4c
 800213a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800213e:	f7fe f8bf 	bl	80002c0 <__aeabi_uldivmod>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4613      	mov	r3, r2
 8002148:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800214c:	4b0d      	ldr	r3, [pc, #52]	; (8002184 <HAL_RCC_GetSysClockFreq+0x458>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	0f1b      	lsrs	r3, r3, #28
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco / pllr;
 800215a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800215e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002162:	fbb2 f3f3 	udiv	r3, r2, r3
 8002166:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800216a:	e003      	b.n	8002174 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800216c:	4b06      	ldr	r3, [pc, #24]	; (8002188 <HAL_RCC_GetSysClockFreq+0x45c>)
 800216e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002172:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002174:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002178:	4618      	mov	r0, r3
 800217a:	37b8      	adds	r7, #184	; 0xb8
 800217c:	46bd      	mov	sp, r7
 800217e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002182:	bf00      	nop
 8002184:	40023800 	.word	0x40023800
 8002188:	00f42400 	.word	0x00f42400

0800218c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e28d      	b.n	80026ba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 8083 	beq.w	80022b2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80021ac:	4b94      	ldr	r3, [pc, #592]	; (8002400 <HAL_RCC_OscConfig+0x274>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 030c 	and.w	r3, r3, #12
 80021b4:	2b04      	cmp	r3, #4
 80021b6:	d019      	beq.n	80021ec <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80021b8:	4b91      	ldr	r3, [pc, #580]	; (8002400 <HAL_RCC_OscConfig+0x274>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 030c 	and.w	r3, r3, #12
        || \
 80021c0:	2b08      	cmp	r3, #8
 80021c2:	d106      	bne.n	80021d2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80021c4:	4b8e      	ldr	r3, [pc, #568]	; (8002400 <HAL_RCC_OscConfig+0x274>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021d0:	d00c      	beq.n	80021ec <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021d2:	4b8b      	ldr	r3, [pc, #556]	; (8002400 <HAL_RCC_OscConfig+0x274>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80021da:	2b0c      	cmp	r3, #12
 80021dc:	d112      	bne.n	8002204 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021de:	4b88      	ldr	r3, [pc, #544]	; (8002400 <HAL_RCC_OscConfig+0x274>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021ea:	d10b      	bne.n	8002204 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ec:	4b84      	ldr	r3, [pc, #528]	; (8002400 <HAL_RCC_OscConfig+0x274>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d05b      	beq.n	80022b0 <HAL_RCC_OscConfig+0x124>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d157      	bne.n	80022b0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e25a      	b.n	80026ba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800220c:	d106      	bne.n	800221c <HAL_RCC_OscConfig+0x90>
 800220e:	4b7c      	ldr	r3, [pc, #496]	; (8002400 <HAL_RCC_OscConfig+0x274>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a7b      	ldr	r2, [pc, #492]	; (8002400 <HAL_RCC_OscConfig+0x274>)
 8002214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	e01d      	b.n	8002258 <HAL_RCC_OscConfig+0xcc>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002224:	d10c      	bne.n	8002240 <HAL_RCC_OscConfig+0xb4>
 8002226:	4b76      	ldr	r3, [pc, #472]	; (8002400 <HAL_RCC_OscConfig+0x274>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a75      	ldr	r2, [pc, #468]	; (8002400 <HAL_RCC_OscConfig+0x274>)
 800222c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	4b73      	ldr	r3, [pc, #460]	; (8002400 <HAL_RCC_OscConfig+0x274>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a72      	ldr	r2, [pc, #456]	; (8002400 <HAL_RCC_OscConfig+0x274>)
 8002238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	e00b      	b.n	8002258 <HAL_RCC_OscConfig+0xcc>
 8002240:	4b6f      	ldr	r3, [pc, #444]	; (8002400 <HAL_RCC_OscConfig+0x274>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a6e      	ldr	r2, [pc, #440]	; (8002400 <HAL_RCC_OscConfig+0x274>)
 8002246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800224a:	6013      	str	r3, [r2, #0]
 800224c:	4b6c      	ldr	r3, [pc, #432]	; (8002400 <HAL_RCC_OscConfig+0x274>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a6b      	ldr	r2, [pc, #428]	; (8002400 <HAL_RCC_OscConfig+0x274>)
 8002252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002256:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d013      	beq.n	8002288 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002260:	f7ff f8d4 	bl	800140c <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002268:	f7ff f8d0 	bl	800140c <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b64      	cmp	r3, #100	; 0x64
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e21f      	b.n	80026ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227a:	4b61      	ldr	r3, [pc, #388]	; (8002400 <HAL_RCC_OscConfig+0x274>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0f0      	beq.n	8002268 <HAL_RCC_OscConfig+0xdc>
 8002286:	e014      	b.n	80022b2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002288:	f7ff f8c0 	bl	800140c <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002290:	f7ff f8bc 	bl	800140c <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b64      	cmp	r3, #100	; 0x64
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e20b      	b.n	80026ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022a2:	4b57      	ldr	r3, [pc, #348]	; (8002400 <HAL_RCC_OscConfig+0x274>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0x104>
 80022ae:	e000      	b.n	80022b2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d06f      	beq.n	800239e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80022be:	4b50      	ldr	r3, [pc, #320]	; (8002400 <HAL_RCC_OscConfig+0x274>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 030c 	and.w	r3, r3, #12
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d017      	beq.n	80022fa <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80022ca:	4b4d      	ldr	r3, [pc, #308]	; (8002400 <HAL_RCC_OscConfig+0x274>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 030c 	and.w	r3, r3, #12
        || \
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d105      	bne.n	80022e2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80022d6:	4b4a      	ldr	r3, [pc, #296]	; (8002400 <HAL_RCC_OscConfig+0x274>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00b      	beq.n	80022fa <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022e2:	4b47      	ldr	r3, [pc, #284]	; (8002400 <HAL_RCC_OscConfig+0x274>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80022ea:	2b0c      	cmp	r3, #12
 80022ec:	d11c      	bne.n	8002328 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ee:	4b44      	ldr	r3, [pc, #272]	; (8002400 <HAL_RCC_OscConfig+0x274>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d116      	bne.n	8002328 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022fa:	4b41      	ldr	r3, [pc, #260]	; (8002400 <HAL_RCC_OscConfig+0x274>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d005      	beq.n	8002312 <HAL_RCC_OscConfig+0x186>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d001      	beq.n	8002312 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e1d3      	b.n	80026ba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002312:	4b3b      	ldr	r3, [pc, #236]	; (8002400 <HAL_RCC_OscConfig+0x274>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	4937      	ldr	r1, [pc, #220]	; (8002400 <HAL_RCC_OscConfig+0x274>)
 8002322:	4313      	orrs	r3, r2
 8002324:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002326:	e03a      	b.n	800239e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d020      	beq.n	8002372 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002330:	4b34      	ldr	r3, [pc, #208]	; (8002404 <HAL_RCC_OscConfig+0x278>)
 8002332:	2201      	movs	r2, #1
 8002334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002336:	f7ff f869 	bl	800140c <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800233e:	f7ff f865 	bl	800140c <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e1b4      	b.n	80026ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002350:	4b2b      	ldr	r3, [pc, #172]	; (8002400 <HAL_RCC_OscConfig+0x274>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0f0      	beq.n	800233e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800235c:	4b28      	ldr	r3, [pc, #160]	; (8002400 <HAL_RCC_OscConfig+0x274>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4925      	ldr	r1, [pc, #148]	; (8002400 <HAL_RCC_OscConfig+0x274>)
 800236c:	4313      	orrs	r3, r2
 800236e:	600b      	str	r3, [r1, #0]
 8002370:	e015      	b.n	800239e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002372:	4b24      	ldr	r3, [pc, #144]	; (8002404 <HAL_RCC_OscConfig+0x278>)
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002378:	f7ff f848 	bl	800140c <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002380:	f7ff f844 	bl	800140c <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e193      	b.n	80026ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002392:	4b1b      	ldr	r3, [pc, #108]	; (8002400 <HAL_RCC_OscConfig+0x274>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f0      	bne.n	8002380 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d036      	beq.n	8002418 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d016      	beq.n	80023e0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023b2:	4b15      	ldr	r3, [pc, #84]	; (8002408 <HAL_RCC_OscConfig+0x27c>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b8:	f7ff f828 	bl	800140c <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023c0:	f7ff f824 	bl	800140c <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e173      	b.n	80026ba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023d2:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <HAL_RCC_OscConfig+0x274>)
 80023d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <HAL_RCC_OscConfig+0x234>
 80023de:	e01b      	b.n	8002418 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023e0:	4b09      	ldr	r3, [pc, #36]	; (8002408 <HAL_RCC_OscConfig+0x27c>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e6:	f7ff f811 	bl	800140c <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ec:	e00e      	b.n	800240c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ee:	f7ff f80d 	bl	800140c <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d907      	bls.n	800240c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e15c      	b.n	80026ba <HAL_RCC_OscConfig+0x52e>
 8002400:	40023800 	.word	0x40023800
 8002404:	42470000 	.word	0x42470000
 8002408:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800240c:	4b8a      	ldr	r3, [pc, #552]	; (8002638 <HAL_RCC_OscConfig+0x4ac>)
 800240e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1ea      	bne.n	80023ee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 8097 	beq.w	8002554 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002426:	2300      	movs	r3, #0
 8002428:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800242a:	4b83      	ldr	r3, [pc, #524]	; (8002638 <HAL_RCC_OscConfig+0x4ac>)
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10f      	bne.n	8002456 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	4b7f      	ldr	r3, [pc, #508]	; (8002638 <HAL_RCC_OscConfig+0x4ac>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	4a7e      	ldr	r2, [pc, #504]	; (8002638 <HAL_RCC_OscConfig+0x4ac>)
 8002440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002444:	6413      	str	r3, [r2, #64]	; 0x40
 8002446:	4b7c      	ldr	r3, [pc, #496]	; (8002638 <HAL_RCC_OscConfig+0x4ac>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002452:	2301      	movs	r3, #1
 8002454:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002456:	4b79      	ldr	r3, [pc, #484]	; (800263c <HAL_RCC_OscConfig+0x4b0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245e:	2b00      	cmp	r3, #0
 8002460:	d118      	bne.n	8002494 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002462:	4b76      	ldr	r3, [pc, #472]	; (800263c <HAL_RCC_OscConfig+0x4b0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a75      	ldr	r2, [pc, #468]	; (800263c <HAL_RCC_OscConfig+0x4b0>)
 8002468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800246e:	f7fe ffcd 	bl	800140c <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002476:	f7fe ffc9 	bl	800140c <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e118      	b.n	80026ba <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002488:	4b6c      	ldr	r3, [pc, #432]	; (800263c <HAL_RCC_OscConfig+0x4b0>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0f0      	beq.n	8002476 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d106      	bne.n	80024aa <HAL_RCC_OscConfig+0x31e>
 800249c:	4b66      	ldr	r3, [pc, #408]	; (8002638 <HAL_RCC_OscConfig+0x4ac>)
 800249e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a0:	4a65      	ldr	r2, [pc, #404]	; (8002638 <HAL_RCC_OscConfig+0x4ac>)
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	6713      	str	r3, [r2, #112]	; 0x70
 80024a8:	e01c      	b.n	80024e4 <HAL_RCC_OscConfig+0x358>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	2b05      	cmp	r3, #5
 80024b0:	d10c      	bne.n	80024cc <HAL_RCC_OscConfig+0x340>
 80024b2:	4b61      	ldr	r3, [pc, #388]	; (8002638 <HAL_RCC_OscConfig+0x4ac>)
 80024b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b6:	4a60      	ldr	r2, [pc, #384]	; (8002638 <HAL_RCC_OscConfig+0x4ac>)
 80024b8:	f043 0304 	orr.w	r3, r3, #4
 80024bc:	6713      	str	r3, [r2, #112]	; 0x70
 80024be:	4b5e      	ldr	r3, [pc, #376]	; (8002638 <HAL_RCC_OscConfig+0x4ac>)
 80024c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c2:	4a5d      	ldr	r2, [pc, #372]	; (8002638 <HAL_RCC_OscConfig+0x4ac>)
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	6713      	str	r3, [r2, #112]	; 0x70
 80024ca:	e00b      	b.n	80024e4 <HAL_RCC_OscConfig+0x358>
 80024cc:	4b5a      	ldr	r3, [pc, #360]	; (8002638 <HAL_RCC_OscConfig+0x4ac>)
 80024ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d0:	4a59      	ldr	r2, [pc, #356]	; (8002638 <HAL_RCC_OscConfig+0x4ac>)
 80024d2:	f023 0301 	bic.w	r3, r3, #1
 80024d6:	6713      	str	r3, [r2, #112]	; 0x70
 80024d8:	4b57      	ldr	r3, [pc, #348]	; (8002638 <HAL_RCC_OscConfig+0x4ac>)
 80024da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024dc:	4a56      	ldr	r2, [pc, #344]	; (8002638 <HAL_RCC_OscConfig+0x4ac>)
 80024de:	f023 0304 	bic.w	r3, r3, #4
 80024e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d015      	beq.n	8002518 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ec:	f7fe ff8e 	bl	800140c <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f2:	e00a      	b.n	800250a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f4:	f7fe ff8a 	bl	800140c <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002502:	4293      	cmp	r3, r2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e0d7      	b.n	80026ba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800250a:	4b4b      	ldr	r3, [pc, #300]	; (8002638 <HAL_RCC_OscConfig+0x4ac>)
 800250c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0ee      	beq.n	80024f4 <HAL_RCC_OscConfig+0x368>
 8002516:	e014      	b.n	8002542 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002518:	f7fe ff78 	bl	800140c <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800251e:	e00a      	b.n	8002536 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002520:	f7fe ff74 	bl	800140c <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	f241 3288 	movw	r2, #5000	; 0x1388
 800252e:	4293      	cmp	r3, r2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e0c1      	b.n	80026ba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002536:	4b40      	ldr	r3, [pc, #256]	; (8002638 <HAL_RCC_OscConfig+0x4ac>)
 8002538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1ee      	bne.n	8002520 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002542:	7dfb      	ldrb	r3, [r7, #23]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d105      	bne.n	8002554 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002548:	4b3b      	ldr	r3, [pc, #236]	; (8002638 <HAL_RCC_OscConfig+0x4ac>)
 800254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254c:	4a3a      	ldr	r2, [pc, #232]	; (8002638 <HAL_RCC_OscConfig+0x4ac>)
 800254e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002552:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 80ad 	beq.w	80026b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800255e:	4b36      	ldr	r3, [pc, #216]	; (8002638 <HAL_RCC_OscConfig+0x4ac>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	2b08      	cmp	r3, #8
 8002568:	d060      	beq.n	800262c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	2b02      	cmp	r3, #2
 8002570:	d145      	bne.n	80025fe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002572:	4b33      	ldr	r3, [pc, #204]	; (8002640 <HAL_RCC_OscConfig+0x4b4>)
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002578:	f7fe ff48 	bl	800140c <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002580:	f7fe ff44 	bl	800140c <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e093      	b.n	80026ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002592:	4b29      	ldr	r3, [pc, #164]	; (8002638 <HAL_RCC_OscConfig+0x4ac>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69da      	ldr	r2, [r3, #28]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	019b      	lsls	r3, r3, #6
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b4:	085b      	lsrs	r3, r3, #1
 80025b6:	3b01      	subs	r3, #1
 80025b8:	041b      	lsls	r3, r3, #16
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c0:	061b      	lsls	r3, r3, #24
 80025c2:	431a      	orrs	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c8:	071b      	lsls	r3, r3, #28
 80025ca:	491b      	ldr	r1, [pc, #108]	; (8002638 <HAL_RCC_OscConfig+0x4ac>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025d0:	4b1b      	ldr	r3, [pc, #108]	; (8002640 <HAL_RCC_OscConfig+0x4b4>)
 80025d2:	2201      	movs	r2, #1
 80025d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d6:	f7fe ff19 	bl	800140c <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025de:	f7fe ff15 	bl	800140c <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e064      	b.n	80026ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f0:	4b11      	ldr	r3, [pc, #68]	; (8002638 <HAL_RCC_OscConfig+0x4ac>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d0f0      	beq.n	80025de <HAL_RCC_OscConfig+0x452>
 80025fc:	e05c      	b.n	80026b8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025fe:	4b10      	ldr	r3, [pc, #64]	; (8002640 <HAL_RCC_OscConfig+0x4b4>)
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002604:	f7fe ff02 	bl	800140c <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800260c:	f7fe fefe 	bl	800140c <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e04d      	b.n	80026ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800261e:	4b06      	ldr	r3, [pc, #24]	; (8002638 <HAL_RCC_OscConfig+0x4ac>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1f0      	bne.n	800260c <HAL_RCC_OscConfig+0x480>
 800262a:	e045      	b.n	80026b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d107      	bne.n	8002644 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e040      	b.n	80026ba <HAL_RCC_OscConfig+0x52e>
 8002638:	40023800 	.word	0x40023800
 800263c:	40007000 	.word	0x40007000
 8002640:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002644:	4b1f      	ldr	r3, [pc, #124]	; (80026c4 <HAL_RCC_OscConfig+0x538>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d030      	beq.n	80026b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800265c:	429a      	cmp	r2, r3
 800265e:	d129      	bne.n	80026b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800266a:	429a      	cmp	r2, r3
 800266c:	d122      	bne.n	80026b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002674:	4013      	ands	r3, r2
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800267a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800267c:	4293      	cmp	r3, r2
 800267e:	d119      	bne.n	80026b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268a:	085b      	lsrs	r3, r3, #1
 800268c:	3b01      	subs	r3, #1
 800268e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002690:	429a      	cmp	r2, r3
 8002692:	d10f      	bne.n	80026b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d107      	bne.n	80026b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d001      	beq.n	80026b8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e000      	b.n	80026ba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40023800 	.word	0x40023800

080026c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e041      	b.n	800275e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d106      	bne.n	80026f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7fe fd22 	bl	8001138 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2202      	movs	r2, #2
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3304      	adds	r3, #4
 8002704:	4619      	mov	r1, r3
 8002706:	4610      	mov	r0, r2
 8002708:	f000 fcc4 	bl	8003094 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b01      	cmp	r3, #1
 800277a:	d001      	beq.n	8002780 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e04e      	b.n	800281e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2202      	movs	r2, #2
 8002784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0201 	orr.w	r2, r2, #1
 8002796:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a23      	ldr	r2, [pc, #140]	; (800282c <HAL_TIM_Base_Start_IT+0xc4>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d022      	beq.n	80027e8 <HAL_TIM_Base_Start_IT+0x80>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027aa:	d01d      	beq.n	80027e8 <HAL_TIM_Base_Start_IT+0x80>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a1f      	ldr	r2, [pc, #124]	; (8002830 <HAL_TIM_Base_Start_IT+0xc8>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d018      	beq.n	80027e8 <HAL_TIM_Base_Start_IT+0x80>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a1e      	ldr	r2, [pc, #120]	; (8002834 <HAL_TIM_Base_Start_IT+0xcc>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d013      	beq.n	80027e8 <HAL_TIM_Base_Start_IT+0x80>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a1c      	ldr	r2, [pc, #112]	; (8002838 <HAL_TIM_Base_Start_IT+0xd0>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d00e      	beq.n	80027e8 <HAL_TIM_Base_Start_IT+0x80>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a1b      	ldr	r2, [pc, #108]	; (800283c <HAL_TIM_Base_Start_IT+0xd4>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d009      	beq.n	80027e8 <HAL_TIM_Base_Start_IT+0x80>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a19      	ldr	r2, [pc, #100]	; (8002840 <HAL_TIM_Base_Start_IT+0xd8>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d004      	beq.n	80027e8 <HAL_TIM_Base_Start_IT+0x80>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a18      	ldr	r2, [pc, #96]	; (8002844 <HAL_TIM_Base_Start_IT+0xdc>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d111      	bne.n	800280c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2b06      	cmp	r3, #6
 80027f8:	d010      	beq.n	800281c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f042 0201 	orr.w	r2, r2, #1
 8002808:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800280a:	e007      	b.n	800281c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0201 	orr.w	r2, r2, #1
 800281a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40010000 	.word	0x40010000
 8002830:	40000400 	.word	0x40000400
 8002834:	40000800 	.word	0x40000800
 8002838:	40000c00 	.word	0x40000c00
 800283c:	40010400 	.word	0x40010400
 8002840:	40014000 	.word	0x40014000
 8002844:	40001800 	.word	0x40001800

08002848 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e041      	b.n	80028de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d106      	bne.n	8002874 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7fe fbfa 	bl	8001068 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2202      	movs	r2, #2
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3304      	adds	r3, #4
 8002884:	4619      	mov	r1, r3
 8002886:	4610      	mov	r0, r2
 8002888:	f000 fc04 	bl	8003094 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d109      	bne.n	800290c <HAL_TIM_PWM_Start+0x24>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b01      	cmp	r3, #1
 8002902:	bf14      	ite	ne
 8002904:	2301      	movne	r3, #1
 8002906:	2300      	moveq	r3, #0
 8002908:	b2db      	uxtb	r3, r3
 800290a:	e022      	b.n	8002952 <HAL_TIM_PWM_Start+0x6a>
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	2b04      	cmp	r3, #4
 8002910:	d109      	bne.n	8002926 <HAL_TIM_PWM_Start+0x3e>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b01      	cmp	r3, #1
 800291c:	bf14      	ite	ne
 800291e:	2301      	movne	r3, #1
 8002920:	2300      	moveq	r3, #0
 8002922:	b2db      	uxtb	r3, r3
 8002924:	e015      	b.n	8002952 <HAL_TIM_PWM_Start+0x6a>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2b08      	cmp	r3, #8
 800292a:	d109      	bne.n	8002940 <HAL_TIM_PWM_Start+0x58>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b01      	cmp	r3, #1
 8002936:	bf14      	ite	ne
 8002938:	2301      	movne	r3, #1
 800293a:	2300      	moveq	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	e008      	b.n	8002952 <HAL_TIM_PWM_Start+0x6a>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b01      	cmp	r3, #1
 800294a:	bf14      	ite	ne
 800294c:	2301      	movne	r3, #1
 800294e:	2300      	moveq	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e07c      	b.n	8002a54 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d104      	bne.n	800296a <HAL_TIM_PWM_Start+0x82>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2202      	movs	r2, #2
 8002964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002968:	e013      	b.n	8002992 <HAL_TIM_PWM_Start+0xaa>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	2b04      	cmp	r3, #4
 800296e:	d104      	bne.n	800297a <HAL_TIM_PWM_Start+0x92>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2202      	movs	r2, #2
 8002974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002978:	e00b      	b.n	8002992 <HAL_TIM_PWM_Start+0xaa>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	2b08      	cmp	r3, #8
 800297e:	d104      	bne.n	800298a <HAL_TIM_PWM_Start+0xa2>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2202      	movs	r2, #2
 8002984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002988:	e003      	b.n	8002992 <HAL_TIM_PWM_Start+0xaa>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2202      	movs	r2, #2
 800298e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2201      	movs	r2, #1
 8002998:	6839      	ldr	r1, [r7, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f000 fdd6 	bl	800354c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a2d      	ldr	r2, [pc, #180]	; (8002a5c <HAL_TIM_PWM_Start+0x174>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d004      	beq.n	80029b4 <HAL_TIM_PWM_Start+0xcc>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a2c      	ldr	r2, [pc, #176]	; (8002a60 <HAL_TIM_PWM_Start+0x178>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d101      	bne.n	80029b8 <HAL_TIM_PWM_Start+0xd0>
 80029b4:	2301      	movs	r3, #1
 80029b6:	e000      	b.n	80029ba <HAL_TIM_PWM_Start+0xd2>
 80029b8:	2300      	movs	r3, #0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d007      	beq.n	80029ce <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a22      	ldr	r2, [pc, #136]	; (8002a5c <HAL_TIM_PWM_Start+0x174>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d022      	beq.n	8002a1e <HAL_TIM_PWM_Start+0x136>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e0:	d01d      	beq.n	8002a1e <HAL_TIM_PWM_Start+0x136>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a1f      	ldr	r2, [pc, #124]	; (8002a64 <HAL_TIM_PWM_Start+0x17c>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d018      	beq.n	8002a1e <HAL_TIM_PWM_Start+0x136>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a1d      	ldr	r2, [pc, #116]	; (8002a68 <HAL_TIM_PWM_Start+0x180>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d013      	beq.n	8002a1e <HAL_TIM_PWM_Start+0x136>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a1c      	ldr	r2, [pc, #112]	; (8002a6c <HAL_TIM_PWM_Start+0x184>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d00e      	beq.n	8002a1e <HAL_TIM_PWM_Start+0x136>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a16      	ldr	r2, [pc, #88]	; (8002a60 <HAL_TIM_PWM_Start+0x178>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d009      	beq.n	8002a1e <HAL_TIM_PWM_Start+0x136>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a18      	ldr	r2, [pc, #96]	; (8002a70 <HAL_TIM_PWM_Start+0x188>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d004      	beq.n	8002a1e <HAL_TIM_PWM_Start+0x136>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a16      	ldr	r2, [pc, #88]	; (8002a74 <HAL_TIM_PWM_Start+0x18c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d111      	bne.n	8002a42 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2b06      	cmp	r3, #6
 8002a2e:	d010      	beq.n	8002a52 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 0201 	orr.w	r2, r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a40:	e007      	b.n	8002a52 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f042 0201 	orr.w	r2, r2, #1
 8002a50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40010000 	.word	0x40010000
 8002a60:	40010400 	.word	0x40010400
 8002a64:	40000400 	.word	0x40000400
 8002a68:	40000800 	.word	0x40000800
 8002a6c:	40000c00 	.word	0x40000c00
 8002a70:	40014000 	.word	0x40014000
 8002a74:	40001800 	.word	0x40001800

08002a78 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e097      	b.n	8002bbc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d106      	bne.n	8002aa6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7fe fb01 	bl	80010a8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6812      	ldr	r2, [r2, #0]
 8002ab8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002abc:	f023 0307 	bic.w	r3, r3, #7
 8002ac0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	3304      	adds	r3, #4
 8002aca:	4619      	mov	r1, r3
 8002acc:	4610      	mov	r0, r2
 8002ace:	f000 fae1 	bl	8003094 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002afa:	f023 0303 	bic.w	r3, r3, #3
 8002afe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	021b      	lsls	r3, r3, #8
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002b18:	f023 030c 	bic.w	r3, r3, #12
 8002b1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	021b      	lsls	r3, r3, #8
 8002b34:	4313      	orrs	r3, r2
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	011a      	lsls	r2, r3, #4
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	031b      	lsls	r3, r3, #12
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002b56:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002b5e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	011b      	lsls	r3, r3, #4
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3718      	adds	r7, #24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bd4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002bdc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002be4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002bec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d110      	bne.n	8002c16 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d102      	bne.n	8002c00 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002bfa:	7b7b      	ldrb	r3, [r7, #13]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d001      	beq.n	8002c04 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e069      	b.n	8002cd8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2202      	movs	r2, #2
 8002c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c14:	e031      	b.n	8002c7a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d110      	bne.n	8002c3e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c1c:	7bbb      	ldrb	r3, [r7, #14]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d102      	bne.n	8002c28 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c22:	7b3b      	ldrb	r3, [r7, #12]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d001      	beq.n	8002c2c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e055      	b.n	8002cd8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2202      	movs	r2, #2
 8002c30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2202      	movs	r2, #2
 8002c38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c3c:	e01d      	b.n	8002c7a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c3e:	7bfb      	ldrb	r3, [r7, #15]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d108      	bne.n	8002c56 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c44:	7bbb      	ldrb	r3, [r7, #14]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d105      	bne.n	8002c56 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c4a:	7b7b      	ldrb	r3, [r7, #13]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d102      	bne.n	8002c56 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c50:	7b3b      	ldrb	r3, [r7, #12]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d001      	beq.n	8002c5a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e03e      	b.n	8002cd8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2202      	movs	r2, #2
 8002c66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2202      	movs	r2, #2
 8002c76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <HAL_TIM_Encoder_Start+0xc4>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d008      	beq.n	8002c98 <HAL_TIM_Encoder_Start+0xd4>
 8002c86:	e00f      	b.n	8002ca8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	2100      	movs	r1, #0
 8002c90:	4618      	mov	r0, r3
 8002c92:	f000 fc5b 	bl	800354c <TIM_CCxChannelCmd>
      break;
 8002c96:	e016      	b.n	8002cc6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	2104      	movs	r1, #4
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f000 fc53 	bl	800354c <TIM_CCxChannelCmd>
      break;
 8002ca6:	e00e      	b.n	8002cc6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2201      	movs	r2, #1
 8002cae:	2100      	movs	r1, #0
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 fc4b 	bl	800354c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	2104      	movs	r1, #4
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 fc44 	bl	800354c <TIM_CCxChannelCmd>
      break;
 8002cc4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f042 0201 	orr.w	r2, r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d020      	beq.n	8002d44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d01b      	beq.n	8002d44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f06f 0202 	mvn.w	r2, #2
 8002d14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f994 	bl	8003058 <HAL_TIM_IC_CaptureCallback>
 8002d30:	e005      	b.n	8002d3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f986 	bl	8003044 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 f997 	bl	800306c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	f003 0304 	and.w	r3, r3, #4
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d020      	beq.n	8002d90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d01b      	beq.n	8002d90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f06f 0204 	mvn.w	r2, #4
 8002d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2202      	movs	r2, #2
 8002d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f96e 	bl	8003058 <HAL_TIM_IC_CaptureCallback>
 8002d7c:	e005      	b.n	8002d8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f960 	bl	8003044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 f971 	bl	800306c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d020      	beq.n	8002ddc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f003 0308 	and.w	r3, r3, #8
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d01b      	beq.n	8002ddc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f06f 0208 	mvn.w	r2, #8
 8002dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2204      	movs	r2, #4
 8002db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	f003 0303 	and.w	r3, r3, #3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f948 	bl	8003058 <HAL_TIM_IC_CaptureCallback>
 8002dc8:	e005      	b.n	8002dd6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f93a 	bl	8003044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f94b 	bl	800306c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	f003 0310 	and.w	r3, r3, #16
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d020      	beq.n	8002e28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f003 0310 	and.w	r3, r3, #16
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d01b      	beq.n	8002e28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f06f 0210 	mvn.w	r2, #16
 8002df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2208      	movs	r2, #8
 8002dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f922 	bl	8003058 <HAL_TIM_IC_CaptureCallback>
 8002e14:	e005      	b.n	8002e22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f914 	bl	8003044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 f925 	bl	800306c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00c      	beq.n	8002e4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d007      	beq.n	8002e4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f06f 0201 	mvn.w	r2, #1
 8002e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7fd fdac 	bl	80009a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00c      	beq.n	8002e70 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d007      	beq.n	8002e70 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 fc1a 	bl	80036a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00c      	beq.n	8002e94 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d007      	beq.n	8002e94 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 f8f6 	bl	8003080 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	f003 0320 	and.w	r3, r3, #32
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00c      	beq.n	8002eb8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f003 0320 	and.w	r3, r3, #32
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d007      	beq.n	8002eb8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f06f 0220 	mvn.w	r2, #32
 8002eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 fbec 	bl	8003690 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002eb8:	bf00      	nop
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d101      	bne.n	8002ede <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002eda:	2302      	movs	r3, #2
 8002edc:	e0ae      	b.n	800303c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b0c      	cmp	r3, #12
 8002eea:	f200 809f 	bhi.w	800302c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002eee:	a201      	add	r2, pc, #4	; (adr r2, 8002ef4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef4:	08002f29 	.word	0x08002f29
 8002ef8:	0800302d 	.word	0x0800302d
 8002efc:	0800302d 	.word	0x0800302d
 8002f00:	0800302d 	.word	0x0800302d
 8002f04:	08002f69 	.word	0x08002f69
 8002f08:	0800302d 	.word	0x0800302d
 8002f0c:	0800302d 	.word	0x0800302d
 8002f10:	0800302d 	.word	0x0800302d
 8002f14:	08002fab 	.word	0x08002fab
 8002f18:	0800302d 	.word	0x0800302d
 8002f1c:	0800302d 	.word	0x0800302d
 8002f20:	0800302d 	.word	0x0800302d
 8002f24:	08002feb 	.word	0x08002feb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68b9      	ldr	r1, [r7, #8]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 f95c 	bl	80031ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699a      	ldr	r2, [r3, #24]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0208 	orr.w	r2, r2, #8
 8002f42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	699a      	ldr	r2, [r3, #24]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0204 	bic.w	r2, r2, #4
 8002f52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6999      	ldr	r1, [r3, #24]
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	691a      	ldr	r2, [r3, #16]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	619a      	str	r2, [r3, #24]
      break;
 8002f66:	e064      	b.n	8003032 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68b9      	ldr	r1, [r7, #8]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 f9ac 	bl	80032cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699a      	ldr	r2, [r3, #24]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	699a      	ldr	r2, [r3, #24]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6999      	ldr	r1, [r3, #24]
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	021a      	lsls	r2, r3, #8
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	619a      	str	r2, [r3, #24]
      break;
 8002fa8:	e043      	b.n	8003032 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68b9      	ldr	r1, [r7, #8]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 fa01 	bl	80033b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	69da      	ldr	r2, [r3, #28]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f042 0208 	orr.w	r2, r2, #8
 8002fc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	69da      	ldr	r2, [r3, #28]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 0204 	bic.w	r2, r2, #4
 8002fd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	69d9      	ldr	r1, [r3, #28]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	691a      	ldr	r2, [r3, #16]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	61da      	str	r2, [r3, #28]
      break;
 8002fe8:	e023      	b.n	8003032 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68b9      	ldr	r1, [r7, #8]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f000 fa55 	bl	80034a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	69da      	ldr	r2, [r3, #28]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003004:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	69da      	ldr	r2, [r3, #28]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003014:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	69d9      	ldr	r1, [r3, #28]
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	021a      	lsls	r2, r3, #8
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	61da      	str	r2, [r3, #28]
      break;
 800302a:	e002      	b.n	8003032 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	75fb      	strb	r3, [r7, #23]
      break;
 8003030:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800303a:	7dfb      	ldrb	r3, [r7, #23]
}
 800303c:	4618      	mov	r0, r3
 800303e:	3718      	adds	r7, #24
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a46      	ldr	r2, [pc, #280]	; (80031c0 <TIM_Base_SetConfig+0x12c>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d013      	beq.n	80030d4 <TIM_Base_SetConfig+0x40>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b2:	d00f      	beq.n	80030d4 <TIM_Base_SetConfig+0x40>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a43      	ldr	r2, [pc, #268]	; (80031c4 <TIM_Base_SetConfig+0x130>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d00b      	beq.n	80030d4 <TIM_Base_SetConfig+0x40>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a42      	ldr	r2, [pc, #264]	; (80031c8 <TIM_Base_SetConfig+0x134>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d007      	beq.n	80030d4 <TIM_Base_SetConfig+0x40>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a41      	ldr	r2, [pc, #260]	; (80031cc <TIM_Base_SetConfig+0x138>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d003      	beq.n	80030d4 <TIM_Base_SetConfig+0x40>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a40      	ldr	r2, [pc, #256]	; (80031d0 <TIM_Base_SetConfig+0x13c>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d108      	bne.n	80030e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a35      	ldr	r2, [pc, #212]	; (80031c0 <TIM_Base_SetConfig+0x12c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d02b      	beq.n	8003146 <TIM_Base_SetConfig+0xb2>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f4:	d027      	beq.n	8003146 <TIM_Base_SetConfig+0xb2>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a32      	ldr	r2, [pc, #200]	; (80031c4 <TIM_Base_SetConfig+0x130>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d023      	beq.n	8003146 <TIM_Base_SetConfig+0xb2>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a31      	ldr	r2, [pc, #196]	; (80031c8 <TIM_Base_SetConfig+0x134>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d01f      	beq.n	8003146 <TIM_Base_SetConfig+0xb2>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a30      	ldr	r2, [pc, #192]	; (80031cc <TIM_Base_SetConfig+0x138>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d01b      	beq.n	8003146 <TIM_Base_SetConfig+0xb2>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a2f      	ldr	r2, [pc, #188]	; (80031d0 <TIM_Base_SetConfig+0x13c>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d017      	beq.n	8003146 <TIM_Base_SetConfig+0xb2>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a2e      	ldr	r2, [pc, #184]	; (80031d4 <TIM_Base_SetConfig+0x140>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d013      	beq.n	8003146 <TIM_Base_SetConfig+0xb2>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a2d      	ldr	r2, [pc, #180]	; (80031d8 <TIM_Base_SetConfig+0x144>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d00f      	beq.n	8003146 <TIM_Base_SetConfig+0xb2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a2c      	ldr	r2, [pc, #176]	; (80031dc <TIM_Base_SetConfig+0x148>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d00b      	beq.n	8003146 <TIM_Base_SetConfig+0xb2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a2b      	ldr	r2, [pc, #172]	; (80031e0 <TIM_Base_SetConfig+0x14c>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d007      	beq.n	8003146 <TIM_Base_SetConfig+0xb2>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a2a      	ldr	r2, [pc, #168]	; (80031e4 <TIM_Base_SetConfig+0x150>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d003      	beq.n	8003146 <TIM_Base_SetConfig+0xb2>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a29      	ldr	r2, [pc, #164]	; (80031e8 <TIM_Base_SetConfig+0x154>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d108      	bne.n	8003158 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800314c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	4313      	orrs	r3, r2
 8003156:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	4313      	orrs	r3, r2
 8003164:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a10      	ldr	r2, [pc, #64]	; (80031c0 <TIM_Base_SetConfig+0x12c>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d003      	beq.n	800318c <TIM_Base_SetConfig+0xf8>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a12      	ldr	r2, [pc, #72]	; (80031d0 <TIM_Base_SetConfig+0x13c>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d103      	bne.n	8003194 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	691a      	ldr	r2, [r3, #16]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d105      	bne.n	80031b2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	f023 0201 	bic.w	r2, r3, #1
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	611a      	str	r2, [r3, #16]
  }
}
 80031b2:	bf00      	nop
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	40010000 	.word	0x40010000
 80031c4:	40000400 	.word	0x40000400
 80031c8:	40000800 	.word	0x40000800
 80031cc:	40000c00 	.word	0x40000c00
 80031d0:	40010400 	.word	0x40010400
 80031d4:	40014000 	.word	0x40014000
 80031d8:	40014400 	.word	0x40014400
 80031dc:	40014800 	.word	0x40014800
 80031e0:	40001800 	.word	0x40001800
 80031e4:	40001c00 	.word	0x40001c00
 80031e8:	40002000 	.word	0x40002000

080031ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b087      	sub	sp, #28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	f023 0201 	bic.w	r2, r3, #1
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800321a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f023 0303 	bic.w	r3, r3, #3
 8003222:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	4313      	orrs	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f023 0302 	bic.w	r3, r3, #2
 8003234:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	4313      	orrs	r3, r2
 800323e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a20      	ldr	r2, [pc, #128]	; (80032c4 <TIM_OC1_SetConfig+0xd8>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d003      	beq.n	8003250 <TIM_OC1_SetConfig+0x64>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a1f      	ldr	r2, [pc, #124]	; (80032c8 <TIM_OC1_SetConfig+0xdc>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d10c      	bne.n	800326a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f023 0308 	bic.w	r3, r3, #8
 8003256:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	4313      	orrs	r3, r2
 8003260:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f023 0304 	bic.w	r3, r3, #4
 8003268:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a15      	ldr	r2, [pc, #84]	; (80032c4 <TIM_OC1_SetConfig+0xd8>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d003      	beq.n	800327a <TIM_OC1_SetConfig+0x8e>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a14      	ldr	r2, [pc, #80]	; (80032c8 <TIM_OC1_SetConfig+0xdc>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d111      	bne.n	800329e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003280:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003288:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	4313      	orrs	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	4313      	orrs	r3, r2
 800329c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	621a      	str	r2, [r3, #32]
}
 80032b8:	bf00      	nop
 80032ba:	371c      	adds	r7, #28
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	40010000 	.word	0x40010000
 80032c8:	40010400 	.word	0x40010400

080032cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b087      	sub	sp, #28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	f023 0210 	bic.w	r2, r3, #16
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003302:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	021b      	lsls	r3, r3, #8
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	4313      	orrs	r3, r2
 800330e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f023 0320 	bic.w	r3, r3, #32
 8003316:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	4313      	orrs	r3, r2
 8003322:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a22      	ldr	r2, [pc, #136]	; (80033b0 <TIM_OC2_SetConfig+0xe4>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d003      	beq.n	8003334 <TIM_OC2_SetConfig+0x68>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a21      	ldr	r2, [pc, #132]	; (80033b4 <TIM_OC2_SetConfig+0xe8>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d10d      	bne.n	8003350 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800333a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	4313      	orrs	r3, r2
 8003346:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800334e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a17      	ldr	r2, [pc, #92]	; (80033b0 <TIM_OC2_SetConfig+0xe4>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d003      	beq.n	8003360 <TIM_OC2_SetConfig+0x94>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a16      	ldr	r2, [pc, #88]	; (80033b4 <TIM_OC2_SetConfig+0xe8>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d113      	bne.n	8003388 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003366:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800336e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	4313      	orrs	r3, r2
 800337a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	4313      	orrs	r3, r2
 8003386:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	621a      	str	r2, [r3, #32]
}
 80033a2:	bf00      	nop
 80033a4:	371c      	adds	r7, #28
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	40010000 	.word	0x40010000
 80033b4:	40010400 	.word	0x40010400

080033b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b087      	sub	sp, #28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f023 0303 	bic.w	r3, r3, #3
 80033ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003400:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	021b      	lsls	r3, r3, #8
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	4313      	orrs	r3, r2
 800340c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a21      	ldr	r2, [pc, #132]	; (8003498 <TIM_OC3_SetConfig+0xe0>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d003      	beq.n	800341e <TIM_OC3_SetConfig+0x66>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a20      	ldr	r2, [pc, #128]	; (800349c <TIM_OC3_SetConfig+0xe4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d10d      	bne.n	800343a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003424:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	021b      	lsls	r3, r3, #8
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	4313      	orrs	r3, r2
 8003430:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003438:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a16      	ldr	r2, [pc, #88]	; (8003498 <TIM_OC3_SetConfig+0xe0>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d003      	beq.n	800344a <TIM_OC3_SetConfig+0x92>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a15      	ldr	r2, [pc, #84]	; (800349c <TIM_OC3_SetConfig+0xe4>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d113      	bne.n	8003472 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003450:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003458:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	011b      	lsls	r3, r3, #4
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	4313      	orrs	r3, r2
 8003464:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	011b      	lsls	r3, r3, #4
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	4313      	orrs	r3, r2
 8003470:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	621a      	str	r2, [r3, #32]
}
 800348c:	bf00      	nop
 800348e:	371c      	adds	r7, #28
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	40010000 	.word	0x40010000
 800349c:	40010400 	.word	0x40010400

080034a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	021b      	lsls	r3, r3, #8
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	031b      	lsls	r3, r3, #12
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a12      	ldr	r2, [pc, #72]	; (8003544 <TIM_OC4_SetConfig+0xa4>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d003      	beq.n	8003508 <TIM_OC4_SetConfig+0x68>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a11      	ldr	r2, [pc, #68]	; (8003548 <TIM_OC4_SetConfig+0xa8>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d109      	bne.n	800351c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800350e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	019b      	lsls	r3, r3, #6
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	4313      	orrs	r3, r2
 800351a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	621a      	str	r2, [r3, #32]
}
 8003536:	bf00      	nop
 8003538:	371c      	adds	r7, #28
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	40010000 	.word	0x40010000
 8003548:	40010400 	.word	0x40010400

0800354c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800354c:	b480      	push	{r7}
 800354e:	b087      	sub	sp, #28
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	f003 031f 	and.w	r3, r3, #31
 800355e:	2201      	movs	r2, #1
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6a1a      	ldr	r2, [r3, #32]
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	43db      	mvns	r3, r3
 800356e:	401a      	ands	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6a1a      	ldr	r2, [r3, #32]
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	f003 031f 	and.w	r3, r3, #31
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	fa01 f303 	lsl.w	r3, r1, r3
 8003584:	431a      	orrs	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	621a      	str	r2, [r3, #32]
}
 800358a:	bf00      	nop
 800358c:	371c      	adds	r7, #28
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
	...

08003598 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d101      	bne.n	80035b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035ac:	2302      	movs	r3, #2
 80035ae:	e05a      	b.n	8003666 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	4313      	orrs	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a21      	ldr	r2, [pc, #132]	; (8003674 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d022      	beq.n	800363a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035fc:	d01d      	beq.n	800363a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a1d      	ldr	r2, [pc, #116]	; (8003678 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d018      	beq.n	800363a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a1b      	ldr	r2, [pc, #108]	; (800367c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d013      	beq.n	800363a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a1a      	ldr	r2, [pc, #104]	; (8003680 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d00e      	beq.n	800363a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a18      	ldr	r2, [pc, #96]	; (8003684 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d009      	beq.n	800363a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a17      	ldr	r2, [pc, #92]	; (8003688 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d004      	beq.n	800363a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a15      	ldr	r2, [pc, #84]	; (800368c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d10c      	bne.n	8003654 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003640:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	4313      	orrs	r3, r2
 800364a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	40010000 	.word	0x40010000
 8003678:	40000400 	.word	0x40000400
 800367c:	40000800 	.word	0x40000800
 8003680:	40000c00 	.word	0x40000c00
 8003684:	40010400 	.word	0x40010400
 8003688:	40014000 	.word	0x40014000
 800368c:	40001800 	.word	0x40001800

08003690 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e042      	b.n	8003750 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d106      	bne.n	80036e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7fd fdb4 	bl	800124c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2224      	movs	r2, #36	; 0x24
 80036e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 fd11 	bl	8004124 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	691a      	ldr	r2, [r3, #16]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003710:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695a      	ldr	r2, [r3, #20]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003720:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68da      	ldr	r2, [r3, #12]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003730:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2220      	movs	r2, #32
 800373c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2220      	movs	r2, #32
 8003744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	4613      	mov	r3, r2
 8003764:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b20      	cmp	r3, #32
 8003770:	d121      	bne.n	80037b6 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d002      	beq.n	800377e <HAL_UART_Transmit_IT+0x26>
 8003778:	88fb      	ldrh	r3, [r7, #6]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e01a      	b.n	80037b8 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	88fa      	ldrh	r2, [r7, #6]
 800378c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	88fa      	ldrh	r2, [r7, #6]
 8003792:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2221      	movs	r2, #33	; 0x21
 800379e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68da      	ldr	r2, [r3, #12]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037b0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80037b2:	2300      	movs	r3, #0
 80037b4:	e000      	b.n	80037b8 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80037b6:	2302      	movs	r3, #2
  }
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	4613      	mov	r3, r2
 80037d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b20      	cmp	r3, #32
 80037dc:	d112      	bne.n	8003804 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d002      	beq.n	80037ea <HAL_UART_Receive_IT+0x26>
 80037e4:	88fb      	ldrh	r3, [r7, #6]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e00b      	b.n	8003806 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80037f4:	88fb      	ldrh	r3, [r7, #6]
 80037f6:	461a      	mov	r2, r3
 80037f8:	68b9      	ldr	r1, [r7, #8]
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 faba 	bl	8003d74 <UART_Start_Receive_IT>
 8003800:	4603      	mov	r3, r0
 8003802:	e000      	b.n	8003806 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003804:	2302      	movs	r3, #2
  }
}
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
	...

08003810 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b0ba      	sub	sp, #232	; 0xe8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003836:	2300      	movs	r3, #0
 8003838:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800383c:	2300      	movs	r3, #0
 800383e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800384e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10f      	bne.n	8003876 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800385a:	f003 0320 	and.w	r3, r3, #32
 800385e:	2b00      	cmp	r3, #0
 8003860:	d009      	beq.n	8003876 <HAL_UART_IRQHandler+0x66>
 8003862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003866:	f003 0320 	and.w	r3, r3, #32
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 fb99 	bl	8003fa6 <UART_Receive_IT>
      return;
 8003874:	e25b      	b.n	8003d2e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003876:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 80de 	beq.w	8003a3c <HAL_UART_IRQHandler+0x22c>
 8003880:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b00      	cmp	r3, #0
 800388a:	d106      	bne.n	800389a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800388c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003890:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 80d1 	beq.w	8003a3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800389a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00b      	beq.n	80038be <HAL_UART_IRQHandler+0xae>
 80038a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d005      	beq.n	80038be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b6:	f043 0201 	orr.w	r2, r3, #1
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038c2:	f003 0304 	and.w	r3, r3, #4
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00b      	beq.n	80038e2 <HAL_UART_IRQHandler+0xd2>
 80038ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d005      	beq.n	80038e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038da:	f043 0202 	orr.w	r2, r3, #2
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00b      	beq.n	8003906 <HAL_UART_IRQHandler+0xf6>
 80038ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d005      	beq.n	8003906 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fe:	f043 0204 	orr.w	r2, r3, #4
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	2b00      	cmp	r3, #0
 8003910:	d011      	beq.n	8003936 <HAL_UART_IRQHandler+0x126>
 8003912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003916:	f003 0320 	and.w	r3, r3, #32
 800391a:	2b00      	cmp	r3, #0
 800391c:	d105      	bne.n	800392a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800391e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d005      	beq.n	8003936 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392e:	f043 0208 	orr.w	r2, r3, #8
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 81f2 	beq.w	8003d24 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003944:	f003 0320 	and.w	r3, r3, #32
 8003948:	2b00      	cmp	r3, #0
 800394a:	d008      	beq.n	800395e <HAL_UART_IRQHandler+0x14e>
 800394c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003950:	f003 0320 	and.w	r3, r3, #32
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 fb24 	bl	8003fa6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003968:	2b40      	cmp	r3, #64	; 0x40
 800396a:	bf0c      	ite	eq
 800396c:	2301      	moveq	r3, #1
 800396e:	2300      	movne	r3, #0
 8003970:	b2db      	uxtb	r3, r3
 8003972:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b00      	cmp	r3, #0
 8003980:	d103      	bne.n	800398a <HAL_UART_IRQHandler+0x17a>
 8003982:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003986:	2b00      	cmp	r3, #0
 8003988:	d04f      	beq.n	8003a2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 fa2c 	bl	8003de8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399a:	2b40      	cmp	r3, #64	; 0x40
 800399c:	d141      	bne.n	8003a22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	3314      	adds	r3, #20
 80039a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039ac:	e853 3f00 	ldrex	r3, [r3]
 80039b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80039b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	3314      	adds	r3, #20
 80039c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80039ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80039ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80039d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80039da:	e841 2300 	strex	r3, r2, [r1]
 80039de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80039e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1d9      	bne.n	800399e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d013      	beq.n	8003a1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f6:	4a7e      	ldr	r2, [pc, #504]	; (8003bf0 <HAL_UART_IRQHandler+0x3e0>)
 80039f8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fd fe91 	bl	8001726 <HAL_DMA_Abort_IT>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d016      	beq.n	8003a38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a14:	4610      	mov	r0, r2
 8003a16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a18:	e00e      	b.n	8003a38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f994 	bl	8003d48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a20:	e00a      	b.n	8003a38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f990 	bl	8003d48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a28:	e006      	b.n	8003a38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f98c 	bl	8003d48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003a36:	e175      	b.n	8003d24 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a38:	bf00      	nop
    return;
 8003a3a:	e173      	b.n	8003d24 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	f040 814f 	bne.w	8003ce4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a4a:	f003 0310 	and.w	r3, r3, #16
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 8148 	beq.w	8003ce4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a58:	f003 0310 	and.w	r3, r3, #16
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 8141 	beq.w	8003ce4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a62:	2300      	movs	r3, #0
 8003a64:	60bb      	str	r3, [r7, #8]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	60bb      	str	r3, [r7, #8]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	60bb      	str	r3, [r7, #8]
 8003a76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a82:	2b40      	cmp	r3, #64	; 0x40
 8003a84:	f040 80b6 	bne.w	8003bf4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 8145 	beq.w	8003d28 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003aa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	f080 813e 	bcs.w	8003d28 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ab2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003abe:	f000 8088 	beq.w	8003bd2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	330c      	adds	r3, #12
 8003ac8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003acc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ad0:	e853 3f00 	ldrex	r3, [r3]
 8003ad4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ad8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003adc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ae0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	330c      	adds	r3, #12
 8003aea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003aee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003af2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003afa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003afe:	e841 2300 	strex	r3, r2, [r1]
 8003b02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003b06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1d9      	bne.n	8003ac2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	3314      	adds	r3, #20
 8003b14:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b18:	e853 3f00 	ldrex	r3, [r3]
 8003b1c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003b1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b20:	f023 0301 	bic.w	r3, r3, #1
 8003b24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	3314      	adds	r3, #20
 8003b2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b32:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003b36:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b38:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003b3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b3e:	e841 2300 	strex	r3, r2, [r1]
 8003b42:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003b44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1e1      	bne.n	8003b0e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	3314      	adds	r3, #20
 8003b50:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b54:	e853 3f00 	ldrex	r3, [r3]
 8003b58:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3314      	adds	r3, #20
 8003b6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b70:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b72:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b74:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b76:	e841 2300 	strex	r3, r2, [r1]
 8003b7a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1e3      	bne.n	8003b4a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2220      	movs	r2, #32
 8003b86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	330c      	adds	r3, #12
 8003b96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b9a:	e853 3f00 	ldrex	r3, [r3]
 8003b9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ba2:	f023 0310 	bic.w	r3, r3, #16
 8003ba6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	330c      	adds	r3, #12
 8003bb0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003bb4:	65ba      	str	r2, [r7, #88]	; 0x58
 8003bb6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003bba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bbc:	e841 2300 	strex	r3, r2, [r1]
 8003bc0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003bc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1e3      	bne.n	8003b90 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fd fd3a 	bl	8001646 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2202      	movs	r2, #2
 8003bd6:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	4619      	mov	r1, r3
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f8b7 	bl	8003d5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bee:	e09b      	b.n	8003d28 <HAL_UART_IRQHandler+0x518>
 8003bf0:	08003eaf 	.word	0x08003eaf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f000 808e 	beq.w	8003d2c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003c10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 8089 	beq.w	8003d2c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	330c      	adds	r3, #12
 8003c20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c24:	e853 3f00 	ldrex	r3, [r3]
 8003c28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	330c      	adds	r3, #12
 8003c3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003c3e:	647a      	str	r2, [r7, #68]	; 0x44
 8003c40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c46:	e841 2300 	strex	r3, r2, [r1]
 8003c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1e3      	bne.n	8003c1a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	3314      	adds	r3, #20
 8003c58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	e853 3f00 	ldrex	r3, [r3]
 8003c60:	623b      	str	r3, [r7, #32]
   return(result);
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	f023 0301 	bic.w	r3, r3, #1
 8003c68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	3314      	adds	r3, #20
 8003c72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c76:	633a      	str	r2, [r7, #48]	; 0x30
 8003c78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c7e:	e841 2300 	strex	r3, r2, [r1]
 8003c82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1e3      	bne.n	8003c52 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	330c      	adds	r3, #12
 8003c9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	e853 3f00 	ldrex	r3, [r3]
 8003ca6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f023 0310 	bic.w	r3, r3, #16
 8003cae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	330c      	adds	r3, #12
 8003cb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003cbc:	61fa      	str	r2, [r7, #28]
 8003cbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc0:	69b9      	ldr	r1, [r7, #24]
 8003cc2:	69fa      	ldr	r2, [r7, #28]
 8003cc4:	e841 2300 	strex	r3, r2, [r1]
 8003cc8:	617b      	str	r3, [r7, #20]
   return(result);
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1e3      	bne.n	8003c98 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cd6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003cda:	4619      	mov	r1, r3
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 f83d 	bl	8003d5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ce2:	e023      	b.n	8003d2c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d009      	beq.n	8003d04 <HAL_UART_IRQHandler+0x4f4>
 8003cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 f8ea 	bl	8003ed6 <UART_Transmit_IT>
    return;
 8003d02:	e014      	b.n	8003d2e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00e      	beq.n	8003d2e <HAL_UART_IRQHandler+0x51e>
 8003d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d008      	beq.n	8003d2e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 f92a 	bl	8003f76 <UART_EndTransmit_IT>
    return;
 8003d22:	e004      	b.n	8003d2e <HAL_UART_IRQHandler+0x51e>
    return;
 8003d24:	bf00      	nop
 8003d26:	e002      	b.n	8003d2e <HAL_UART_IRQHandler+0x51e>
      return;
 8003d28:	bf00      	nop
 8003d2a:	e000      	b.n	8003d2e <HAL_UART_IRQHandler+0x51e>
      return;
 8003d2c:	bf00      	nop
  }
}
 8003d2e:	37e8      	adds	r7, #232	; 0xe8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	460b      	mov	r3, r1
 8003d66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	88fa      	ldrh	r2, [r7, #6]
 8003d8c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	88fa      	ldrh	r2, [r7, #6]
 8003d92:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2222      	movs	r2, #34	; 0x22
 8003d9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d007      	beq.n	8003dba <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68da      	ldr	r2, [r3, #12]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003db8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	695a      	ldr	r2, [r3, #20]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f042 0201 	orr.w	r2, r2, #1
 8003dc8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68da      	ldr	r2, [r3, #12]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f042 0220 	orr.w	r2, r2, #32
 8003dd8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3714      	adds	r7, #20
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b095      	sub	sp, #84	; 0x54
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	330c      	adds	r3, #12
 8003df6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dfa:	e853 3f00 	ldrex	r3, [r3]
 8003dfe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	330c      	adds	r3, #12
 8003e0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e10:	643a      	str	r2, [r7, #64]	; 0x40
 8003e12:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e18:	e841 2300 	strex	r3, r2, [r1]
 8003e1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1e5      	bne.n	8003df0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3314      	adds	r3, #20
 8003e2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	e853 3f00 	ldrex	r3, [r3]
 8003e32:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f023 0301 	bic.w	r3, r3, #1
 8003e3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	3314      	adds	r3, #20
 8003e42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e4c:	e841 2300 	strex	r3, r2, [r1]
 8003e50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1e5      	bne.n	8003e24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d119      	bne.n	8003e94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	330c      	adds	r3, #12
 8003e66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	e853 3f00 	ldrex	r3, [r3]
 8003e6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	f023 0310 	bic.w	r3, r3, #16
 8003e76:	647b      	str	r3, [r7, #68]	; 0x44
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	330c      	adds	r3, #12
 8003e7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e80:	61ba      	str	r2, [r7, #24]
 8003e82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e84:	6979      	ldr	r1, [r7, #20]
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	e841 2300 	strex	r3, r2, [r1]
 8003e8c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1e5      	bne.n	8003e60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2220      	movs	r2, #32
 8003e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003ea2:	bf00      	nop
 8003ea4:	3754      	adds	r7, #84	; 0x54
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b084      	sub	sp, #16
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f7ff ff3d 	bl	8003d48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ece:	bf00      	nop
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b085      	sub	sp, #20
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b21      	cmp	r3, #33	; 0x21
 8003ee8:	d13e      	bne.n	8003f68 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef2:	d114      	bne.n	8003f1e <UART_Transmit_IT+0x48>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d110      	bne.n	8003f1e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	461a      	mov	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f10:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	1c9a      	adds	r2, r3, #2
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	621a      	str	r2, [r3, #32]
 8003f1c:	e008      	b.n	8003f30 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	1c59      	adds	r1, r3, #1
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6211      	str	r1, [r2, #32]
 8003f28:	781a      	ldrb	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	3b01      	subs	r3, #1
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10f      	bne.n	8003f64 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68da      	ldr	r2, [r3, #12]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f52:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68da      	ldr	r2, [r3, #12]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f62:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f64:	2300      	movs	r3, #0
 8003f66:	e000      	b.n	8003f6a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f68:	2302      	movs	r3, #2
  }
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b082      	sub	sp, #8
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68da      	ldr	r2, [r3, #12]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f8c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2220      	movs	r2, #32
 8003f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7ff fecc 	bl	8003d34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b08c      	sub	sp, #48	; 0x30
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b22      	cmp	r3, #34	; 0x22
 8003fb8:	f040 80ae 	bne.w	8004118 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc4:	d117      	bne.n	8003ff6 <UART_Receive_IT+0x50>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d113      	bne.n	8003ff6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fee:	1c9a      	adds	r2, r3, #2
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	629a      	str	r2, [r3, #40]	; 0x28
 8003ff4:	e026      	b.n	8004044 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004008:	d007      	beq.n	800401a <UART_Receive_IT+0x74>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10a      	bne.n	8004028 <UART_Receive_IT+0x82>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d106      	bne.n	8004028 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	b2da      	uxtb	r2, r3
 8004022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004024:	701a      	strb	r2, [r3, #0]
 8004026:	e008      	b.n	800403a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	b2db      	uxtb	r3, r3
 8004030:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004034:	b2da      	uxtb	r2, r3
 8004036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004038:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403e:	1c5a      	adds	r2, r3, #1
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004048:	b29b      	uxth	r3, r3
 800404a:	3b01      	subs	r3, #1
 800404c:	b29b      	uxth	r3, r3
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	4619      	mov	r1, r3
 8004052:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004054:	2b00      	cmp	r3, #0
 8004056:	d15d      	bne.n	8004114 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0220 	bic.w	r2, r2, #32
 8004066:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004076:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695a      	ldr	r2, [r3, #20]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0201 	bic.w	r2, r2, #1
 8004086:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2220      	movs	r2, #32
 800408c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409a:	2b01      	cmp	r3, #1
 800409c:	d135      	bne.n	800410a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	330c      	adds	r3, #12
 80040aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	e853 3f00 	ldrex	r3, [r3]
 80040b2:	613b      	str	r3, [r7, #16]
   return(result);
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	f023 0310 	bic.w	r3, r3, #16
 80040ba:	627b      	str	r3, [r7, #36]	; 0x24
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	330c      	adds	r3, #12
 80040c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c4:	623a      	str	r2, [r7, #32]
 80040c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c8:	69f9      	ldr	r1, [r7, #28]
 80040ca:	6a3a      	ldr	r2, [r7, #32]
 80040cc:	e841 2300 	strex	r3, r2, [r1]
 80040d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1e5      	bne.n	80040a4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0310 	and.w	r3, r3, #16
 80040e2:	2b10      	cmp	r3, #16
 80040e4:	d10a      	bne.n	80040fc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	60fb      	str	r3, [r7, #12]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	60fb      	str	r3, [r7, #12]
 80040fa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004100:	4619      	mov	r1, r3
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7ff fe2a 	bl	8003d5c <HAL_UARTEx_RxEventCallback>
 8004108:	e002      	b.n	8004110 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7fc fc76 	bl	80009fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004110:	2300      	movs	r3, #0
 8004112:	e002      	b.n	800411a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004114:	2300      	movs	r3, #0
 8004116:	e000      	b.n	800411a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004118:	2302      	movs	r3, #2
  }
}
 800411a:	4618      	mov	r0, r3
 800411c:	3730      	adds	r7, #48	; 0x30
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
	...

08004124 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004128:	b0c0      	sub	sp, #256	; 0x100
 800412a:	af00      	add	r7, sp, #0
 800412c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800413c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004140:	68d9      	ldr	r1, [r3, #12]
 8004142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	ea40 0301 	orr.w	r3, r0, r1
 800414c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800414e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	431a      	orrs	r2, r3
 800415c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	431a      	orrs	r2, r3
 8004164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800417c:	f021 010c 	bic.w	r1, r1, #12
 8004180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800418a:	430b      	orrs	r3, r1
 800418c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800418e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800419a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800419e:	6999      	ldr	r1, [r3, #24]
 80041a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	ea40 0301 	orr.w	r3, r0, r1
 80041aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	4b8f      	ldr	r3, [pc, #572]	; (80043f0 <UART_SetConfig+0x2cc>)
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d005      	beq.n	80041c4 <UART_SetConfig+0xa0>
 80041b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	4b8d      	ldr	r3, [pc, #564]	; (80043f4 <UART_SetConfig+0x2d0>)
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d104      	bne.n	80041ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041c4:	f7fd fd9e 	bl	8001d04 <HAL_RCC_GetPCLK2Freq>
 80041c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80041cc:	e003      	b.n	80041d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041ce:	f7fd fd85 	bl	8001cdc <HAL_RCC_GetPCLK1Freq>
 80041d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041da:	69db      	ldr	r3, [r3, #28]
 80041dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041e0:	f040 810c 	bne.w	80043fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041e8:	2200      	movs	r2, #0
 80041ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80041ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80041f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80041f6:	4622      	mov	r2, r4
 80041f8:	462b      	mov	r3, r5
 80041fa:	1891      	adds	r1, r2, r2
 80041fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80041fe:	415b      	adcs	r3, r3
 8004200:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004202:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004206:	4621      	mov	r1, r4
 8004208:	eb12 0801 	adds.w	r8, r2, r1
 800420c:	4629      	mov	r1, r5
 800420e:	eb43 0901 	adc.w	r9, r3, r1
 8004212:	f04f 0200 	mov.w	r2, #0
 8004216:	f04f 0300 	mov.w	r3, #0
 800421a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800421e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004222:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004226:	4690      	mov	r8, r2
 8004228:	4699      	mov	r9, r3
 800422a:	4623      	mov	r3, r4
 800422c:	eb18 0303 	adds.w	r3, r8, r3
 8004230:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004234:	462b      	mov	r3, r5
 8004236:	eb49 0303 	adc.w	r3, r9, r3
 800423a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800423e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800424a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800424e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004252:	460b      	mov	r3, r1
 8004254:	18db      	adds	r3, r3, r3
 8004256:	653b      	str	r3, [r7, #80]	; 0x50
 8004258:	4613      	mov	r3, r2
 800425a:	eb42 0303 	adc.w	r3, r2, r3
 800425e:	657b      	str	r3, [r7, #84]	; 0x54
 8004260:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004264:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004268:	f7fc f82a 	bl	80002c0 <__aeabi_uldivmod>
 800426c:	4602      	mov	r2, r0
 800426e:	460b      	mov	r3, r1
 8004270:	4b61      	ldr	r3, [pc, #388]	; (80043f8 <UART_SetConfig+0x2d4>)
 8004272:	fba3 2302 	umull	r2, r3, r3, r2
 8004276:	095b      	lsrs	r3, r3, #5
 8004278:	011c      	lsls	r4, r3, #4
 800427a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800427e:	2200      	movs	r2, #0
 8004280:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004284:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004288:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800428c:	4642      	mov	r2, r8
 800428e:	464b      	mov	r3, r9
 8004290:	1891      	adds	r1, r2, r2
 8004292:	64b9      	str	r1, [r7, #72]	; 0x48
 8004294:	415b      	adcs	r3, r3
 8004296:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004298:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800429c:	4641      	mov	r1, r8
 800429e:	eb12 0a01 	adds.w	sl, r2, r1
 80042a2:	4649      	mov	r1, r9
 80042a4:	eb43 0b01 	adc.w	fp, r3, r1
 80042a8:	f04f 0200 	mov.w	r2, #0
 80042ac:	f04f 0300 	mov.w	r3, #0
 80042b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042bc:	4692      	mov	sl, r2
 80042be:	469b      	mov	fp, r3
 80042c0:	4643      	mov	r3, r8
 80042c2:	eb1a 0303 	adds.w	r3, sl, r3
 80042c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042ca:	464b      	mov	r3, r9
 80042cc:	eb4b 0303 	adc.w	r3, fp, r3
 80042d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80042d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80042e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80042e8:	460b      	mov	r3, r1
 80042ea:	18db      	adds	r3, r3, r3
 80042ec:	643b      	str	r3, [r7, #64]	; 0x40
 80042ee:	4613      	mov	r3, r2
 80042f0:	eb42 0303 	adc.w	r3, r2, r3
 80042f4:	647b      	str	r3, [r7, #68]	; 0x44
 80042f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80042fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80042fe:	f7fb ffdf 	bl	80002c0 <__aeabi_uldivmod>
 8004302:	4602      	mov	r2, r0
 8004304:	460b      	mov	r3, r1
 8004306:	4611      	mov	r1, r2
 8004308:	4b3b      	ldr	r3, [pc, #236]	; (80043f8 <UART_SetConfig+0x2d4>)
 800430a:	fba3 2301 	umull	r2, r3, r3, r1
 800430e:	095b      	lsrs	r3, r3, #5
 8004310:	2264      	movs	r2, #100	; 0x64
 8004312:	fb02 f303 	mul.w	r3, r2, r3
 8004316:	1acb      	subs	r3, r1, r3
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800431e:	4b36      	ldr	r3, [pc, #216]	; (80043f8 <UART_SetConfig+0x2d4>)
 8004320:	fba3 2302 	umull	r2, r3, r3, r2
 8004324:	095b      	lsrs	r3, r3, #5
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800432c:	441c      	add	r4, r3
 800432e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004332:	2200      	movs	r2, #0
 8004334:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004338:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800433c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004340:	4642      	mov	r2, r8
 8004342:	464b      	mov	r3, r9
 8004344:	1891      	adds	r1, r2, r2
 8004346:	63b9      	str	r1, [r7, #56]	; 0x38
 8004348:	415b      	adcs	r3, r3
 800434a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800434c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004350:	4641      	mov	r1, r8
 8004352:	1851      	adds	r1, r2, r1
 8004354:	6339      	str	r1, [r7, #48]	; 0x30
 8004356:	4649      	mov	r1, r9
 8004358:	414b      	adcs	r3, r1
 800435a:	637b      	str	r3, [r7, #52]	; 0x34
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004368:	4659      	mov	r1, fp
 800436a:	00cb      	lsls	r3, r1, #3
 800436c:	4651      	mov	r1, sl
 800436e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004372:	4651      	mov	r1, sl
 8004374:	00ca      	lsls	r2, r1, #3
 8004376:	4610      	mov	r0, r2
 8004378:	4619      	mov	r1, r3
 800437a:	4603      	mov	r3, r0
 800437c:	4642      	mov	r2, r8
 800437e:	189b      	adds	r3, r3, r2
 8004380:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004384:	464b      	mov	r3, r9
 8004386:	460a      	mov	r2, r1
 8004388:	eb42 0303 	adc.w	r3, r2, r3
 800438c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800439c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80043a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80043a4:	460b      	mov	r3, r1
 80043a6:	18db      	adds	r3, r3, r3
 80043a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80043aa:	4613      	mov	r3, r2
 80043ac:	eb42 0303 	adc.w	r3, r2, r3
 80043b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80043ba:	f7fb ff81 	bl	80002c0 <__aeabi_uldivmod>
 80043be:	4602      	mov	r2, r0
 80043c0:	460b      	mov	r3, r1
 80043c2:	4b0d      	ldr	r3, [pc, #52]	; (80043f8 <UART_SetConfig+0x2d4>)
 80043c4:	fba3 1302 	umull	r1, r3, r3, r2
 80043c8:	095b      	lsrs	r3, r3, #5
 80043ca:	2164      	movs	r1, #100	; 0x64
 80043cc:	fb01 f303 	mul.w	r3, r1, r3
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	3332      	adds	r3, #50	; 0x32
 80043d6:	4a08      	ldr	r2, [pc, #32]	; (80043f8 <UART_SetConfig+0x2d4>)
 80043d8:	fba2 2303 	umull	r2, r3, r2, r3
 80043dc:	095b      	lsrs	r3, r3, #5
 80043de:	f003 0207 	and.w	r2, r3, #7
 80043e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4422      	add	r2, r4
 80043ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043ec:	e106      	b.n	80045fc <UART_SetConfig+0x4d8>
 80043ee:	bf00      	nop
 80043f0:	40011000 	.word	0x40011000
 80043f4:	40011400 	.word	0x40011400
 80043f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004400:	2200      	movs	r2, #0
 8004402:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004406:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800440a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800440e:	4642      	mov	r2, r8
 8004410:	464b      	mov	r3, r9
 8004412:	1891      	adds	r1, r2, r2
 8004414:	6239      	str	r1, [r7, #32]
 8004416:	415b      	adcs	r3, r3
 8004418:	627b      	str	r3, [r7, #36]	; 0x24
 800441a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800441e:	4641      	mov	r1, r8
 8004420:	1854      	adds	r4, r2, r1
 8004422:	4649      	mov	r1, r9
 8004424:	eb43 0501 	adc.w	r5, r3, r1
 8004428:	f04f 0200 	mov.w	r2, #0
 800442c:	f04f 0300 	mov.w	r3, #0
 8004430:	00eb      	lsls	r3, r5, #3
 8004432:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004436:	00e2      	lsls	r2, r4, #3
 8004438:	4614      	mov	r4, r2
 800443a:	461d      	mov	r5, r3
 800443c:	4643      	mov	r3, r8
 800443e:	18e3      	adds	r3, r4, r3
 8004440:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004444:	464b      	mov	r3, r9
 8004446:	eb45 0303 	adc.w	r3, r5, r3
 800444a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800444e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800445a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800445e:	f04f 0200 	mov.w	r2, #0
 8004462:	f04f 0300 	mov.w	r3, #0
 8004466:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800446a:	4629      	mov	r1, r5
 800446c:	008b      	lsls	r3, r1, #2
 800446e:	4621      	mov	r1, r4
 8004470:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004474:	4621      	mov	r1, r4
 8004476:	008a      	lsls	r2, r1, #2
 8004478:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800447c:	f7fb ff20 	bl	80002c0 <__aeabi_uldivmod>
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	4b60      	ldr	r3, [pc, #384]	; (8004608 <UART_SetConfig+0x4e4>)
 8004486:	fba3 2302 	umull	r2, r3, r3, r2
 800448a:	095b      	lsrs	r3, r3, #5
 800448c:	011c      	lsls	r4, r3, #4
 800448e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004492:	2200      	movs	r2, #0
 8004494:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004498:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800449c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80044a0:	4642      	mov	r2, r8
 80044a2:	464b      	mov	r3, r9
 80044a4:	1891      	adds	r1, r2, r2
 80044a6:	61b9      	str	r1, [r7, #24]
 80044a8:	415b      	adcs	r3, r3
 80044aa:	61fb      	str	r3, [r7, #28]
 80044ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044b0:	4641      	mov	r1, r8
 80044b2:	1851      	adds	r1, r2, r1
 80044b4:	6139      	str	r1, [r7, #16]
 80044b6:	4649      	mov	r1, r9
 80044b8:	414b      	adcs	r3, r1
 80044ba:	617b      	str	r3, [r7, #20]
 80044bc:	f04f 0200 	mov.w	r2, #0
 80044c0:	f04f 0300 	mov.w	r3, #0
 80044c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044c8:	4659      	mov	r1, fp
 80044ca:	00cb      	lsls	r3, r1, #3
 80044cc:	4651      	mov	r1, sl
 80044ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044d2:	4651      	mov	r1, sl
 80044d4:	00ca      	lsls	r2, r1, #3
 80044d6:	4610      	mov	r0, r2
 80044d8:	4619      	mov	r1, r3
 80044da:	4603      	mov	r3, r0
 80044dc:	4642      	mov	r2, r8
 80044de:	189b      	adds	r3, r3, r2
 80044e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044e4:	464b      	mov	r3, r9
 80044e6:	460a      	mov	r2, r1
 80044e8:	eb42 0303 	adc.w	r3, r2, r3
 80044ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80044f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80044fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80044fc:	f04f 0200 	mov.w	r2, #0
 8004500:	f04f 0300 	mov.w	r3, #0
 8004504:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004508:	4649      	mov	r1, r9
 800450a:	008b      	lsls	r3, r1, #2
 800450c:	4641      	mov	r1, r8
 800450e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004512:	4641      	mov	r1, r8
 8004514:	008a      	lsls	r2, r1, #2
 8004516:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800451a:	f7fb fed1 	bl	80002c0 <__aeabi_uldivmod>
 800451e:	4602      	mov	r2, r0
 8004520:	460b      	mov	r3, r1
 8004522:	4611      	mov	r1, r2
 8004524:	4b38      	ldr	r3, [pc, #224]	; (8004608 <UART_SetConfig+0x4e4>)
 8004526:	fba3 2301 	umull	r2, r3, r3, r1
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	2264      	movs	r2, #100	; 0x64
 800452e:	fb02 f303 	mul.w	r3, r2, r3
 8004532:	1acb      	subs	r3, r1, r3
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	3332      	adds	r3, #50	; 0x32
 8004538:	4a33      	ldr	r2, [pc, #204]	; (8004608 <UART_SetConfig+0x4e4>)
 800453a:	fba2 2303 	umull	r2, r3, r2, r3
 800453e:	095b      	lsrs	r3, r3, #5
 8004540:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004544:	441c      	add	r4, r3
 8004546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800454a:	2200      	movs	r2, #0
 800454c:	673b      	str	r3, [r7, #112]	; 0x70
 800454e:	677a      	str	r2, [r7, #116]	; 0x74
 8004550:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004554:	4642      	mov	r2, r8
 8004556:	464b      	mov	r3, r9
 8004558:	1891      	adds	r1, r2, r2
 800455a:	60b9      	str	r1, [r7, #8]
 800455c:	415b      	adcs	r3, r3
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004564:	4641      	mov	r1, r8
 8004566:	1851      	adds	r1, r2, r1
 8004568:	6039      	str	r1, [r7, #0]
 800456a:	4649      	mov	r1, r9
 800456c:	414b      	adcs	r3, r1
 800456e:	607b      	str	r3, [r7, #4]
 8004570:	f04f 0200 	mov.w	r2, #0
 8004574:	f04f 0300 	mov.w	r3, #0
 8004578:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800457c:	4659      	mov	r1, fp
 800457e:	00cb      	lsls	r3, r1, #3
 8004580:	4651      	mov	r1, sl
 8004582:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004586:	4651      	mov	r1, sl
 8004588:	00ca      	lsls	r2, r1, #3
 800458a:	4610      	mov	r0, r2
 800458c:	4619      	mov	r1, r3
 800458e:	4603      	mov	r3, r0
 8004590:	4642      	mov	r2, r8
 8004592:	189b      	adds	r3, r3, r2
 8004594:	66bb      	str	r3, [r7, #104]	; 0x68
 8004596:	464b      	mov	r3, r9
 8004598:	460a      	mov	r2, r1
 800459a:	eb42 0303 	adc.w	r3, r2, r3
 800459e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	663b      	str	r3, [r7, #96]	; 0x60
 80045aa:	667a      	str	r2, [r7, #100]	; 0x64
 80045ac:	f04f 0200 	mov.w	r2, #0
 80045b0:	f04f 0300 	mov.w	r3, #0
 80045b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80045b8:	4649      	mov	r1, r9
 80045ba:	008b      	lsls	r3, r1, #2
 80045bc:	4641      	mov	r1, r8
 80045be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045c2:	4641      	mov	r1, r8
 80045c4:	008a      	lsls	r2, r1, #2
 80045c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80045ca:	f7fb fe79 	bl	80002c0 <__aeabi_uldivmod>
 80045ce:	4602      	mov	r2, r0
 80045d0:	460b      	mov	r3, r1
 80045d2:	4b0d      	ldr	r3, [pc, #52]	; (8004608 <UART_SetConfig+0x4e4>)
 80045d4:	fba3 1302 	umull	r1, r3, r3, r2
 80045d8:	095b      	lsrs	r3, r3, #5
 80045da:	2164      	movs	r1, #100	; 0x64
 80045dc:	fb01 f303 	mul.w	r3, r1, r3
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	011b      	lsls	r3, r3, #4
 80045e4:	3332      	adds	r3, #50	; 0x32
 80045e6:	4a08      	ldr	r2, [pc, #32]	; (8004608 <UART_SetConfig+0x4e4>)
 80045e8:	fba2 2303 	umull	r2, r3, r2, r3
 80045ec:	095b      	lsrs	r3, r3, #5
 80045ee:	f003 020f 	and.w	r2, r3, #15
 80045f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4422      	add	r2, r4
 80045fa:	609a      	str	r2, [r3, #8]
}
 80045fc:	bf00      	nop
 80045fe:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004602:	46bd      	mov	sp, r7
 8004604:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004608:	51eb851f 	.word	0x51eb851f

0800460c <sniprintf>:
 800460c:	b40c      	push	{r2, r3}
 800460e:	b530      	push	{r4, r5, lr}
 8004610:	4b17      	ldr	r3, [pc, #92]	; (8004670 <sniprintf+0x64>)
 8004612:	1e0c      	subs	r4, r1, #0
 8004614:	681d      	ldr	r5, [r3, #0]
 8004616:	b09d      	sub	sp, #116	; 0x74
 8004618:	da08      	bge.n	800462c <sniprintf+0x20>
 800461a:	238b      	movs	r3, #139	; 0x8b
 800461c:	602b      	str	r3, [r5, #0]
 800461e:	f04f 30ff 	mov.w	r0, #4294967295
 8004622:	b01d      	add	sp, #116	; 0x74
 8004624:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004628:	b002      	add	sp, #8
 800462a:	4770      	bx	lr
 800462c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004630:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004634:	bf14      	ite	ne
 8004636:	f104 33ff 	addne.w	r3, r4, #4294967295
 800463a:	4623      	moveq	r3, r4
 800463c:	9304      	str	r3, [sp, #16]
 800463e:	9307      	str	r3, [sp, #28]
 8004640:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004644:	9002      	str	r0, [sp, #8]
 8004646:	9006      	str	r0, [sp, #24]
 8004648:	f8ad 3016 	strh.w	r3, [sp, #22]
 800464c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800464e:	ab21      	add	r3, sp, #132	; 0x84
 8004650:	a902      	add	r1, sp, #8
 8004652:	4628      	mov	r0, r5
 8004654:	9301      	str	r3, [sp, #4]
 8004656:	f000 f9c1 	bl	80049dc <_svfiprintf_r>
 800465a:	1c43      	adds	r3, r0, #1
 800465c:	bfbc      	itt	lt
 800465e:	238b      	movlt	r3, #139	; 0x8b
 8004660:	602b      	strlt	r3, [r5, #0]
 8004662:	2c00      	cmp	r4, #0
 8004664:	d0dd      	beq.n	8004622 <sniprintf+0x16>
 8004666:	9b02      	ldr	r3, [sp, #8]
 8004668:	2200      	movs	r2, #0
 800466a:	701a      	strb	r2, [r3, #0]
 800466c:	e7d9      	b.n	8004622 <sniprintf+0x16>
 800466e:	bf00      	nop
 8004670:	20000060 	.word	0x20000060

08004674 <siscanf>:
 8004674:	b40e      	push	{r1, r2, r3}
 8004676:	b510      	push	{r4, lr}
 8004678:	b09f      	sub	sp, #124	; 0x7c
 800467a:	ac21      	add	r4, sp, #132	; 0x84
 800467c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004680:	f854 2b04 	ldr.w	r2, [r4], #4
 8004684:	9201      	str	r2, [sp, #4]
 8004686:	f8ad 101c 	strh.w	r1, [sp, #28]
 800468a:	9004      	str	r0, [sp, #16]
 800468c:	9008      	str	r0, [sp, #32]
 800468e:	f7fb fdbf 	bl	8000210 <strlen>
 8004692:	4b0c      	ldr	r3, [pc, #48]	; (80046c4 <siscanf+0x50>)
 8004694:	9005      	str	r0, [sp, #20]
 8004696:	9009      	str	r0, [sp, #36]	; 0x24
 8004698:	930d      	str	r3, [sp, #52]	; 0x34
 800469a:	480b      	ldr	r0, [pc, #44]	; (80046c8 <siscanf+0x54>)
 800469c:	9a01      	ldr	r2, [sp, #4]
 800469e:	6800      	ldr	r0, [r0, #0]
 80046a0:	9403      	str	r4, [sp, #12]
 80046a2:	2300      	movs	r3, #0
 80046a4:	9311      	str	r3, [sp, #68]	; 0x44
 80046a6:	9316      	str	r3, [sp, #88]	; 0x58
 80046a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80046ac:	f8ad 301e 	strh.w	r3, [sp, #30]
 80046b0:	a904      	add	r1, sp, #16
 80046b2:	4623      	mov	r3, r4
 80046b4:	f000 faea 	bl	8004c8c <__ssvfiscanf_r>
 80046b8:	b01f      	add	sp, #124	; 0x7c
 80046ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046be:	b003      	add	sp, #12
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	080046cd 	.word	0x080046cd
 80046c8:	20000060 	.word	0x20000060

080046cc <__seofread>:
 80046cc:	2000      	movs	r0, #0
 80046ce:	4770      	bx	lr

080046d0 <memset>:
 80046d0:	4402      	add	r2, r0
 80046d2:	4603      	mov	r3, r0
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d100      	bne.n	80046da <memset+0xa>
 80046d8:	4770      	bx	lr
 80046da:	f803 1b01 	strb.w	r1, [r3], #1
 80046de:	e7f9      	b.n	80046d4 <memset+0x4>

080046e0 <__errno>:
 80046e0:	4b01      	ldr	r3, [pc, #4]	; (80046e8 <__errno+0x8>)
 80046e2:	6818      	ldr	r0, [r3, #0]
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	20000060 	.word	0x20000060

080046ec <__libc_init_array>:
 80046ec:	b570      	push	{r4, r5, r6, lr}
 80046ee:	4d0d      	ldr	r5, [pc, #52]	; (8004724 <__libc_init_array+0x38>)
 80046f0:	4c0d      	ldr	r4, [pc, #52]	; (8004728 <__libc_init_array+0x3c>)
 80046f2:	1b64      	subs	r4, r4, r5
 80046f4:	10a4      	asrs	r4, r4, #2
 80046f6:	2600      	movs	r6, #0
 80046f8:	42a6      	cmp	r6, r4
 80046fa:	d109      	bne.n	8004710 <__libc_init_array+0x24>
 80046fc:	4d0b      	ldr	r5, [pc, #44]	; (800472c <__libc_init_array+0x40>)
 80046fe:	4c0c      	ldr	r4, [pc, #48]	; (8004730 <__libc_init_array+0x44>)
 8004700:	f001 f8f6 	bl	80058f0 <_init>
 8004704:	1b64      	subs	r4, r4, r5
 8004706:	10a4      	asrs	r4, r4, #2
 8004708:	2600      	movs	r6, #0
 800470a:	42a6      	cmp	r6, r4
 800470c:	d105      	bne.n	800471a <__libc_init_array+0x2e>
 800470e:	bd70      	pop	{r4, r5, r6, pc}
 8004710:	f855 3b04 	ldr.w	r3, [r5], #4
 8004714:	4798      	blx	r3
 8004716:	3601      	adds	r6, #1
 8004718:	e7ee      	b.n	80046f8 <__libc_init_array+0xc>
 800471a:	f855 3b04 	ldr.w	r3, [r5], #4
 800471e:	4798      	blx	r3
 8004720:	3601      	adds	r6, #1
 8004722:	e7f2      	b.n	800470a <__libc_init_array+0x1e>
 8004724:	08005ab4 	.word	0x08005ab4
 8004728:	08005ab4 	.word	0x08005ab4
 800472c:	08005ab4 	.word	0x08005ab4
 8004730:	08005ab8 	.word	0x08005ab8

08004734 <__retarget_lock_acquire_recursive>:
 8004734:	4770      	bx	lr

08004736 <__retarget_lock_release_recursive>:
 8004736:	4770      	bx	lr

08004738 <_free_r>:
 8004738:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800473a:	2900      	cmp	r1, #0
 800473c:	d044      	beq.n	80047c8 <_free_r+0x90>
 800473e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004742:	9001      	str	r0, [sp, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	f1a1 0404 	sub.w	r4, r1, #4
 800474a:	bfb8      	it	lt
 800474c:	18e4      	addlt	r4, r4, r3
 800474e:	f000 f8df 	bl	8004910 <__malloc_lock>
 8004752:	4a1e      	ldr	r2, [pc, #120]	; (80047cc <_free_r+0x94>)
 8004754:	9801      	ldr	r0, [sp, #4]
 8004756:	6813      	ldr	r3, [r2, #0]
 8004758:	b933      	cbnz	r3, 8004768 <_free_r+0x30>
 800475a:	6063      	str	r3, [r4, #4]
 800475c:	6014      	str	r4, [r2, #0]
 800475e:	b003      	add	sp, #12
 8004760:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004764:	f000 b8da 	b.w	800491c <__malloc_unlock>
 8004768:	42a3      	cmp	r3, r4
 800476a:	d908      	bls.n	800477e <_free_r+0x46>
 800476c:	6825      	ldr	r5, [r4, #0]
 800476e:	1961      	adds	r1, r4, r5
 8004770:	428b      	cmp	r3, r1
 8004772:	bf01      	itttt	eq
 8004774:	6819      	ldreq	r1, [r3, #0]
 8004776:	685b      	ldreq	r3, [r3, #4]
 8004778:	1949      	addeq	r1, r1, r5
 800477a:	6021      	streq	r1, [r4, #0]
 800477c:	e7ed      	b.n	800475a <_free_r+0x22>
 800477e:	461a      	mov	r2, r3
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	b10b      	cbz	r3, 8004788 <_free_r+0x50>
 8004784:	42a3      	cmp	r3, r4
 8004786:	d9fa      	bls.n	800477e <_free_r+0x46>
 8004788:	6811      	ldr	r1, [r2, #0]
 800478a:	1855      	adds	r5, r2, r1
 800478c:	42a5      	cmp	r5, r4
 800478e:	d10b      	bne.n	80047a8 <_free_r+0x70>
 8004790:	6824      	ldr	r4, [r4, #0]
 8004792:	4421      	add	r1, r4
 8004794:	1854      	adds	r4, r2, r1
 8004796:	42a3      	cmp	r3, r4
 8004798:	6011      	str	r1, [r2, #0]
 800479a:	d1e0      	bne.n	800475e <_free_r+0x26>
 800479c:	681c      	ldr	r4, [r3, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	6053      	str	r3, [r2, #4]
 80047a2:	440c      	add	r4, r1
 80047a4:	6014      	str	r4, [r2, #0]
 80047a6:	e7da      	b.n	800475e <_free_r+0x26>
 80047a8:	d902      	bls.n	80047b0 <_free_r+0x78>
 80047aa:	230c      	movs	r3, #12
 80047ac:	6003      	str	r3, [r0, #0]
 80047ae:	e7d6      	b.n	800475e <_free_r+0x26>
 80047b0:	6825      	ldr	r5, [r4, #0]
 80047b2:	1961      	adds	r1, r4, r5
 80047b4:	428b      	cmp	r3, r1
 80047b6:	bf04      	itt	eq
 80047b8:	6819      	ldreq	r1, [r3, #0]
 80047ba:	685b      	ldreq	r3, [r3, #4]
 80047bc:	6063      	str	r3, [r4, #4]
 80047be:	bf04      	itt	eq
 80047c0:	1949      	addeq	r1, r1, r5
 80047c2:	6021      	streq	r1, [r4, #0]
 80047c4:	6054      	str	r4, [r2, #4]
 80047c6:	e7ca      	b.n	800475e <_free_r+0x26>
 80047c8:	b003      	add	sp, #12
 80047ca:	bd30      	pop	{r4, r5, pc}
 80047cc:	2000035c 	.word	0x2000035c

080047d0 <sbrk_aligned>:
 80047d0:	b570      	push	{r4, r5, r6, lr}
 80047d2:	4e0e      	ldr	r6, [pc, #56]	; (800480c <sbrk_aligned+0x3c>)
 80047d4:	460c      	mov	r4, r1
 80047d6:	6831      	ldr	r1, [r6, #0]
 80047d8:	4605      	mov	r5, r0
 80047da:	b911      	cbnz	r1, 80047e2 <sbrk_aligned+0x12>
 80047dc:	f000 ff3a 	bl	8005654 <_sbrk_r>
 80047e0:	6030      	str	r0, [r6, #0]
 80047e2:	4621      	mov	r1, r4
 80047e4:	4628      	mov	r0, r5
 80047e6:	f000 ff35 	bl	8005654 <_sbrk_r>
 80047ea:	1c43      	adds	r3, r0, #1
 80047ec:	d00a      	beq.n	8004804 <sbrk_aligned+0x34>
 80047ee:	1cc4      	adds	r4, r0, #3
 80047f0:	f024 0403 	bic.w	r4, r4, #3
 80047f4:	42a0      	cmp	r0, r4
 80047f6:	d007      	beq.n	8004808 <sbrk_aligned+0x38>
 80047f8:	1a21      	subs	r1, r4, r0
 80047fa:	4628      	mov	r0, r5
 80047fc:	f000 ff2a 	bl	8005654 <_sbrk_r>
 8004800:	3001      	adds	r0, #1
 8004802:	d101      	bne.n	8004808 <sbrk_aligned+0x38>
 8004804:	f04f 34ff 	mov.w	r4, #4294967295
 8004808:	4620      	mov	r0, r4
 800480a:	bd70      	pop	{r4, r5, r6, pc}
 800480c:	20000360 	.word	0x20000360

08004810 <_malloc_r>:
 8004810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004814:	1ccd      	adds	r5, r1, #3
 8004816:	f025 0503 	bic.w	r5, r5, #3
 800481a:	3508      	adds	r5, #8
 800481c:	2d0c      	cmp	r5, #12
 800481e:	bf38      	it	cc
 8004820:	250c      	movcc	r5, #12
 8004822:	2d00      	cmp	r5, #0
 8004824:	4607      	mov	r7, r0
 8004826:	db01      	blt.n	800482c <_malloc_r+0x1c>
 8004828:	42a9      	cmp	r1, r5
 800482a:	d905      	bls.n	8004838 <_malloc_r+0x28>
 800482c:	230c      	movs	r3, #12
 800482e:	603b      	str	r3, [r7, #0]
 8004830:	2600      	movs	r6, #0
 8004832:	4630      	mov	r0, r6
 8004834:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004838:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800490c <_malloc_r+0xfc>
 800483c:	f000 f868 	bl	8004910 <__malloc_lock>
 8004840:	f8d8 3000 	ldr.w	r3, [r8]
 8004844:	461c      	mov	r4, r3
 8004846:	bb5c      	cbnz	r4, 80048a0 <_malloc_r+0x90>
 8004848:	4629      	mov	r1, r5
 800484a:	4638      	mov	r0, r7
 800484c:	f7ff ffc0 	bl	80047d0 <sbrk_aligned>
 8004850:	1c43      	adds	r3, r0, #1
 8004852:	4604      	mov	r4, r0
 8004854:	d155      	bne.n	8004902 <_malloc_r+0xf2>
 8004856:	f8d8 4000 	ldr.w	r4, [r8]
 800485a:	4626      	mov	r6, r4
 800485c:	2e00      	cmp	r6, #0
 800485e:	d145      	bne.n	80048ec <_malloc_r+0xdc>
 8004860:	2c00      	cmp	r4, #0
 8004862:	d048      	beq.n	80048f6 <_malloc_r+0xe6>
 8004864:	6823      	ldr	r3, [r4, #0]
 8004866:	4631      	mov	r1, r6
 8004868:	4638      	mov	r0, r7
 800486a:	eb04 0903 	add.w	r9, r4, r3
 800486e:	f000 fef1 	bl	8005654 <_sbrk_r>
 8004872:	4581      	cmp	r9, r0
 8004874:	d13f      	bne.n	80048f6 <_malloc_r+0xe6>
 8004876:	6821      	ldr	r1, [r4, #0]
 8004878:	1a6d      	subs	r5, r5, r1
 800487a:	4629      	mov	r1, r5
 800487c:	4638      	mov	r0, r7
 800487e:	f7ff ffa7 	bl	80047d0 <sbrk_aligned>
 8004882:	3001      	adds	r0, #1
 8004884:	d037      	beq.n	80048f6 <_malloc_r+0xe6>
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	442b      	add	r3, r5
 800488a:	6023      	str	r3, [r4, #0]
 800488c:	f8d8 3000 	ldr.w	r3, [r8]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d038      	beq.n	8004906 <_malloc_r+0xf6>
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	42a2      	cmp	r2, r4
 8004898:	d12b      	bne.n	80048f2 <_malloc_r+0xe2>
 800489a:	2200      	movs	r2, #0
 800489c:	605a      	str	r2, [r3, #4]
 800489e:	e00f      	b.n	80048c0 <_malloc_r+0xb0>
 80048a0:	6822      	ldr	r2, [r4, #0]
 80048a2:	1b52      	subs	r2, r2, r5
 80048a4:	d41f      	bmi.n	80048e6 <_malloc_r+0xd6>
 80048a6:	2a0b      	cmp	r2, #11
 80048a8:	d917      	bls.n	80048da <_malloc_r+0xca>
 80048aa:	1961      	adds	r1, r4, r5
 80048ac:	42a3      	cmp	r3, r4
 80048ae:	6025      	str	r5, [r4, #0]
 80048b0:	bf18      	it	ne
 80048b2:	6059      	strne	r1, [r3, #4]
 80048b4:	6863      	ldr	r3, [r4, #4]
 80048b6:	bf08      	it	eq
 80048b8:	f8c8 1000 	streq.w	r1, [r8]
 80048bc:	5162      	str	r2, [r4, r5]
 80048be:	604b      	str	r3, [r1, #4]
 80048c0:	4638      	mov	r0, r7
 80048c2:	f104 060b 	add.w	r6, r4, #11
 80048c6:	f000 f829 	bl	800491c <__malloc_unlock>
 80048ca:	f026 0607 	bic.w	r6, r6, #7
 80048ce:	1d23      	adds	r3, r4, #4
 80048d0:	1af2      	subs	r2, r6, r3
 80048d2:	d0ae      	beq.n	8004832 <_malloc_r+0x22>
 80048d4:	1b9b      	subs	r3, r3, r6
 80048d6:	50a3      	str	r3, [r4, r2]
 80048d8:	e7ab      	b.n	8004832 <_malloc_r+0x22>
 80048da:	42a3      	cmp	r3, r4
 80048dc:	6862      	ldr	r2, [r4, #4]
 80048de:	d1dd      	bne.n	800489c <_malloc_r+0x8c>
 80048e0:	f8c8 2000 	str.w	r2, [r8]
 80048e4:	e7ec      	b.n	80048c0 <_malloc_r+0xb0>
 80048e6:	4623      	mov	r3, r4
 80048e8:	6864      	ldr	r4, [r4, #4]
 80048ea:	e7ac      	b.n	8004846 <_malloc_r+0x36>
 80048ec:	4634      	mov	r4, r6
 80048ee:	6876      	ldr	r6, [r6, #4]
 80048f0:	e7b4      	b.n	800485c <_malloc_r+0x4c>
 80048f2:	4613      	mov	r3, r2
 80048f4:	e7cc      	b.n	8004890 <_malloc_r+0x80>
 80048f6:	230c      	movs	r3, #12
 80048f8:	603b      	str	r3, [r7, #0]
 80048fa:	4638      	mov	r0, r7
 80048fc:	f000 f80e 	bl	800491c <__malloc_unlock>
 8004900:	e797      	b.n	8004832 <_malloc_r+0x22>
 8004902:	6025      	str	r5, [r4, #0]
 8004904:	e7dc      	b.n	80048c0 <_malloc_r+0xb0>
 8004906:	605b      	str	r3, [r3, #4]
 8004908:	deff      	udf	#255	; 0xff
 800490a:	bf00      	nop
 800490c:	2000035c 	.word	0x2000035c

08004910 <__malloc_lock>:
 8004910:	4801      	ldr	r0, [pc, #4]	; (8004918 <__malloc_lock+0x8>)
 8004912:	f7ff bf0f 	b.w	8004734 <__retarget_lock_acquire_recursive>
 8004916:	bf00      	nop
 8004918:	20000358 	.word	0x20000358

0800491c <__malloc_unlock>:
 800491c:	4801      	ldr	r0, [pc, #4]	; (8004924 <__malloc_unlock+0x8>)
 800491e:	f7ff bf0a 	b.w	8004736 <__retarget_lock_release_recursive>
 8004922:	bf00      	nop
 8004924:	20000358 	.word	0x20000358

08004928 <__ssputs_r>:
 8004928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800492c:	688e      	ldr	r6, [r1, #8]
 800492e:	461f      	mov	r7, r3
 8004930:	42be      	cmp	r6, r7
 8004932:	680b      	ldr	r3, [r1, #0]
 8004934:	4682      	mov	sl, r0
 8004936:	460c      	mov	r4, r1
 8004938:	4690      	mov	r8, r2
 800493a:	d82c      	bhi.n	8004996 <__ssputs_r+0x6e>
 800493c:	898a      	ldrh	r2, [r1, #12]
 800493e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004942:	d026      	beq.n	8004992 <__ssputs_r+0x6a>
 8004944:	6965      	ldr	r5, [r4, #20]
 8004946:	6909      	ldr	r1, [r1, #16]
 8004948:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800494c:	eba3 0901 	sub.w	r9, r3, r1
 8004950:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004954:	1c7b      	adds	r3, r7, #1
 8004956:	444b      	add	r3, r9
 8004958:	106d      	asrs	r5, r5, #1
 800495a:	429d      	cmp	r5, r3
 800495c:	bf38      	it	cc
 800495e:	461d      	movcc	r5, r3
 8004960:	0553      	lsls	r3, r2, #21
 8004962:	d527      	bpl.n	80049b4 <__ssputs_r+0x8c>
 8004964:	4629      	mov	r1, r5
 8004966:	f7ff ff53 	bl	8004810 <_malloc_r>
 800496a:	4606      	mov	r6, r0
 800496c:	b360      	cbz	r0, 80049c8 <__ssputs_r+0xa0>
 800496e:	6921      	ldr	r1, [r4, #16]
 8004970:	464a      	mov	r2, r9
 8004972:	f000 fe7f 	bl	8005674 <memcpy>
 8004976:	89a3      	ldrh	r3, [r4, #12]
 8004978:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800497c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004980:	81a3      	strh	r3, [r4, #12]
 8004982:	6126      	str	r6, [r4, #16]
 8004984:	6165      	str	r5, [r4, #20]
 8004986:	444e      	add	r6, r9
 8004988:	eba5 0509 	sub.w	r5, r5, r9
 800498c:	6026      	str	r6, [r4, #0]
 800498e:	60a5      	str	r5, [r4, #8]
 8004990:	463e      	mov	r6, r7
 8004992:	42be      	cmp	r6, r7
 8004994:	d900      	bls.n	8004998 <__ssputs_r+0x70>
 8004996:	463e      	mov	r6, r7
 8004998:	6820      	ldr	r0, [r4, #0]
 800499a:	4632      	mov	r2, r6
 800499c:	4641      	mov	r1, r8
 800499e:	f000 fe3e 	bl	800561e <memmove>
 80049a2:	68a3      	ldr	r3, [r4, #8]
 80049a4:	1b9b      	subs	r3, r3, r6
 80049a6:	60a3      	str	r3, [r4, #8]
 80049a8:	6823      	ldr	r3, [r4, #0]
 80049aa:	4433      	add	r3, r6
 80049ac:	6023      	str	r3, [r4, #0]
 80049ae:	2000      	movs	r0, #0
 80049b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049b4:	462a      	mov	r2, r5
 80049b6:	f000 fe6b 	bl	8005690 <_realloc_r>
 80049ba:	4606      	mov	r6, r0
 80049bc:	2800      	cmp	r0, #0
 80049be:	d1e0      	bne.n	8004982 <__ssputs_r+0x5a>
 80049c0:	6921      	ldr	r1, [r4, #16]
 80049c2:	4650      	mov	r0, sl
 80049c4:	f7ff feb8 	bl	8004738 <_free_r>
 80049c8:	230c      	movs	r3, #12
 80049ca:	f8ca 3000 	str.w	r3, [sl]
 80049ce:	89a3      	ldrh	r3, [r4, #12]
 80049d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049d4:	81a3      	strh	r3, [r4, #12]
 80049d6:	f04f 30ff 	mov.w	r0, #4294967295
 80049da:	e7e9      	b.n	80049b0 <__ssputs_r+0x88>

080049dc <_svfiprintf_r>:
 80049dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049e0:	4698      	mov	r8, r3
 80049e2:	898b      	ldrh	r3, [r1, #12]
 80049e4:	061b      	lsls	r3, r3, #24
 80049e6:	b09d      	sub	sp, #116	; 0x74
 80049e8:	4607      	mov	r7, r0
 80049ea:	460d      	mov	r5, r1
 80049ec:	4614      	mov	r4, r2
 80049ee:	d50e      	bpl.n	8004a0e <_svfiprintf_r+0x32>
 80049f0:	690b      	ldr	r3, [r1, #16]
 80049f2:	b963      	cbnz	r3, 8004a0e <_svfiprintf_r+0x32>
 80049f4:	2140      	movs	r1, #64	; 0x40
 80049f6:	f7ff ff0b 	bl	8004810 <_malloc_r>
 80049fa:	6028      	str	r0, [r5, #0]
 80049fc:	6128      	str	r0, [r5, #16]
 80049fe:	b920      	cbnz	r0, 8004a0a <_svfiprintf_r+0x2e>
 8004a00:	230c      	movs	r3, #12
 8004a02:	603b      	str	r3, [r7, #0]
 8004a04:	f04f 30ff 	mov.w	r0, #4294967295
 8004a08:	e0d0      	b.n	8004bac <_svfiprintf_r+0x1d0>
 8004a0a:	2340      	movs	r3, #64	; 0x40
 8004a0c:	616b      	str	r3, [r5, #20]
 8004a0e:	2300      	movs	r3, #0
 8004a10:	9309      	str	r3, [sp, #36]	; 0x24
 8004a12:	2320      	movs	r3, #32
 8004a14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a18:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a1c:	2330      	movs	r3, #48	; 0x30
 8004a1e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004bc4 <_svfiprintf_r+0x1e8>
 8004a22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a26:	f04f 0901 	mov.w	r9, #1
 8004a2a:	4623      	mov	r3, r4
 8004a2c:	469a      	mov	sl, r3
 8004a2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a32:	b10a      	cbz	r2, 8004a38 <_svfiprintf_r+0x5c>
 8004a34:	2a25      	cmp	r2, #37	; 0x25
 8004a36:	d1f9      	bne.n	8004a2c <_svfiprintf_r+0x50>
 8004a38:	ebba 0b04 	subs.w	fp, sl, r4
 8004a3c:	d00b      	beq.n	8004a56 <_svfiprintf_r+0x7a>
 8004a3e:	465b      	mov	r3, fp
 8004a40:	4622      	mov	r2, r4
 8004a42:	4629      	mov	r1, r5
 8004a44:	4638      	mov	r0, r7
 8004a46:	f7ff ff6f 	bl	8004928 <__ssputs_r>
 8004a4a:	3001      	adds	r0, #1
 8004a4c:	f000 80a9 	beq.w	8004ba2 <_svfiprintf_r+0x1c6>
 8004a50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a52:	445a      	add	r2, fp
 8004a54:	9209      	str	r2, [sp, #36]	; 0x24
 8004a56:	f89a 3000 	ldrb.w	r3, [sl]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 80a1 	beq.w	8004ba2 <_svfiprintf_r+0x1c6>
 8004a60:	2300      	movs	r3, #0
 8004a62:	f04f 32ff 	mov.w	r2, #4294967295
 8004a66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a6a:	f10a 0a01 	add.w	sl, sl, #1
 8004a6e:	9304      	str	r3, [sp, #16]
 8004a70:	9307      	str	r3, [sp, #28]
 8004a72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a76:	931a      	str	r3, [sp, #104]	; 0x68
 8004a78:	4654      	mov	r4, sl
 8004a7a:	2205      	movs	r2, #5
 8004a7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a80:	4850      	ldr	r0, [pc, #320]	; (8004bc4 <_svfiprintf_r+0x1e8>)
 8004a82:	f7fb fbcd 	bl	8000220 <memchr>
 8004a86:	9a04      	ldr	r2, [sp, #16]
 8004a88:	b9d8      	cbnz	r0, 8004ac2 <_svfiprintf_r+0xe6>
 8004a8a:	06d0      	lsls	r0, r2, #27
 8004a8c:	bf44      	itt	mi
 8004a8e:	2320      	movmi	r3, #32
 8004a90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a94:	0711      	lsls	r1, r2, #28
 8004a96:	bf44      	itt	mi
 8004a98:	232b      	movmi	r3, #43	; 0x2b
 8004a9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a9e:	f89a 3000 	ldrb.w	r3, [sl]
 8004aa2:	2b2a      	cmp	r3, #42	; 0x2a
 8004aa4:	d015      	beq.n	8004ad2 <_svfiprintf_r+0xf6>
 8004aa6:	9a07      	ldr	r2, [sp, #28]
 8004aa8:	4654      	mov	r4, sl
 8004aaa:	2000      	movs	r0, #0
 8004aac:	f04f 0c0a 	mov.w	ip, #10
 8004ab0:	4621      	mov	r1, r4
 8004ab2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ab6:	3b30      	subs	r3, #48	; 0x30
 8004ab8:	2b09      	cmp	r3, #9
 8004aba:	d94d      	bls.n	8004b58 <_svfiprintf_r+0x17c>
 8004abc:	b1b0      	cbz	r0, 8004aec <_svfiprintf_r+0x110>
 8004abe:	9207      	str	r2, [sp, #28]
 8004ac0:	e014      	b.n	8004aec <_svfiprintf_r+0x110>
 8004ac2:	eba0 0308 	sub.w	r3, r0, r8
 8004ac6:	fa09 f303 	lsl.w	r3, r9, r3
 8004aca:	4313      	orrs	r3, r2
 8004acc:	9304      	str	r3, [sp, #16]
 8004ace:	46a2      	mov	sl, r4
 8004ad0:	e7d2      	b.n	8004a78 <_svfiprintf_r+0x9c>
 8004ad2:	9b03      	ldr	r3, [sp, #12]
 8004ad4:	1d19      	adds	r1, r3, #4
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	9103      	str	r1, [sp, #12]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	bfbb      	ittet	lt
 8004ade:	425b      	neglt	r3, r3
 8004ae0:	f042 0202 	orrlt.w	r2, r2, #2
 8004ae4:	9307      	strge	r3, [sp, #28]
 8004ae6:	9307      	strlt	r3, [sp, #28]
 8004ae8:	bfb8      	it	lt
 8004aea:	9204      	strlt	r2, [sp, #16]
 8004aec:	7823      	ldrb	r3, [r4, #0]
 8004aee:	2b2e      	cmp	r3, #46	; 0x2e
 8004af0:	d10c      	bne.n	8004b0c <_svfiprintf_r+0x130>
 8004af2:	7863      	ldrb	r3, [r4, #1]
 8004af4:	2b2a      	cmp	r3, #42	; 0x2a
 8004af6:	d134      	bne.n	8004b62 <_svfiprintf_r+0x186>
 8004af8:	9b03      	ldr	r3, [sp, #12]
 8004afa:	1d1a      	adds	r2, r3, #4
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	9203      	str	r2, [sp, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	bfb8      	it	lt
 8004b04:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b08:	3402      	adds	r4, #2
 8004b0a:	9305      	str	r3, [sp, #20]
 8004b0c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004bd4 <_svfiprintf_r+0x1f8>
 8004b10:	7821      	ldrb	r1, [r4, #0]
 8004b12:	2203      	movs	r2, #3
 8004b14:	4650      	mov	r0, sl
 8004b16:	f7fb fb83 	bl	8000220 <memchr>
 8004b1a:	b138      	cbz	r0, 8004b2c <_svfiprintf_r+0x150>
 8004b1c:	9b04      	ldr	r3, [sp, #16]
 8004b1e:	eba0 000a 	sub.w	r0, r0, sl
 8004b22:	2240      	movs	r2, #64	; 0x40
 8004b24:	4082      	lsls	r2, r0
 8004b26:	4313      	orrs	r3, r2
 8004b28:	3401      	adds	r4, #1
 8004b2a:	9304      	str	r3, [sp, #16]
 8004b2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b30:	4825      	ldr	r0, [pc, #148]	; (8004bc8 <_svfiprintf_r+0x1ec>)
 8004b32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b36:	2206      	movs	r2, #6
 8004b38:	f7fb fb72 	bl	8000220 <memchr>
 8004b3c:	2800      	cmp	r0, #0
 8004b3e:	d038      	beq.n	8004bb2 <_svfiprintf_r+0x1d6>
 8004b40:	4b22      	ldr	r3, [pc, #136]	; (8004bcc <_svfiprintf_r+0x1f0>)
 8004b42:	bb1b      	cbnz	r3, 8004b8c <_svfiprintf_r+0x1b0>
 8004b44:	9b03      	ldr	r3, [sp, #12]
 8004b46:	3307      	adds	r3, #7
 8004b48:	f023 0307 	bic.w	r3, r3, #7
 8004b4c:	3308      	adds	r3, #8
 8004b4e:	9303      	str	r3, [sp, #12]
 8004b50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b52:	4433      	add	r3, r6
 8004b54:	9309      	str	r3, [sp, #36]	; 0x24
 8004b56:	e768      	b.n	8004a2a <_svfiprintf_r+0x4e>
 8004b58:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b5c:	460c      	mov	r4, r1
 8004b5e:	2001      	movs	r0, #1
 8004b60:	e7a6      	b.n	8004ab0 <_svfiprintf_r+0xd4>
 8004b62:	2300      	movs	r3, #0
 8004b64:	3401      	adds	r4, #1
 8004b66:	9305      	str	r3, [sp, #20]
 8004b68:	4619      	mov	r1, r3
 8004b6a:	f04f 0c0a 	mov.w	ip, #10
 8004b6e:	4620      	mov	r0, r4
 8004b70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b74:	3a30      	subs	r2, #48	; 0x30
 8004b76:	2a09      	cmp	r2, #9
 8004b78:	d903      	bls.n	8004b82 <_svfiprintf_r+0x1a6>
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d0c6      	beq.n	8004b0c <_svfiprintf_r+0x130>
 8004b7e:	9105      	str	r1, [sp, #20]
 8004b80:	e7c4      	b.n	8004b0c <_svfiprintf_r+0x130>
 8004b82:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b86:	4604      	mov	r4, r0
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e7f0      	b.n	8004b6e <_svfiprintf_r+0x192>
 8004b8c:	ab03      	add	r3, sp, #12
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	462a      	mov	r2, r5
 8004b92:	4b0f      	ldr	r3, [pc, #60]	; (8004bd0 <_svfiprintf_r+0x1f4>)
 8004b94:	a904      	add	r1, sp, #16
 8004b96:	4638      	mov	r0, r7
 8004b98:	f3af 8000 	nop.w
 8004b9c:	1c42      	adds	r2, r0, #1
 8004b9e:	4606      	mov	r6, r0
 8004ba0:	d1d6      	bne.n	8004b50 <_svfiprintf_r+0x174>
 8004ba2:	89ab      	ldrh	r3, [r5, #12]
 8004ba4:	065b      	lsls	r3, r3, #25
 8004ba6:	f53f af2d 	bmi.w	8004a04 <_svfiprintf_r+0x28>
 8004baa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004bac:	b01d      	add	sp, #116	; 0x74
 8004bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bb2:	ab03      	add	r3, sp, #12
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	462a      	mov	r2, r5
 8004bb8:	4b05      	ldr	r3, [pc, #20]	; (8004bd0 <_svfiprintf_r+0x1f4>)
 8004bba:	a904      	add	r1, sp, #16
 8004bbc:	4638      	mov	r0, r7
 8004bbe:	f000 fa4b 	bl	8005058 <_printf_i>
 8004bc2:	e7eb      	b.n	8004b9c <_svfiprintf_r+0x1c0>
 8004bc4:	0800595c 	.word	0x0800595c
 8004bc8:	08005966 	.word	0x08005966
 8004bcc:	00000000 	.word	0x00000000
 8004bd0:	08004929 	.word	0x08004929
 8004bd4:	08005962 	.word	0x08005962

08004bd8 <_sungetc_r>:
 8004bd8:	b538      	push	{r3, r4, r5, lr}
 8004bda:	1c4b      	adds	r3, r1, #1
 8004bdc:	4614      	mov	r4, r2
 8004bde:	d103      	bne.n	8004be8 <_sungetc_r+0x10>
 8004be0:	f04f 35ff 	mov.w	r5, #4294967295
 8004be4:	4628      	mov	r0, r5
 8004be6:	bd38      	pop	{r3, r4, r5, pc}
 8004be8:	8993      	ldrh	r3, [r2, #12]
 8004bea:	f023 0320 	bic.w	r3, r3, #32
 8004bee:	8193      	strh	r3, [r2, #12]
 8004bf0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004bf2:	6852      	ldr	r2, [r2, #4]
 8004bf4:	b2cd      	uxtb	r5, r1
 8004bf6:	b18b      	cbz	r3, 8004c1c <_sungetc_r+0x44>
 8004bf8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	dd08      	ble.n	8004c10 <_sungetc_r+0x38>
 8004bfe:	6823      	ldr	r3, [r4, #0]
 8004c00:	1e5a      	subs	r2, r3, #1
 8004c02:	6022      	str	r2, [r4, #0]
 8004c04:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004c08:	6863      	ldr	r3, [r4, #4]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	6063      	str	r3, [r4, #4]
 8004c0e:	e7e9      	b.n	8004be4 <_sungetc_r+0xc>
 8004c10:	4621      	mov	r1, r4
 8004c12:	f000 fcca 	bl	80055aa <__submore>
 8004c16:	2800      	cmp	r0, #0
 8004c18:	d0f1      	beq.n	8004bfe <_sungetc_r+0x26>
 8004c1a:	e7e1      	b.n	8004be0 <_sungetc_r+0x8>
 8004c1c:	6921      	ldr	r1, [r4, #16]
 8004c1e:	6823      	ldr	r3, [r4, #0]
 8004c20:	b151      	cbz	r1, 8004c38 <_sungetc_r+0x60>
 8004c22:	4299      	cmp	r1, r3
 8004c24:	d208      	bcs.n	8004c38 <_sungetc_r+0x60>
 8004c26:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004c2a:	42a9      	cmp	r1, r5
 8004c2c:	d104      	bne.n	8004c38 <_sungetc_r+0x60>
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	3201      	adds	r2, #1
 8004c32:	6023      	str	r3, [r4, #0]
 8004c34:	6062      	str	r2, [r4, #4]
 8004c36:	e7d5      	b.n	8004be4 <_sungetc_r+0xc>
 8004c38:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004c3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c40:	6363      	str	r3, [r4, #52]	; 0x34
 8004c42:	2303      	movs	r3, #3
 8004c44:	63a3      	str	r3, [r4, #56]	; 0x38
 8004c46:	4623      	mov	r3, r4
 8004c48:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004c4c:	6023      	str	r3, [r4, #0]
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e7dc      	b.n	8004c0c <_sungetc_r+0x34>

08004c52 <__ssrefill_r>:
 8004c52:	b510      	push	{r4, lr}
 8004c54:	460c      	mov	r4, r1
 8004c56:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004c58:	b169      	cbz	r1, 8004c76 <__ssrefill_r+0x24>
 8004c5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c5e:	4299      	cmp	r1, r3
 8004c60:	d001      	beq.n	8004c66 <__ssrefill_r+0x14>
 8004c62:	f7ff fd69 	bl	8004738 <_free_r>
 8004c66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c68:	6063      	str	r3, [r4, #4]
 8004c6a:	2000      	movs	r0, #0
 8004c6c:	6360      	str	r0, [r4, #52]	; 0x34
 8004c6e:	b113      	cbz	r3, 8004c76 <__ssrefill_r+0x24>
 8004c70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004c72:	6023      	str	r3, [r4, #0]
 8004c74:	bd10      	pop	{r4, pc}
 8004c76:	6923      	ldr	r3, [r4, #16]
 8004c78:	6023      	str	r3, [r4, #0]
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	6063      	str	r3, [r4, #4]
 8004c7e:	89a3      	ldrh	r3, [r4, #12]
 8004c80:	f043 0320 	orr.w	r3, r3, #32
 8004c84:	81a3      	strh	r3, [r4, #12]
 8004c86:	f04f 30ff 	mov.w	r0, #4294967295
 8004c8a:	e7f3      	b.n	8004c74 <__ssrefill_r+0x22>

08004c8c <__ssvfiscanf_r>:
 8004c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c90:	460c      	mov	r4, r1
 8004c92:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8004c96:	2100      	movs	r1, #0
 8004c98:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8004c9c:	49a6      	ldr	r1, [pc, #664]	; (8004f38 <__ssvfiscanf_r+0x2ac>)
 8004c9e:	91a0      	str	r1, [sp, #640]	; 0x280
 8004ca0:	f10d 0804 	add.w	r8, sp, #4
 8004ca4:	49a5      	ldr	r1, [pc, #660]	; (8004f3c <__ssvfiscanf_r+0x2b0>)
 8004ca6:	4fa6      	ldr	r7, [pc, #664]	; (8004f40 <__ssvfiscanf_r+0x2b4>)
 8004ca8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8004f44 <__ssvfiscanf_r+0x2b8>
 8004cac:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8004cb0:	4606      	mov	r6, r0
 8004cb2:	91a1      	str	r1, [sp, #644]	; 0x284
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	7813      	ldrb	r3, [r2, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 815a 	beq.w	8004f72 <__ssvfiscanf_r+0x2e6>
 8004cbe:	5cf9      	ldrb	r1, [r7, r3]
 8004cc0:	f011 0108 	ands.w	r1, r1, #8
 8004cc4:	f102 0501 	add.w	r5, r2, #1
 8004cc8:	d019      	beq.n	8004cfe <__ssvfiscanf_r+0x72>
 8004cca:	6863      	ldr	r3, [r4, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	dd0f      	ble.n	8004cf0 <__ssvfiscanf_r+0x64>
 8004cd0:	6823      	ldr	r3, [r4, #0]
 8004cd2:	781a      	ldrb	r2, [r3, #0]
 8004cd4:	5cba      	ldrb	r2, [r7, r2]
 8004cd6:	0712      	lsls	r2, r2, #28
 8004cd8:	d401      	bmi.n	8004cde <__ssvfiscanf_r+0x52>
 8004cda:	462a      	mov	r2, r5
 8004cdc:	e7eb      	b.n	8004cb6 <__ssvfiscanf_r+0x2a>
 8004cde:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004ce0:	3201      	adds	r2, #1
 8004ce2:	9245      	str	r2, [sp, #276]	; 0x114
 8004ce4:	6862      	ldr	r2, [r4, #4]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	3a01      	subs	r2, #1
 8004cea:	6062      	str	r2, [r4, #4]
 8004cec:	6023      	str	r3, [r4, #0]
 8004cee:	e7ec      	b.n	8004cca <__ssvfiscanf_r+0x3e>
 8004cf0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004cf2:	4621      	mov	r1, r4
 8004cf4:	4630      	mov	r0, r6
 8004cf6:	4798      	blx	r3
 8004cf8:	2800      	cmp	r0, #0
 8004cfa:	d0e9      	beq.n	8004cd0 <__ssvfiscanf_r+0x44>
 8004cfc:	e7ed      	b.n	8004cda <__ssvfiscanf_r+0x4e>
 8004cfe:	2b25      	cmp	r3, #37	; 0x25
 8004d00:	d012      	beq.n	8004d28 <__ssvfiscanf_r+0x9c>
 8004d02:	469a      	mov	sl, r3
 8004d04:	6863      	ldr	r3, [r4, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f340 8091 	ble.w	8004e2e <__ssvfiscanf_r+0x1a2>
 8004d0c:	6822      	ldr	r2, [r4, #0]
 8004d0e:	7813      	ldrb	r3, [r2, #0]
 8004d10:	4553      	cmp	r3, sl
 8004d12:	f040 812e 	bne.w	8004f72 <__ssvfiscanf_r+0x2e6>
 8004d16:	6863      	ldr	r3, [r4, #4]
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	6063      	str	r3, [r4, #4]
 8004d1c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004d1e:	3201      	adds	r2, #1
 8004d20:	3301      	adds	r3, #1
 8004d22:	6022      	str	r2, [r4, #0]
 8004d24:	9345      	str	r3, [sp, #276]	; 0x114
 8004d26:	e7d8      	b.n	8004cda <__ssvfiscanf_r+0x4e>
 8004d28:	9141      	str	r1, [sp, #260]	; 0x104
 8004d2a:	9143      	str	r1, [sp, #268]	; 0x10c
 8004d2c:	7853      	ldrb	r3, [r2, #1]
 8004d2e:	2b2a      	cmp	r3, #42	; 0x2a
 8004d30:	bf02      	ittt	eq
 8004d32:	2310      	moveq	r3, #16
 8004d34:	1c95      	addeq	r5, r2, #2
 8004d36:	9341      	streq	r3, [sp, #260]	; 0x104
 8004d38:	220a      	movs	r2, #10
 8004d3a:	46aa      	mov	sl, r5
 8004d3c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8004d40:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8004d44:	2b09      	cmp	r3, #9
 8004d46:	d91c      	bls.n	8004d82 <__ssvfiscanf_r+0xf6>
 8004d48:	487e      	ldr	r0, [pc, #504]	; (8004f44 <__ssvfiscanf_r+0x2b8>)
 8004d4a:	2203      	movs	r2, #3
 8004d4c:	f7fb fa68 	bl	8000220 <memchr>
 8004d50:	b138      	cbz	r0, 8004d62 <__ssvfiscanf_r+0xd6>
 8004d52:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004d54:	eba0 0009 	sub.w	r0, r0, r9
 8004d58:	2301      	movs	r3, #1
 8004d5a:	4083      	lsls	r3, r0
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	9341      	str	r3, [sp, #260]	; 0x104
 8004d60:	4655      	mov	r5, sl
 8004d62:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004d66:	2b78      	cmp	r3, #120	; 0x78
 8004d68:	d806      	bhi.n	8004d78 <__ssvfiscanf_r+0xec>
 8004d6a:	2b57      	cmp	r3, #87	; 0x57
 8004d6c:	d810      	bhi.n	8004d90 <__ssvfiscanf_r+0x104>
 8004d6e:	2b25      	cmp	r3, #37	; 0x25
 8004d70:	d0c7      	beq.n	8004d02 <__ssvfiscanf_r+0x76>
 8004d72:	d857      	bhi.n	8004e24 <__ssvfiscanf_r+0x198>
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d065      	beq.n	8004e44 <__ssvfiscanf_r+0x1b8>
 8004d78:	2303      	movs	r3, #3
 8004d7a:	9347      	str	r3, [sp, #284]	; 0x11c
 8004d7c:	230a      	movs	r3, #10
 8004d7e:	9342      	str	r3, [sp, #264]	; 0x108
 8004d80:	e076      	b.n	8004e70 <__ssvfiscanf_r+0x1e4>
 8004d82:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004d84:	fb02 1103 	mla	r1, r2, r3, r1
 8004d88:	3930      	subs	r1, #48	; 0x30
 8004d8a:	9143      	str	r1, [sp, #268]	; 0x10c
 8004d8c:	4655      	mov	r5, sl
 8004d8e:	e7d4      	b.n	8004d3a <__ssvfiscanf_r+0xae>
 8004d90:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8004d94:	2a20      	cmp	r2, #32
 8004d96:	d8ef      	bhi.n	8004d78 <__ssvfiscanf_r+0xec>
 8004d98:	a101      	add	r1, pc, #4	; (adr r1, 8004da0 <__ssvfiscanf_r+0x114>)
 8004d9a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004d9e:	bf00      	nop
 8004da0:	08004e53 	.word	0x08004e53
 8004da4:	08004d79 	.word	0x08004d79
 8004da8:	08004d79 	.word	0x08004d79
 8004dac:	08004eb1 	.word	0x08004eb1
 8004db0:	08004d79 	.word	0x08004d79
 8004db4:	08004d79 	.word	0x08004d79
 8004db8:	08004d79 	.word	0x08004d79
 8004dbc:	08004d79 	.word	0x08004d79
 8004dc0:	08004d79 	.word	0x08004d79
 8004dc4:	08004d79 	.word	0x08004d79
 8004dc8:	08004d79 	.word	0x08004d79
 8004dcc:	08004ec7 	.word	0x08004ec7
 8004dd0:	08004ead 	.word	0x08004ead
 8004dd4:	08004e2b 	.word	0x08004e2b
 8004dd8:	08004e2b 	.word	0x08004e2b
 8004ddc:	08004e2b 	.word	0x08004e2b
 8004de0:	08004d79 	.word	0x08004d79
 8004de4:	08004e69 	.word	0x08004e69
 8004de8:	08004d79 	.word	0x08004d79
 8004dec:	08004d79 	.word	0x08004d79
 8004df0:	08004d79 	.word	0x08004d79
 8004df4:	08004d79 	.word	0x08004d79
 8004df8:	08004ed7 	.word	0x08004ed7
 8004dfc:	08004ea5 	.word	0x08004ea5
 8004e00:	08004e4b 	.word	0x08004e4b
 8004e04:	08004d79 	.word	0x08004d79
 8004e08:	08004d79 	.word	0x08004d79
 8004e0c:	08004ed3 	.word	0x08004ed3
 8004e10:	08004d79 	.word	0x08004d79
 8004e14:	08004ead 	.word	0x08004ead
 8004e18:	08004d79 	.word	0x08004d79
 8004e1c:	08004d79 	.word	0x08004d79
 8004e20:	08004e53 	.word	0x08004e53
 8004e24:	3b45      	subs	r3, #69	; 0x45
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d8a6      	bhi.n	8004d78 <__ssvfiscanf_r+0xec>
 8004e2a:	2305      	movs	r3, #5
 8004e2c:	e01f      	b.n	8004e6e <__ssvfiscanf_r+0x1e2>
 8004e2e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004e30:	4621      	mov	r1, r4
 8004e32:	4630      	mov	r0, r6
 8004e34:	4798      	blx	r3
 8004e36:	2800      	cmp	r0, #0
 8004e38:	f43f af68 	beq.w	8004d0c <__ssvfiscanf_r+0x80>
 8004e3c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004e3e:	2800      	cmp	r0, #0
 8004e40:	f040 808d 	bne.w	8004f5e <__ssvfiscanf_r+0x2d2>
 8004e44:	f04f 30ff 	mov.w	r0, #4294967295
 8004e48:	e08f      	b.n	8004f6a <__ssvfiscanf_r+0x2de>
 8004e4a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004e4c:	f042 0220 	orr.w	r2, r2, #32
 8004e50:	9241      	str	r2, [sp, #260]	; 0x104
 8004e52:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004e54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e58:	9241      	str	r2, [sp, #260]	; 0x104
 8004e5a:	2210      	movs	r2, #16
 8004e5c:	2b6f      	cmp	r3, #111	; 0x6f
 8004e5e:	9242      	str	r2, [sp, #264]	; 0x108
 8004e60:	bf34      	ite	cc
 8004e62:	2303      	movcc	r3, #3
 8004e64:	2304      	movcs	r3, #4
 8004e66:	e002      	b.n	8004e6e <__ssvfiscanf_r+0x1e2>
 8004e68:	2300      	movs	r3, #0
 8004e6a:	9342      	str	r3, [sp, #264]	; 0x108
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	9347      	str	r3, [sp, #284]	; 0x11c
 8004e70:	6863      	ldr	r3, [r4, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	dd3d      	ble.n	8004ef2 <__ssvfiscanf_r+0x266>
 8004e76:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004e78:	0659      	lsls	r1, r3, #25
 8004e7a:	d404      	bmi.n	8004e86 <__ssvfiscanf_r+0x1fa>
 8004e7c:	6823      	ldr	r3, [r4, #0]
 8004e7e:	781a      	ldrb	r2, [r3, #0]
 8004e80:	5cba      	ldrb	r2, [r7, r2]
 8004e82:	0712      	lsls	r2, r2, #28
 8004e84:	d43c      	bmi.n	8004f00 <__ssvfiscanf_r+0x274>
 8004e86:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	dc4b      	bgt.n	8004f24 <__ssvfiscanf_r+0x298>
 8004e8c:	466b      	mov	r3, sp
 8004e8e:	4622      	mov	r2, r4
 8004e90:	a941      	add	r1, sp, #260	; 0x104
 8004e92:	4630      	mov	r0, r6
 8004e94:	f000 fa02 	bl	800529c <_scanf_chars>
 8004e98:	2801      	cmp	r0, #1
 8004e9a:	d06a      	beq.n	8004f72 <__ssvfiscanf_r+0x2e6>
 8004e9c:	2802      	cmp	r0, #2
 8004e9e:	f47f af1c 	bne.w	8004cda <__ssvfiscanf_r+0x4e>
 8004ea2:	e7cb      	b.n	8004e3c <__ssvfiscanf_r+0x1b0>
 8004ea4:	2308      	movs	r3, #8
 8004ea6:	9342      	str	r3, [sp, #264]	; 0x108
 8004ea8:	2304      	movs	r3, #4
 8004eaa:	e7e0      	b.n	8004e6e <__ssvfiscanf_r+0x1e2>
 8004eac:	220a      	movs	r2, #10
 8004eae:	e7d5      	b.n	8004e5c <__ssvfiscanf_r+0x1d0>
 8004eb0:	4629      	mov	r1, r5
 8004eb2:	4640      	mov	r0, r8
 8004eb4:	f000 fb40 	bl	8005538 <__sccl>
 8004eb8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004eba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ebe:	9341      	str	r3, [sp, #260]	; 0x104
 8004ec0:	4605      	mov	r5, r0
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e7d3      	b.n	8004e6e <__ssvfiscanf_r+0x1e2>
 8004ec6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004ec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ecc:	9341      	str	r3, [sp, #260]	; 0x104
 8004ece:	2300      	movs	r3, #0
 8004ed0:	e7cd      	b.n	8004e6e <__ssvfiscanf_r+0x1e2>
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	e7cb      	b.n	8004e6e <__ssvfiscanf_r+0x1e2>
 8004ed6:	9841      	ldr	r0, [sp, #260]	; 0x104
 8004ed8:	06c3      	lsls	r3, r0, #27
 8004eda:	f53f aefe 	bmi.w	8004cda <__ssvfiscanf_r+0x4e>
 8004ede:	9b00      	ldr	r3, [sp, #0]
 8004ee0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004ee2:	1d19      	adds	r1, r3, #4
 8004ee4:	9100      	str	r1, [sp, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	07c0      	lsls	r0, r0, #31
 8004eea:	bf4c      	ite	mi
 8004eec:	801a      	strhmi	r2, [r3, #0]
 8004eee:	601a      	strpl	r2, [r3, #0]
 8004ef0:	e6f3      	b.n	8004cda <__ssvfiscanf_r+0x4e>
 8004ef2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004ef4:	4621      	mov	r1, r4
 8004ef6:	4630      	mov	r0, r6
 8004ef8:	4798      	blx	r3
 8004efa:	2800      	cmp	r0, #0
 8004efc:	d0bb      	beq.n	8004e76 <__ssvfiscanf_r+0x1ea>
 8004efe:	e79d      	b.n	8004e3c <__ssvfiscanf_r+0x1b0>
 8004f00:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004f02:	3201      	adds	r2, #1
 8004f04:	9245      	str	r2, [sp, #276]	; 0x114
 8004f06:	6862      	ldr	r2, [r4, #4]
 8004f08:	3a01      	subs	r2, #1
 8004f0a:	2a00      	cmp	r2, #0
 8004f0c:	6062      	str	r2, [r4, #4]
 8004f0e:	dd02      	ble.n	8004f16 <__ssvfiscanf_r+0x28a>
 8004f10:	3301      	adds	r3, #1
 8004f12:	6023      	str	r3, [r4, #0]
 8004f14:	e7b2      	b.n	8004e7c <__ssvfiscanf_r+0x1f0>
 8004f16:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004f18:	4621      	mov	r1, r4
 8004f1a:	4630      	mov	r0, r6
 8004f1c:	4798      	blx	r3
 8004f1e:	2800      	cmp	r0, #0
 8004f20:	d0ac      	beq.n	8004e7c <__ssvfiscanf_r+0x1f0>
 8004f22:	e78b      	b.n	8004e3c <__ssvfiscanf_r+0x1b0>
 8004f24:	2b04      	cmp	r3, #4
 8004f26:	dc0f      	bgt.n	8004f48 <__ssvfiscanf_r+0x2bc>
 8004f28:	466b      	mov	r3, sp
 8004f2a:	4622      	mov	r2, r4
 8004f2c:	a941      	add	r1, sp, #260	; 0x104
 8004f2e:	4630      	mov	r0, r6
 8004f30:	f000 fa0e 	bl	8005350 <_scanf_i>
 8004f34:	e7b0      	b.n	8004e98 <__ssvfiscanf_r+0x20c>
 8004f36:	bf00      	nop
 8004f38:	08004bd9 	.word	0x08004bd9
 8004f3c:	08004c53 	.word	0x08004c53
 8004f40:	080059ab 	.word	0x080059ab
 8004f44:	08005962 	.word	0x08005962
 8004f48:	4b0b      	ldr	r3, [pc, #44]	; (8004f78 <__ssvfiscanf_r+0x2ec>)
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f43f aec5 	beq.w	8004cda <__ssvfiscanf_r+0x4e>
 8004f50:	466b      	mov	r3, sp
 8004f52:	4622      	mov	r2, r4
 8004f54:	a941      	add	r1, sp, #260	; 0x104
 8004f56:	4630      	mov	r0, r6
 8004f58:	f3af 8000 	nop.w
 8004f5c:	e79c      	b.n	8004e98 <__ssvfiscanf_r+0x20c>
 8004f5e:	89a3      	ldrh	r3, [r4, #12]
 8004f60:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004f64:	bf18      	it	ne
 8004f66:	f04f 30ff 	movne.w	r0, #4294967295
 8004f6a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8004f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f72:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004f74:	e7f9      	b.n	8004f6a <__ssvfiscanf_r+0x2de>
 8004f76:	bf00      	nop
 8004f78:	00000000 	.word	0x00000000

08004f7c <_printf_common>:
 8004f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f80:	4616      	mov	r6, r2
 8004f82:	4699      	mov	r9, r3
 8004f84:	688a      	ldr	r2, [r1, #8]
 8004f86:	690b      	ldr	r3, [r1, #16]
 8004f88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	bfb8      	it	lt
 8004f90:	4613      	movlt	r3, r2
 8004f92:	6033      	str	r3, [r6, #0]
 8004f94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f98:	4607      	mov	r7, r0
 8004f9a:	460c      	mov	r4, r1
 8004f9c:	b10a      	cbz	r2, 8004fa2 <_printf_common+0x26>
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	6033      	str	r3, [r6, #0]
 8004fa2:	6823      	ldr	r3, [r4, #0]
 8004fa4:	0699      	lsls	r1, r3, #26
 8004fa6:	bf42      	ittt	mi
 8004fa8:	6833      	ldrmi	r3, [r6, #0]
 8004faa:	3302      	addmi	r3, #2
 8004fac:	6033      	strmi	r3, [r6, #0]
 8004fae:	6825      	ldr	r5, [r4, #0]
 8004fb0:	f015 0506 	ands.w	r5, r5, #6
 8004fb4:	d106      	bne.n	8004fc4 <_printf_common+0x48>
 8004fb6:	f104 0a19 	add.w	sl, r4, #25
 8004fba:	68e3      	ldr	r3, [r4, #12]
 8004fbc:	6832      	ldr	r2, [r6, #0]
 8004fbe:	1a9b      	subs	r3, r3, r2
 8004fc0:	42ab      	cmp	r3, r5
 8004fc2:	dc26      	bgt.n	8005012 <_printf_common+0x96>
 8004fc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004fc8:	1e13      	subs	r3, r2, #0
 8004fca:	6822      	ldr	r2, [r4, #0]
 8004fcc:	bf18      	it	ne
 8004fce:	2301      	movne	r3, #1
 8004fd0:	0692      	lsls	r2, r2, #26
 8004fd2:	d42b      	bmi.n	800502c <_printf_common+0xb0>
 8004fd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fd8:	4649      	mov	r1, r9
 8004fda:	4638      	mov	r0, r7
 8004fdc:	47c0      	blx	r8
 8004fde:	3001      	adds	r0, #1
 8004fe0:	d01e      	beq.n	8005020 <_printf_common+0xa4>
 8004fe2:	6823      	ldr	r3, [r4, #0]
 8004fe4:	6922      	ldr	r2, [r4, #16]
 8004fe6:	f003 0306 	and.w	r3, r3, #6
 8004fea:	2b04      	cmp	r3, #4
 8004fec:	bf02      	ittt	eq
 8004fee:	68e5      	ldreq	r5, [r4, #12]
 8004ff0:	6833      	ldreq	r3, [r6, #0]
 8004ff2:	1aed      	subeq	r5, r5, r3
 8004ff4:	68a3      	ldr	r3, [r4, #8]
 8004ff6:	bf0c      	ite	eq
 8004ff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ffc:	2500      	movne	r5, #0
 8004ffe:	4293      	cmp	r3, r2
 8005000:	bfc4      	itt	gt
 8005002:	1a9b      	subgt	r3, r3, r2
 8005004:	18ed      	addgt	r5, r5, r3
 8005006:	2600      	movs	r6, #0
 8005008:	341a      	adds	r4, #26
 800500a:	42b5      	cmp	r5, r6
 800500c:	d11a      	bne.n	8005044 <_printf_common+0xc8>
 800500e:	2000      	movs	r0, #0
 8005010:	e008      	b.n	8005024 <_printf_common+0xa8>
 8005012:	2301      	movs	r3, #1
 8005014:	4652      	mov	r2, sl
 8005016:	4649      	mov	r1, r9
 8005018:	4638      	mov	r0, r7
 800501a:	47c0      	blx	r8
 800501c:	3001      	adds	r0, #1
 800501e:	d103      	bne.n	8005028 <_printf_common+0xac>
 8005020:	f04f 30ff 	mov.w	r0, #4294967295
 8005024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005028:	3501      	adds	r5, #1
 800502a:	e7c6      	b.n	8004fba <_printf_common+0x3e>
 800502c:	18e1      	adds	r1, r4, r3
 800502e:	1c5a      	adds	r2, r3, #1
 8005030:	2030      	movs	r0, #48	; 0x30
 8005032:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005036:	4422      	add	r2, r4
 8005038:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800503c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005040:	3302      	adds	r3, #2
 8005042:	e7c7      	b.n	8004fd4 <_printf_common+0x58>
 8005044:	2301      	movs	r3, #1
 8005046:	4622      	mov	r2, r4
 8005048:	4649      	mov	r1, r9
 800504a:	4638      	mov	r0, r7
 800504c:	47c0      	blx	r8
 800504e:	3001      	adds	r0, #1
 8005050:	d0e6      	beq.n	8005020 <_printf_common+0xa4>
 8005052:	3601      	adds	r6, #1
 8005054:	e7d9      	b.n	800500a <_printf_common+0x8e>
	...

08005058 <_printf_i>:
 8005058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800505c:	7e0f      	ldrb	r7, [r1, #24]
 800505e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005060:	2f78      	cmp	r7, #120	; 0x78
 8005062:	4691      	mov	r9, r2
 8005064:	4680      	mov	r8, r0
 8005066:	460c      	mov	r4, r1
 8005068:	469a      	mov	sl, r3
 800506a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800506e:	d807      	bhi.n	8005080 <_printf_i+0x28>
 8005070:	2f62      	cmp	r7, #98	; 0x62
 8005072:	d80a      	bhi.n	800508a <_printf_i+0x32>
 8005074:	2f00      	cmp	r7, #0
 8005076:	f000 80d4 	beq.w	8005222 <_printf_i+0x1ca>
 800507a:	2f58      	cmp	r7, #88	; 0x58
 800507c:	f000 80c0 	beq.w	8005200 <_printf_i+0x1a8>
 8005080:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005084:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005088:	e03a      	b.n	8005100 <_printf_i+0xa8>
 800508a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800508e:	2b15      	cmp	r3, #21
 8005090:	d8f6      	bhi.n	8005080 <_printf_i+0x28>
 8005092:	a101      	add	r1, pc, #4	; (adr r1, 8005098 <_printf_i+0x40>)
 8005094:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005098:	080050f1 	.word	0x080050f1
 800509c:	08005105 	.word	0x08005105
 80050a0:	08005081 	.word	0x08005081
 80050a4:	08005081 	.word	0x08005081
 80050a8:	08005081 	.word	0x08005081
 80050ac:	08005081 	.word	0x08005081
 80050b0:	08005105 	.word	0x08005105
 80050b4:	08005081 	.word	0x08005081
 80050b8:	08005081 	.word	0x08005081
 80050bc:	08005081 	.word	0x08005081
 80050c0:	08005081 	.word	0x08005081
 80050c4:	08005209 	.word	0x08005209
 80050c8:	08005131 	.word	0x08005131
 80050cc:	080051c3 	.word	0x080051c3
 80050d0:	08005081 	.word	0x08005081
 80050d4:	08005081 	.word	0x08005081
 80050d8:	0800522b 	.word	0x0800522b
 80050dc:	08005081 	.word	0x08005081
 80050e0:	08005131 	.word	0x08005131
 80050e4:	08005081 	.word	0x08005081
 80050e8:	08005081 	.word	0x08005081
 80050ec:	080051cb 	.word	0x080051cb
 80050f0:	682b      	ldr	r3, [r5, #0]
 80050f2:	1d1a      	adds	r2, r3, #4
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	602a      	str	r2, [r5, #0]
 80050f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005100:	2301      	movs	r3, #1
 8005102:	e09f      	b.n	8005244 <_printf_i+0x1ec>
 8005104:	6820      	ldr	r0, [r4, #0]
 8005106:	682b      	ldr	r3, [r5, #0]
 8005108:	0607      	lsls	r7, r0, #24
 800510a:	f103 0104 	add.w	r1, r3, #4
 800510e:	6029      	str	r1, [r5, #0]
 8005110:	d501      	bpl.n	8005116 <_printf_i+0xbe>
 8005112:	681e      	ldr	r6, [r3, #0]
 8005114:	e003      	b.n	800511e <_printf_i+0xc6>
 8005116:	0646      	lsls	r6, r0, #25
 8005118:	d5fb      	bpl.n	8005112 <_printf_i+0xba>
 800511a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800511e:	2e00      	cmp	r6, #0
 8005120:	da03      	bge.n	800512a <_printf_i+0xd2>
 8005122:	232d      	movs	r3, #45	; 0x2d
 8005124:	4276      	negs	r6, r6
 8005126:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800512a:	485a      	ldr	r0, [pc, #360]	; (8005294 <_printf_i+0x23c>)
 800512c:	230a      	movs	r3, #10
 800512e:	e012      	b.n	8005156 <_printf_i+0xfe>
 8005130:	682b      	ldr	r3, [r5, #0]
 8005132:	6820      	ldr	r0, [r4, #0]
 8005134:	1d19      	adds	r1, r3, #4
 8005136:	6029      	str	r1, [r5, #0]
 8005138:	0605      	lsls	r5, r0, #24
 800513a:	d501      	bpl.n	8005140 <_printf_i+0xe8>
 800513c:	681e      	ldr	r6, [r3, #0]
 800513e:	e002      	b.n	8005146 <_printf_i+0xee>
 8005140:	0641      	lsls	r1, r0, #25
 8005142:	d5fb      	bpl.n	800513c <_printf_i+0xe4>
 8005144:	881e      	ldrh	r6, [r3, #0]
 8005146:	4853      	ldr	r0, [pc, #332]	; (8005294 <_printf_i+0x23c>)
 8005148:	2f6f      	cmp	r7, #111	; 0x6f
 800514a:	bf0c      	ite	eq
 800514c:	2308      	moveq	r3, #8
 800514e:	230a      	movne	r3, #10
 8005150:	2100      	movs	r1, #0
 8005152:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005156:	6865      	ldr	r5, [r4, #4]
 8005158:	60a5      	str	r5, [r4, #8]
 800515a:	2d00      	cmp	r5, #0
 800515c:	bfa2      	ittt	ge
 800515e:	6821      	ldrge	r1, [r4, #0]
 8005160:	f021 0104 	bicge.w	r1, r1, #4
 8005164:	6021      	strge	r1, [r4, #0]
 8005166:	b90e      	cbnz	r6, 800516c <_printf_i+0x114>
 8005168:	2d00      	cmp	r5, #0
 800516a:	d04b      	beq.n	8005204 <_printf_i+0x1ac>
 800516c:	4615      	mov	r5, r2
 800516e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005172:	fb03 6711 	mls	r7, r3, r1, r6
 8005176:	5dc7      	ldrb	r7, [r0, r7]
 8005178:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800517c:	4637      	mov	r7, r6
 800517e:	42bb      	cmp	r3, r7
 8005180:	460e      	mov	r6, r1
 8005182:	d9f4      	bls.n	800516e <_printf_i+0x116>
 8005184:	2b08      	cmp	r3, #8
 8005186:	d10b      	bne.n	80051a0 <_printf_i+0x148>
 8005188:	6823      	ldr	r3, [r4, #0]
 800518a:	07de      	lsls	r6, r3, #31
 800518c:	d508      	bpl.n	80051a0 <_printf_i+0x148>
 800518e:	6923      	ldr	r3, [r4, #16]
 8005190:	6861      	ldr	r1, [r4, #4]
 8005192:	4299      	cmp	r1, r3
 8005194:	bfde      	ittt	le
 8005196:	2330      	movle	r3, #48	; 0x30
 8005198:	f805 3c01 	strble.w	r3, [r5, #-1]
 800519c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80051a0:	1b52      	subs	r2, r2, r5
 80051a2:	6122      	str	r2, [r4, #16]
 80051a4:	f8cd a000 	str.w	sl, [sp]
 80051a8:	464b      	mov	r3, r9
 80051aa:	aa03      	add	r2, sp, #12
 80051ac:	4621      	mov	r1, r4
 80051ae:	4640      	mov	r0, r8
 80051b0:	f7ff fee4 	bl	8004f7c <_printf_common>
 80051b4:	3001      	adds	r0, #1
 80051b6:	d14a      	bne.n	800524e <_printf_i+0x1f6>
 80051b8:	f04f 30ff 	mov.w	r0, #4294967295
 80051bc:	b004      	add	sp, #16
 80051be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051c2:	6823      	ldr	r3, [r4, #0]
 80051c4:	f043 0320 	orr.w	r3, r3, #32
 80051c8:	6023      	str	r3, [r4, #0]
 80051ca:	4833      	ldr	r0, [pc, #204]	; (8005298 <_printf_i+0x240>)
 80051cc:	2778      	movs	r7, #120	; 0x78
 80051ce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80051d2:	6823      	ldr	r3, [r4, #0]
 80051d4:	6829      	ldr	r1, [r5, #0]
 80051d6:	061f      	lsls	r7, r3, #24
 80051d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80051dc:	d402      	bmi.n	80051e4 <_printf_i+0x18c>
 80051de:	065f      	lsls	r7, r3, #25
 80051e0:	bf48      	it	mi
 80051e2:	b2b6      	uxthmi	r6, r6
 80051e4:	07df      	lsls	r7, r3, #31
 80051e6:	bf48      	it	mi
 80051e8:	f043 0320 	orrmi.w	r3, r3, #32
 80051ec:	6029      	str	r1, [r5, #0]
 80051ee:	bf48      	it	mi
 80051f0:	6023      	strmi	r3, [r4, #0]
 80051f2:	b91e      	cbnz	r6, 80051fc <_printf_i+0x1a4>
 80051f4:	6823      	ldr	r3, [r4, #0]
 80051f6:	f023 0320 	bic.w	r3, r3, #32
 80051fa:	6023      	str	r3, [r4, #0]
 80051fc:	2310      	movs	r3, #16
 80051fe:	e7a7      	b.n	8005150 <_printf_i+0xf8>
 8005200:	4824      	ldr	r0, [pc, #144]	; (8005294 <_printf_i+0x23c>)
 8005202:	e7e4      	b.n	80051ce <_printf_i+0x176>
 8005204:	4615      	mov	r5, r2
 8005206:	e7bd      	b.n	8005184 <_printf_i+0x12c>
 8005208:	682b      	ldr	r3, [r5, #0]
 800520a:	6826      	ldr	r6, [r4, #0]
 800520c:	6961      	ldr	r1, [r4, #20]
 800520e:	1d18      	adds	r0, r3, #4
 8005210:	6028      	str	r0, [r5, #0]
 8005212:	0635      	lsls	r5, r6, #24
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	d501      	bpl.n	800521c <_printf_i+0x1c4>
 8005218:	6019      	str	r1, [r3, #0]
 800521a:	e002      	b.n	8005222 <_printf_i+0x1ca>
 800521c:	0670      	lsls	r0, r6, #25
 800521e:	d5fb      	bpl.n	8005218 <_printf_i+0x1c0>
 8005220:	8019      	strh	r1, [r3, #0]
 8005222:	2300      	movs	r3, #0
 8005224:	6123      	str	r3, [r4, #16]
 8005226:	4615      	mov	r5, r2
 8005228:	e7bc      	b.n	80051a4 <_printf_i+0x14c>
 800522a:	682b      	ldr	r3, [r5, #0]
 800522c:	1d1a      	adds	r2, r3, #4
 800522e:	602a      	str	r2, [r5, #0]
 8005230:	681d      	ldr	r5, [r3, #0]
 8005232:	6862      	ldr	r2, [r4, #4]
 8005234:	2100      	movs	r1, #0
 8005236:	4628      	mov	r0, r5
 8005238:	f7fa fff2 	bl	8000220 <memchr>
 800523c:	b108      	cbz	r0, 8005242 <_printf_i+0x1ea>
 800523e:	1b40      	subs	r0, r0, r5
 8005240:	6060      	str	r0, [r4, #4]
 8005242:	6863      	ldr	r3, [r4, #4]
 8005244:	6123      	str	r3, [r4, #16]
 8005246:	2300      	movs	r3, #0
 8005248:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800524c:	e7aa      	b.n	80051a4 <_printf_i+0x14c>
 800524e:	6923      	ldr	r3, [r4, #16]
 8005250:	462a      	mov	r2, r5
 8005252:	4649      	mov	r1, r9
 8005254:	4640      	mov	r0, r8
 8005256:	47d0      	blx	sl
 8005258:	3001      	adds	r0, #1
 800525a:	d0ad      	beq.n	80051b8 <_printf_i+0x160>
 800525c:	6823      	ldr	r3, [r4, #0]
 800525e:	079b      	lsls	r3, r3, #30
 8005260:	d413      	bmi.n	800528a <_printf_i+0x232>
 8005262:	68e0      	ldr	r0, [r4, #12]
 8005264:	9b03      	ldr	r3, [sp, #12]
 8005266:	4298      	cmp	r0, r3
 8005268:	bfb8      	it	lt
 800526a:	4618      	movlt	r0, r3
 800526c:	e7a6      	b.n	80051bc <_printf_i+0x164>
 800526e:	2301      	movs	r3, #1
 8005270:	4632      	mov	r2, r6
 8005272:	4649      	mov	r1, r9
 8005274:	4640      	mov	r0, r8
 8005276:	47d0      	blx	sl
 8005278:	3001      	adds	r0, #1
 800527a:	d09d      	beq.n	80051b8 <_printf_i+0x160>
 800527c:	3501      	adds	r5, #1
 800527e:	68e3      	ldr	r3, [r4, #12]
 8005280:	9903      	ldr	r1, [sp, #12]
 8005282:	1a5b      	subs	r3, r3, r1
 8005284:	42ab      	cmp	r3, r5
 8005286:	dcf2      	bgt.n	800526e <_printf_i+0x216>
 8005288:	e7eb      	b.n	8005262 <_printf_i+0x20a>
 800528a:	2500      	movs	r5, #0
 800528c:	f104 0619 	add.w	r6, r4, #25
 8005290:	e7f5      	b.n	800527e <_printf_i+0x226>
 8005292:	bf00      	nop
 8005294:	0800596d 	.word	0x0800596d
 8005298:	0800597e 	.word	0x0800597e

0800529c <_scanf_chars>:
 800529c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052a0:	4615      	mov	r5, r2
 80052a2:	688a      	ldr	r2, [r1, #8]
 80052a4:	4680      	mov	r8, r0
 80052a6:	460c      	mov	r4, r1
 80052a8:	b932      	cbnz	r2, 80052b8 <_scanf_chars+0x1c>
 80052aa:	698a      	ldr	r2, [r1, #24]
 80052ac:	2a00      	cmp	r2, #0
 80052ae:	bf0c      	ite	eq
 80052b0:	2201      	moveq	r2, #1
 80052b2:	f04f 32ff 	movne.w	r2, #4294967295
 80052b6:	608a      	str	r2, [r1, #8]
 80052b8:	6822      	ldr	r2, [r4, #0]
 80052ba:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800534c <_scanf_chars+0xb0>
 80052be:	06d1      	lsls	r1, r2, #27
 80052c0:	bf5f      	itttt	pl
 80052c2:	681a      	ldrpl	r2, [r3, #0]
 80052c4:	1d11      	addpl	r1, r2, #4
 80052c6:	6019      	strpl	r1, [r3, #0]
 80052c8:	6816      	ldrpl	r6, [r2, #0]
 80052ca:	2700      	movs	r7, #0
 80052cc:	69a0      	ldr	r0, [r4, #24]
 80052ce:	b188      	cbz	r0, 80052f4 <_scanf_chars+0x58>
 80052d0:	2801      	cmp	r0, #1
 80052d2:	d107      	bne.n	80052e4 <_scanf_chars+0x48>
 80052d4:	682a      	ldr	r2, [r5, #0]
 80052d6:	7811      	ldrb	r1, [r2, #0]
 80052d8:	6962      	ldr	r2, [r4, #20]
 80052da:	5c52      	ldrb	r2, [r2, r1]
 80052dc:	b952      	cbnz	r2, 80052f4 <_scanf_chars+0x58>
 80052de:	2f00      	cmp	r7, #0
 80052e0:	d031      	beq.n	8005346 <_scanf_chars+0xaa>
 80052e2:	e022      	b.n	800532a <_scanf_chars+0x8e>
 80052e4:	2802      	cmp	r0, #2
 80052e6:	d120      	bne.n	800532a <_scanf_chars+0x8e>
 80052e8:	682b      	ldr	r3, [r5, #0]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	f819 3003 	ldrb.w	r3, [r9, r3]
 80052f0:	071b      	lsls	r3, r3, #28
 80052f2:	d41a      	bmi.n	800532a <_scanf_chars+0x8e>
 80052f4:	6823      	ldr	r3, [r4, #0]
 80052f6:	06da      	lsls	r2, r3, #27
 80052f8:	bf5e      	ittt	pl
 80052fa:	682b      	ldrpl	r3, [r5, #0]
 80052fc:	781b      	ldrbpl	r3, [r3, #0]
 80052fe:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005302:	682a      	ldr	r2, [r5, #0]
 8005304:	686b      	ldr	r3, [r5, #4]
 8005306:	3201      	adds	r2, #1
 8005308:	602a      	str	r2, [r5, #0]
 800530a:	68a2      	ldr	r2, [r4, #8]
 800530c:	3b01      	subs	r3, #1
 800530e:	3a01      	subs	r2, #1
 8005310:	606b      	str	r3, [r5, #4]
 8005312:	3701      	adds	r7, #1
 8005314:	60a2      	str	r2, [r4, #8]
 8005316:	b142      	cbz	r2, 800532a <_scanf_chars+0x8e>
 8005318:	2b00      	cmp	r3, #0
 800531a:	dcd7      	bgt.n	80052cc <_scanf_chars+0x30>
 800531c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005320:	4629      	mov	r1, r5
 8005322:	4640      	mov	r0, r8
 8005324:	4798      	blx	r3
 8005326:	2800      	cmp	r0, #0
 8005328:	d0d0      	beq.n	80052cc <_scanf_chars+0x30>
 800532a:	6823      	ldr	r3, [r4, #0]
 800532c:	f013 0310 	ands.w	r3, r3, #16
 8005330:	d105      	bne.n	800533e <_scanf_chars+0xa2>
 8005332:	68e2      	ldr	r2, [r4, #12]
 8005334:	3201      	adds	r2, #1
 8005336:	60e2      	str	r2, [r4, #12]
 8005338:	69a2      	ldr	r2, [r4, #24]
 800533a:	b102      	cbz	r2, 800533e <_scanf_chars+0xa2>
 800533c:	7033      	strb	r3, [r6, #0]
 800533e:	6923      	ldr	r3, [r4, #16]
 8005340:	443b      	add	r3, r7
 8005342:	6123      	str	r3, [r4, #16]
 8005344:	2000      	movs	r0, #0
 8005346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800534a:	bf00      	nop
 800534c:	080059ab 	.word	0x080059ab

08005350 <_scanf_i>:
 8005350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005354:	4698      	mov	r8, r3
 8005356:	4b74      	ldr	r3, [pc, #464]	; (8005528 <_scanf_i+0x1d8>)
 8005358:	460c      	mov	r4, r1
 800535a:	4682      	mov	sl, r0
 800535c:	4616      	mov	r6, r2
 800535e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005362:	b087      	sub	sp, #28
 8005364:	ab03      	add	r3, sp, #12
 8005366:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800536a:	4b70      	ldr	r3, [pc, #448]	; (800552c <_scanf_i+0x1dc>)
 800536c:	69a1      	ldr	r1, [r4, #24]
 800536e:	4a70      	ldr	r2, [pc, #448]	; (8005530 <_scanf_i+0x1e0>)
 8005370:	2903      	cmp	r1, #3
 8005372:	bf18      	it	ne
 8005374:	461a      	movne	r2, r3
 8005376:	68a3      	ldr	r3, [r4, #8]
 8005378:	9201      	str	r2, [sp, #4]
 800537a:	1e5a      	subs	r2, r3, #1
 800537c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005380:	bf88      	it	hi
 8005382:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005386:	4627      	mov	r7, r4
 8005388:	bf82      	ittt	hi
 800538a:	eb03 0905 	addhi.w	r9, r3, r5
 800538e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005392:	60a3      	strhi	r3, [r4, #8]
 8005394:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005398:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800539c:	bf98      	it	ls
 800539e:	f04f 0900 	movls.w	r9, #0
 80053a2:	6023      	str	r3, [r4, #0]
 80053a4:	463d      	mov	r5, r7
 80053a6:	f04f 0b00 	mov.w	fp, #0
 80053aa:	6831      	ldr	r1, [r6, #0]
 80053ac:	ab03      	add	r3, sp, #12
 80053ae:	7809      	ldrb	r1, [r1, #0]
 80053b0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80053b4:	2202      	movs	r2, #2
 80053b6:	f7fa ff33 	bl	8000220 <memchr>
 80053ba:	b328      	cbz	r0, 8005408 <_scanf_i+0xb8>
 80053bc:	f1bb 0f01 	cmp.w	fp, #1
 80053c0:	d159      	bne.n	8005476 <_scanf_i+0x126>
 80053c2:	6862      	ldr	r2, [r4, #4]
 80053c4:	b92a      	cbnz	r2, 80053d2 <_scanf_i+0x82>
 80053c6:	6822      	ldr	r2, [r4, #0]
 80053c8:	2308      	movs	r3, #8
 80053ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ce:	6063      	str	r3, [r4, #4]
 80053d0:	6022      	str	r2, [r4, #0]
 80053d2:	6822      	ldr	r2, [r4, #0]
 80053d4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80053d8:	6022      	str	r2, [r4, #0]
 80053da:	68a2      	ldr	r2, [r4, #8]
 80053dc:	1e51      	subs	r1, r2, #1
 80053de:	60a1      	str	r1, [r4, #8]
 80053e0:	b192      	cbz	r2, 8005408 <_scanf_i+0xb8>
 80053e2:	6832      	ldr	r2, [r6, #0]
 80053e4:	1c51      	adds	r1, r2, #1
 80053e6:	6031      	str	r1, [r6, #0]
 80053e8:	7812      	ldrb	r2, [r2, #0]
 80053ea:	f805 2b01 	strb.w	r2, [r5], #1
 80053ee:	6872      	ldr	r2, [r6, #4]
 80053f0:	3a01      	subs	r2, #1
 80053f2:	2a00      	cmp	r2, #0
 80053f4:	6072      	str	r2, [r6, #4]
 80053f6:	dc07      	bgt.n	8005408 <_scanf_i+0xb8>
 80053f8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80053fc:	4631      	mov	r1, r6
 80053fe:	4650      	mov	r0, sl
 8005400:	4790      	blx	r2
 8005402:	2800      	cmp	r0, #0
 8005404:	f040 8085 	bne.w	8005512 <_scanf_i+0x1c2>
 8005408:	f10b 0b01 	add.w	fp, fp, #1
 800540c:	f1bb 0f03 	cmp.w	fp, #3
 8005410:	d1cb      	bne.n	80053aa <_scanf_i+0x5a>
 8005412:	6863      	ldr	r3, [r4, #4]
 8005414:	b90b      	cbnz	r3, 800541a <_scanf_i+0xca>
 8005416:	230a      	movs	r3, #10
 8005418:	6063      	str	r3, [r4, #4]
 800541a:	6863      	ldr	r3, [r4, #4]
 800541c:	4945      	ldr	r1, [pc, #276]	; (8005534 <_scanf_i+0x1e4>)
 800541e:	6960      	ldr	r0, [r4, #20]
 8005420:	1ac9      	subs	r1, r1, r3
 8005422:	f000 f889 	bl	8005538 <__sccl>
 8005426:	f04f 0b00 	mov.w	fp, #0
 800542a:	68a3      	ldr	r3, [r4, #8]
 800542c:	6822      	ldr	r2, [r4, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d03d      	beq.n	80054ae <_scanf_i+0x15e>
 8005432:	6831      	ldr	r1, [r6, #0]
 8005434:	6960      	ldr	r0, [r4, #20]
 8005436:	f891 c000 	ldrb.w	ip, [r1]
 800543a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800543e:	2800      	cmp	r0, #0
 8005440:	d035      	beq.n	80054ae <_scanf_i+0x15e>
 8005442:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8005446:	d124      	bne.n	8005492 <_scanf_i+0x142>
 8005448:	0510      	lsls	r0, r2, #20
 800544a:	d522      	bpl.n	8005492 <_scanf_i+0x142>
 800544c:	f10b 0b01 	add.w	fp, fp, #1
 8005450:	f1b9 0f00 	cmp.w	r9, #0
 8005454:	d003      	beq.n	800545e <_scanf_i+0x10e>
 8005456:	3301      	adds	r3, #1
 8005458:	f109 39ff 	add.w	r9, r9, #4294967295
 800545c:	60a3      	str	r3, [r4, #8]
 800545e:	6873      	ldr	r3, [r6, #4]
 8005460:	3b01      	subs	r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	6073      	str	r3, [r6, #4]
 8005466:	dd1b      	ble.n	80054a0 <_scanf_i+0x150>
 8005468:	6833      	ldr	r3, [r6, #0]
 800546a:	3301      	adds	r3, #1
 800546c:	6033      	str	r3, [r6, #0]
 800546e:	68a3      	ldr	r3, [r4, #8]
 8005470:	3b01      	subs	r3, #1
 8005472:	60a3      	str	r3, [r4, #8]
 8005474:	e7d9      	b.n	800542a <_scanf_i+0xda>
 8005476:	f1bb 0f02 	cmp.w	fp, #2
 800547a:	d1ae      	bne.n	80053da <_scanf_i+0x8a>
 800547c:	6822      	ldr	r2, [r4, #0]
 800547e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8005482:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005486:	d1bf      	bne.n	8005408 <_scanf_i+0xb8>
 8005488:	2310      	movs	r3, #16
 800548a:	6063      	str	r3, [r4, #4]
 800548c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005490:	e7a2      	b.n	80053d8 <_scanf_i+0x88>
 8005492:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8005496:	6022      	str	r2, [r4, #0]
 8005498:	780b      	ldrb	r3, [r1, #0]
 800549a:	f805 3b01 	strb.w	r3, [r5], #1
 800549e:	e7de      	b.n	800545e <_scanf_i+0x10e>
 80054a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80054a4:	4631      	mov	r1, r6
 80054a6:	4650      	mov	r0, sl
 80054a8:	4798      	blx	r3
 80054aa:	2800      	cmp	r0, #0
 80054ac:	d0df      	beq.n	800546e <_scanf_i+0x11e>
 80054ae:	6823      	ldr	r3, [r4, #0]
 80054b0:	05d9      	lsls	r1, r3, #23
 80054b2:	d50d      	bpl.n	80054d0 <_scanf_i+0x180>
 80054b4:	42bd      	cmp	r5, r7
 80054b6:	d909      	bls.n	80054cc <_scanf_i+0x17c>
 80054b8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80054bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80054c0:	4632      	mov	r2, r6
 80054c2:	4650      	mov	r0, sl
 80054c4:	4798      	blx	r3
 80054c6:	f105 39ff 	add.w	r9, r5, #4294967295
 80054ca:	464d      	mov	r5, r9
 80054cc:	42bd      	cmp	r5, r7
 80054ce:	d028      	beq.n	8005522 <_scanf_i+0x1d2>
 80054d0:	6822      	ldr	r2, [r4, #0]
 80054d2:	f012 0210 	ands.w	r2, r2, #16
 80054d6:	d113      	bne.n	8005500 <_scanf_i+0x1b0>
 80054d8:	702a      	strb	r2, [r5, #0]
 80054da:	6863      	ldr	r3, [r4, #4]
 80054dc:	9e01      	ldr	r6, [sp, #4]
 80054de:	4639      	mov	r1, r7
 80054e0:	4650      	mov	r0, sl
 80054e2:	47b0      	blx	r6
 80054e4:	f8d8 3000 	ldr.w	r3, [r8]
 80054e8:	6821      	ldr	r1, [r4, #0]
 80054ea:	1d1a      	adds	r2, r3, #4
 80054ec:	f8c8 2000 	str.w	r2, [r8]
 80054f0:	f011 0f20 	tst.w	r1, #32
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	d00f      	beq.n	8005518 <_scanf_i+0x1c8>
 80054f8:	6018      	str	r0, [r3, #0]
 80054fa:	68e3      	ldr	r3, [r4, #12]
 80054fc:	3301      	adds	r3, #1
 80054fe:	60e3      	str	r3, [r4, #12]
 8005500:	6923      	ldr	r3, [r4, #16]
 8005502:	1bed      	subs	r5, r5, r7
 8005504:	445d      	add	r5, fp
 8005506:	442b      	add	r3, r5
 8005508:	6123      	str	r3, [r4, #16]
 800550a:	2000      	movs	r0, #0
 800550c:	b007      	add	sp, #28
 800550e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005512:	f04f 0b00 	mov.w	fp, #0
 8005516:	e7ca      	b.n	80054ae <_scanf_i+0x15e>
 8005518:	07ca      	lsls	r2, r1, #31
 800551a:	bf4c      	ite	mi
 800551c:	8018      	strhmi	r0, [r3, #0]
 800551e:	6018      	strpl	r0, [r3, #0]
 8005520:	e7eb      	b.n	80054fa <_scanf_i+0x1aa>
 8005522:	2001      	movs	r0, #1
 8005524:	e7f2      	b.n	800550c <_scanf_i+0x1bc>
 8005526:	bf00      	nop
 8005528:	08005938 	.word	0x08005938
 800552c:	080058dd 	.word	0x080058dd
 8005530:	080057f5 	.word	0x080057f5
 8005534:	0800599f 	.word	0x0800599f

08005538 <__sccl>:
 8005538:	b570      	push	{r4, r5, r6, lr}
 800553a:	780b      	ldrb	r3, [r1, #0]
 800553c:	4604      	mov	r4, r0
 800553e:	2b5e      	cmp	r3, #94	; 0x5e
 8005540:	bf0b      	itete	eq
 8005542:	784b      	ldrbeq	r3, [r1, #1]
 8005544:	1c4a      	addne	r2, r1, #1
 8005546:	1c8a      	addeq	r2, r1, #2
 8005548:	2100      	movne	r1, #0
 800554a:	bf08      	it	eq
 800554c:	2101      	moveq	r1, #1
 800554e:	3801      	subs	r0, #1
 8005550:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8005554:	f800 1f01 	strb.w	r1, [r0, #1]!
 8005558:	42a8      	cmp	r0, r5
 800555a:	d1fb      	bne.n	8005554 <__sccl+0x1c>
 800555c:	b90b      	cbnz	r3, 8005562 <__sccl+0x2a>
 800555e:	1e50      	subs	r0, r2, #1
 8005560:	bd70      	pop	{r4, r5, r6, pc}
 8005562:	f081 0101 	eor.w	r1, r1, #1
 8005566:	54e1      	strb	r1, [r4, r3]
 8005568:	4610      	mov	r0, r2
 800556a:	4602      	mov	r2, r0
 800556c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005570:	2d2d      	cmp	r5, #45	; 0x2d
 8005572:	d005      	beq.n	8005580 <__sccl+0x48>
 8005574:	2d5d      	cmp	r5, #93	; 0x5d
 8005576:	d016      	beq.n	80055a6 <__sccl+0x6e>
 8005578:	2d00      	cmp	r5, #0
 800557a:	d0f1      	beq.n	8005560 <__sccl+0x28>
 800557c:	462b      	mov	r3, r5
 800557e:	e7f2      	b.n	8005566 <__sccl+0x2e>
 8005580:	7846      	ldrb	r6, [r0, #1]
 8005582:	2e5d      	cmp	r6, #93	; 0x5d
 8005584:	d0fa      	beq.n	800557c <__sccl+0x44>
 8005586:	42b3      	cmp	r3, r6
 8005588:	dcf8      	bgt.n	800557c <__sccl+0x44>
 800558a:	3002      	adds	r0, #2
 800558c:	461a      	mov	r2, r3
 800558e:	3201      	adds	r2, #1
 8005590:	4296      	cmp	r6, r2
 8005592:	54a1      	strb	r1, [r4, r2]
 8005594:	dcfb      	bgt.n	800558e <__sccl+0x56>
 8005596:	1af2      	subs	r2, r6, r3
 8005598:	3a01      	subs	r2, #1
 800559a:	1c5d      	adds	r5, r3, #1
 800559c:	42b3      	cmp	r3, r6
 800559e:	bfa8      	it	ge
 80055a0:	2200      	movge	r2, #0
 80055a2:	18ab      	adds	r3, r5, r2
 80055a4:	e7e1      	b.n	800556a <__sccl+0x32>
 80055a6:	4610      	mov	r0, r2
 80055a8:	e7da      	b.n	8005560 <__sccl+0x28>

080055aa <__submore>:
 80055aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055ae:	460c      	mov	r4, r1
 80055b0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80055b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055b6:	4299      	cmp	r1, r3
 80055b8:	d11d      	bne.n	80055f6 <__submore+0x4c>
 80055ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80055be:	f7ff f927 	bl	8004810 <_malloc_r>
 80055c2:	b918      	cbnz	r0, 80055cc <__submore+0x22>
 80055c4:	f04f 30ff 	mov.w	r0, #4294967295
 80055c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055d0:	63a3      	str	r3, [r4, #56]	; 0x38
 80055d2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80055d6:	6360      	str	r0, [r4, #52]	; 0x34
 80055d8:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80055dc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80055e0:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80055e4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80055e8:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80055ec:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80055f0:	6020      	str	r0, [r4, #0]
 80055f2:	2000      	movs	r0, #0
 80055f4:	e7e8      	b.n	80055c8 <__submore+0x1e>
 80055f6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80055f8:	0077      	lsls	r7, r6, #1
 80055fa:	463a      	mov	r2, r7
 80055fc:	f000 f848 	bl	8005690 <_realloc_r>
 8005600:	4605      	mov	r5, r0
 8005602:	2800      	cmp	r0, #0
 8005604:	d0de      	beq.n	80055c4 <__submore+0x1a>
 8005606:	eb00 0806 	add.w	r8, r0, r6
 800560a:	4601      	mov	r1, r0
 800560c:	4632      	mov	r2, r6
 800560e:	4640      	mov	r0, r8
 8005610:	f000 f830 	bl	8005674 <memcpy>
 8005614:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8005618:	f8c4 8000 	str.w	r8, [r4]
 800561c:	e7e9      	b.n	80055f2 <__submore+0x48>

0800561e <memmove>:
 800561e:	4288      	cmp	r0, r1
 8005620:	b510      	push	{r4, lr}
 8005622:	eb01 0402 	add.w	r4, r1, r2
 8005626:	d902      	bls.n	800562e <memmove+0x10>
 8005628:	4284      	cmp	r4, r0
 800562a:	4623      	mov	r3, r4
 800562c:	d807      	bhi.n	800563e <memmove+0x20>
 800562e:	1e43      	subs	r3, r0, #1
 8005630:	42a1      	cmp	r1, r4
 8005632:	d008      	beq.n	8005646 <memmove+0x28>
 8005634:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005638:	f803 2f01 	strb.w	r2, [r3, #1]!
 800563c:	e7f8      	b.n	8005630 <memmove+0x12>
 800563e:	4402      	add	r2, r0
 8005640:	4601      	mov	r1, r0
 8005642:	428a      	cmp	r2, r1
 8005644:	d100      	bne.n	8005648 <memmove+0x2a>
 8005646:	bd10      	pop	{r4, pc}
 8005648:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800564c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005650:	e7f7      	b.n	8005642 <memmove+0x24>
	...

08005654 <_sbrk_r>:
 8005654:	b538      	push	{r3, r4, r5, lr}
 8005656:	4d06      	ldr	r5, [pc, #24]	; (8005670 <_sbrk_r+0x1c>)
 8005658:	2300      	movs	r3, #0
 800565a:	4604      	mov	r4, r0
 800565c:	4608      	mov	r0, r1
 800565e:	602b      	str	r3, [r5, #0]
 8005660:	f7fb fbd8 	bl	8000e14 <_sbrk>
 8005664:	1c43      	adds	r3, r0, #1
 8005666:	d102      	bne.n	800566e <_sbrk_r+0x1a>
 8005668:	682b      	ldr	r3, [r5, #0]
 800566a:	b103      	cbz	r3, 800566e <_sbrk_r+0x1a>
 800566c:	6023      	str	r3, [r4, #0]
 800566e:	bd38      	pop	{r3, r4, r5, pc}
 8005670:	20000354 	.word	0x20000354

08005674 <memcpy>:
 8005674:	440a      	add	r2, r1
 8005676:	4291      	cmp	r1, r2
 8005678:	f100 33ff 	add.w	r3, r0, #4294967295
 800567c:	d100      	bne.n	8005680 <memcpy+0xc>
 800567e:	4770      	bx	lr
 8005680:	b510      	push	{r4, lr}
 8005682:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005686:	f803 4f01 	strb.w	r4, [r3, #1]!
 800568a:	4291      	cmp	r1, r2
 800568c:	d1f9      	bne.n	8005682 <memcpy+0xe>
 800568e:	bd10      	pop	{r4, pc}

08005690 <_realloc_r>:
 8005690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005694:	4680      	mov	r8, r0
 8005696:	4614      	mov	r4, r2
 8005698:	460e      	mov	r6, r1
 800569a:	b921      	cbnz	r1, 80056a6 <_realloc_r+0x16>
 800569c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056a0:	4611      	mov	r1, r2
 80056a2:	f7ff b8b5 	b.w	8004810 <_malloc_r>
 80056a6:	b92a      	cbnz	r2, 80056b4 <_realloc_r+0x24>
 80056a8:	f7ff f846 	bl	8004738 <_free_r>
 80056ac:	4625      	mov	r5, r4
 80056ae:	4628      	mov	r0, r5
 80056b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056b4:	f000 f914 	bl	80058e0 <_malloc_usable_size_r>
 80056b8:	4284      	cmp	r4, r0
 80056ba:	4607      	mov	r7, r0
 80056bc:	d802      	bhi.n	80056c4 <_realloc_r+0x34>
 80056be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80056c2:	d812      	bhi.n	80056ea <_realloc_r+0x5a>
 80056c4:	4621      	mov	r1, r4
 80056c6:	4640      	mov	r0, r8
 80056c8:	f7ff f8a2 	bl	8004810 <_malloc_r>
 80056cc:	4605      	mov	r5, r0
 80056ce:	2800      	cmp	r0, #0
 80056d0:	d0ed      	beq.n	80056ae <_realloc_r+0x1e>
 80056d2:	42bc      	cmp	r4, r7
 80056d4:	4622      	mov	r2, r4
 80056d6:	4631      	mov	r1, r6
 80056d8:	bf28      	it	cs
 80056da:	463a      	movcs	r2, r7
 80056dc:	f7ff ffca 	bl	8005674 <memcpy>
 80056e0:	4631      	mov	r1, r6
 80056e2:	4640      	mov	r0, r8
 80056e4:	f7ff f828 	bl	8004738 <_free_r>
 80056e8:	e7e1      	b.n	80056ae <_realloc_r+0x1e>
 80056ea:	4635      	mov	r5, r6
 80056ec:	e7df      	b.n	80056ae <_realloc_r+0x1e>
	...

080056f0 <_strtol_l.constprop.0>:
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056f6:	d001      	beq.n	80056fc <_strtol_l.constprop.0+0xc>
 80056f8:	2b24      	cmp	r3, #36	; 0x24
 80056fa:	d906      	bls.n	800570a <_strtol_l.constprop.0+0x1a>
 80056fc:	f7fe fff0 	bl	80046e0 <__errno>
 8005700:	2316      	movs	r3, #22
 8005702:	6003      	str	r3, [r0, #0]
 8005704:	2000      	movs	r0, #0
 8005706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800570a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80057f0 <_strtol_l.constprop.0+0x100>
 800570e:	460d      	mov	r5, r1
 8005710:	462e      	mov	r6, r5
 8005712:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005716:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800571a:	f017 0708 	ands.w	r7, r7, #8
 800571e:	d1f7      	bne.n	8005710 <_strtol_l.constprop.0+0x20>
 8005720:	2c2d      	cmp	r4, #45	; 0x2d
 8005722:	d132      	bne.n	800578a <_strtol_l.constprop.0+0x9a>
 8005724:	782c      	ldrb	r4, [r5, #0]
 8005726:	2701      	movs	r7, #1
 8005728:	1cb5      	adds	r5, r6, #2
 800572a:	2b00      	cmp	r3, #0
 800572c:	d05b      	beq.n	80057e6 <_strtol_l.constprop.0+0xf6>
 800572e:	2b10      	cmp	r3, #16
 8005730:	d109      	bne.n	8005746 <_strtol_l.constprop.0+0x56>
 8005732:	2c30      	cmp	r4, #48	; 0x30
 8005734:	d107      	bne.n	8005746 <_strtol_l.constprop.0+0x56>
 8005736:	782c      	ldrb	r4, [r5, #0]
 8005738:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800573c:	2c58      	cmp	r4, #88	; 0x58
 800573e:	d14d      	bne.n	80057dc <_strtol_l.constprop.0+0xec>
 8005740:	786c      	ldrb	r4, [r5, #1]
 8005742:	2310      	movs	r3, #16
 8005744:	3502      	adds	r5, #2
 8005746:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800574a:	f108 38ff 	add.w	r8, r8, #4294967295
 800574e:	f04f 0e00 	mov.w	lr, #0
 8005752:	fbb8 f9f3 	udiv	r9, r8, r3
 8005756:	4676      	mov	r6, lr
 8005758:	fb03 8a19 	mls	sl, r3, r9, r8
 800575c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005760:	f1bc 0f09 	cmp.w	ip, #9
 8005764:	d816      	bhi.n	8005794 <_strtol_l.constprop.0+0xa4>
 8005766:	4664      	mov	r4, ip
 8005768:	42a3      	cmp	r3, r4
 800576a:	dd24      	ble.n	80057b6 <_strtol_l.constprop.0+0xc6>
 800576c:	f1be 3fff 	cmp.w	lr, #4294967295
 8005770:	d008      	beq.n	8005784 <_strtol_l.constprop.0+0x94>
 8005772:	45b1      	cmp	r9, r6
 8005774:	d31c      	bcc.n	80057b0 <_strtol_l.constprop.0+0xc0>
 8005776:	d101      	bne.n	800577c <_strtol_l.constprop.0+0x8c>
 8005778:	45a2      	cmp	sl, r4
 800577a:	db19      	blt.n	80057b0 <_strtol_l.constprop.0+0xc0>
 800577c:	fb06 4603 	mla	r6, r6, r3, r4
 8005780:	f04f 0e01 	mov.w	lr, #1
 8005784:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005788:	e7e8      	b.n	800575c <_strtol_l.constprop.0+0x6c>
 800578a:	2c2b      	cmp	r4, #43	; 0x2b
 800578c:	bf04      	itt	eq
 800578e:	782c      	ldrbeq	r4, [r5, #0]
 8005790:	1cb5      	addeq	r5, r6, #2
 8005792:	e7ca      	b.n	800572a <_strtol_l.constprop.0+0x3a>
 8005794:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005798:	f1bc 0f19 	cmp.w	ip, #25
 800579c:	d801      	bhi.n	80057a2 <_strtol_l.constprop.0+0xb2>
 800579e:	3c37      	subs	r4, #55	; 0x37
 80057a0:	e7e2      	b.n	8005768 <_strtol_l.constprop.0+0x78>
 80057a2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80057a6:	f1bc 0f19 	cmp.w	ip, #25
 80057aa:	d804      	bhi.n	80057b6 <_strtol_l.constprop.0+0xc6>
 80057ac:	3c57      	subs	r4, #87	; 0x57
 80057ae:	e7db      	b.n	8005768 <_strtol_l.constprop.0+0x78>
 80057b0:	f04f 3eff 	mov.w	lr, #4294967295
 80057b4:	e7e6      	b.n	8005784 <_strtol_l.constprop.0+0x94>
 80057b6:	f1be 3fff 	cmp.w	lr, #4294967295
 80057ba:	d105      	bne.n	80057c8 <_strtol_l.constprop.0+0xd8>
 80057bc:	2322      	movs	r3, #34	; 0x22
 80057be:	6003      	str	r3, [r0, #0]
 80057c0:	4646      	mov	r6, r8
 80057c2:	b942      	cbnz	r2, 80057d6 <_strtol_l.constprop.0+0xe6>
 80057c4:	4630      	mov	r0, r6
 80057c6:	e79e      	b.n	8005706 <_strtol_l.constprop.0+0x16>
 80057c8:	b107      	cbz	r7, 80057cc <_strtol_l.constprop.0+0xdc>
 80057ca:	4276      	negs	r6, r6
 80057cc:	2a00      	cmp	r2, #0
 80057ce:	d0f9      	beq.n	80057c4 <_strtol_l.constprop.0+0xd4>
 80057d0:	f1be 0f00 	cmp.w	lr, #0
 80057d4:	d000      	beq.n	80057d8 <_strtol_l.constprop.0+0xe8>
 80057d6:	1e69      	subs	r1, r5, #1
 80057d8:	6011      	str	r1, [r2, #0]
 80057da:	e7f3      	b.n	80057c4 <_strtol_l.constprop.0+0xd4>
 80057dc:	2430      	movs	r4, #48	; 0x30
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1b1      	bne.n	8005746 <_strtol_l.constprop.0+0x56>
 80057e2:	2308      	movs	r3, #8
 80057e4:	e7af      	b.n	8005746 <_strtol_l.constprop.0+0x56>
 80057e6:	2c30      	cmp	r4, #48	; 0x30
 80057e8:	d0a5      	beq.n	8005736 <_strtol_l.constprop.0+0x46>
 80057ea:	230a      	movs	r3, #10
 80057ec:	e7ab      	b.n	8005746 <_strtol_l.constprop.0+0x56>
 80057ee:	bf00      	nop
 80057f0:	080059ab 	.word	0x080059ab

080057f4 <_strtol_r>:
 80057f4:	f7ff bf7c 	b.w	80056f0 <_strtol_l.constprop.0>

080057f8 <_strtoul_l.constprop.0>:
 80057f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80057fc:	4f36      	ldr	r7, [pc, #216]	; (80058d8 <_strtoul_l.constprop.0+0xe0>)
 80057fe:	4686      	mov	lr, r0
 8005800:	460d      	mov	r5, r1
 8005802:	4628      	mov	r0, r5
 8005804:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005808:	5d3e      	ldrb	r6, [r7, r4]
 800580a:	f016 0608 	ands.w	r6, r6, #8
 800580e:	d1f8      	bne.n	8005802 <_strtoul_l.constprop.0+0xa>
 8005810:	2c2d      	cmp	r4, #45	; 0x2d
 8005812:	d130      	bne.n	8005876 <_strtoul_l.constprop.0+0x7e>
 8005814:	782c      	ldrb	r4, [r5, #0]
 8005816:	2601      	movs	r6, #1
 8005818:	1c85      	adds	r5, r0, #2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d057      	beq.n	80058ce <_strtoul_l.constprop.0+0xd6>
 800581e:	2b10      	cmp	r3, #16
 8005820:	d109      	bne.n	8005836 <_strtoul_l.constprop.0+0x3e>
 8005822:	2c30      	cmp	r4, #48	; 0x30
 8005824:	d107      	bne.n	8005836 <_strtoul_l.constprop.0+0x3e>
 8005826:	7828      	ldrb	r0, [r5, #0]
 8005828:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800582c:	2858      	cmp	r0, #88	; 0x58
 800582e:	d149      	bne.n	80058c4 <_strtoul_l.constprop.0+0xcc>
 8005830:	786c      	ldrb	r4, [r5, #1]
 8005832:	2310      	movs	r3, #16
 8005834:	3502      	adds	r5, #2
 8005836:	f04f 38ff 	mov.w	r8, #4294967295
 800583a:	2700      	movs	r7, #0
 800583c:	fbb8 f8f3 	udiv	r8, r8, r3
 8005840:	fb03 f908 	mul.w	r9, r3, r8
 8005844:	ea6f 0909 	mvn.w	r9, r9
 8005848:	4638      	mov	r0, r7
 800584a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800584e:	f1bc 0f09 	cmp.w	ip, #9
 8005852:	d815      	bhi.n	8005880 <_strtoul_l.constprop.0+0x88>
 8005854:	4664      	mov	r4, ip
 8005856:	42a3      	cmp	r3, r4
 8005858:	dd23      	ble.n	80058a2 <_strtoul_l.constprop.0+0xaa>
 800585a:	f1b7 3fff 	cmp.w	r7, #4294967295
 800585e:	d007      	beq.n	8005870 <_strtoul_l.constprop.0+0x78>
 8005860:	4580      	cmp	r8, r0
 8005862:	d31b      	bcc.n	800589c <_strtoul_l.constprop.0+0xa4>
 8005864:	d101      	bne.n	800586a <_strtoul_l.constprop.0+0x72>
 8005866:	45a1      	cmp	r9, r4
 8005868:	db18      	blt.n	800589c <_strtoul_l.constprop.0+0xa4>
 800586a:	fb00 4003 	mla	r0, r0, r3, r4
 800586e:	2701      	movs	r7, #1
 8005870:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005874:	e7e9      	b.n	800584a <_strtoul_l.constprop.0+0x52>
 8005876:	2c2b      	cmp	r4, #43	; 0x2b
 8005878:	bf04      	itt	eq
 800587a:	782c      	ldrbeq	r4, [r5, #0]
 800587c:	1c85      	addeq	r5, r0, #2
 800587e:	e7cc      	b.n	800581a <_strtoul_l.constprop.0+0x22>
 8005880:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005884:	f1bc 0f19 	cmp.w	ip, #25
 8005888:	d801      	bhi.n	800588e <_strtoul_l.constprop.0+0x96>
 800588a:	3c37      	subs	r4, #55	; 0x37
 800588c:	e7e3      	b.n	8005856 <_strtoul_l.constprop.0+0x5e>
 800588e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005892:	f1bc 0f19 	cmp.w	ip, #25
 8005896:	d804      	bhi.n	80058a2 <_strtoul_l.constprop.0+0xaa>
 8005898:	3c57      	subs	r4, #87	; 0x57
 800589a:	e7dc      	b.n	8005856 <_strtoul_l.constprop.0+0x5e>
 800589c:	f04f 37ff 	mov.w	r7, #4294967295
 80058a0:	e7e6      	b.n	8005870 <_strtoul_l.constprop.0+0x78>
 80058a2:	1c7b      	adds	r3, r7, #1
 80058a4:	d106      	bne.n	80058b4 <_strtoul_l.constprop.0+0xbc>
 80058a6:	2322      	movs	r3, #34	; 0x22
 80058a8:	f8ce 3000 	str.w	r3, [lr]
 80058ac:	4638      	mov	r0, r7
 80058ae:	b932      	cbnz	r2, 80058be <_strtoul_l.constprop.0+0xc6>
 80058b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80058b4:	b106      	cbz	r6, 80058b8 <_strtoul_l.constprop.0+0xc0>
 80058b6:	4240      	negs	r0, r0
 80058b8:	2a00      	cmp	r2, #0
 80058ba:	d0f9      	beq.n	80058b0 <_strtoul_l.constprop.0+0xb8>
 80058bc:	b107      	cbz	r7, 80058c0 <_strtoul_l.constprop.0+0xc8>
 80058be:	1e69      	subs	r1, r5, #1
 80058c0:	6011      	str	r1, [r2, #0]
 80058c2:	e7f5      	b.n	80058b0 <_strtoul_l.constprop.0+0xb8>
 80058c4:	2430      	movs	r4, #48	; 0x30
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1b5      	bne.n	8005836 <_strtoul_l.constprop.0+0x3e>
 80058ca:	2308      	movs	r3, #8
 80058cc:	e7b3      	b.n	8005836 <_strtoul_l.constprop.0+0x3e>
 80058ce:	2c30      	cmp	r4, #48	; 0x30
 80058d0:	d0a9      	beq.n	8005826 <_strtoul_l.constprop.0+0x2e>
 80058d2:	230a      	movs	r3, #10
 80058d4:	e7af      	b.n	8005836 <_strtoul_l.constprop.0+0x3e>
 80058d6:	bf00      	nop
 80058d8:	080059ab 	.word	0x080059ab

080058dc <_strtoul_r>:
 80058dc:	f7ff bf8c 	b.w	80057f8 <_strtoul_l.constprop.0>

080058e0 <_malloc_usable_size_r>:
 80058e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058e4:	1f18      	subs	r0, r3, #4
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	bfbc      	itt	lt
 80058ea:	580b      	ldrlt	r3, [r1, r0]
 80058ec:	18c0      	addlt	r0, r0, r3
 80058ee:	4770      	bx	lr

080058f0 <_init>:
 80058f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058f2:	bf00      	nop
 80058f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058f6:	bc08      	pop	{r3}
 80058f8:	469e      	mov	lr, r3
 80058fa:	4770      	bx	lr

080058fc <_fini>:
 80058fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058fe:	bf00      	nop
 8005900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005902:	bc08      	pop	{r3}
 8005904:	469e      	mov	lr, r3
 8005906:	4770      	bx	lr
